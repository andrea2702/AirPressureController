#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/285ee420-cf1b-483d-814f-113b86cdc003

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float preassure;
  int setPoint;
  bool lodo;
  bool pavimento;
  bool tierra;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#ifdef ARDUINO_ARCH_ESP32
#include <WiFi.h>
#else
#include <ESP8266WiFi.h>
#endif

#include <mcp_can.h>
#include <SPI.h>

/* Websocket definitions */
const char* ssid = "LAPTOP-S39R1IRA 7344";                                              // Enter SSID
const char* password = "Z87y437=";                                      // Enter Password

/* MCP2515 definitions */
#define WS_BUFFER_SIZE  13
#ifdef ARDUINO_ARCH_ESP32
#define TEST_PGN  0x04FEF9A3
#else
#define TEST_PGN  0x04FEF9A3
#endif
// CAN TX Variables
unsigned long txId = 0;
unsigned char txLen = 0;
unsigned char txBuf[8];
char msgString[128];
unsigned long prevTX = 0;                                        // Variable to store last execution time
const unsigned int invlTX = 1000;                                // One second interval constant
byte data[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};  // Generic CAN data to send
// CAN RX Variables
unsigned long rxId;
unsigned char len;
unsigned char rxBuf[8];
// CAN0 INT and CS
#ifdef ARDUINO_ARCH_ESP32
#define CAN0_INT  21                            // Set INT to pin 2 on ESP32
MCP_CAN CAN0(5);                                // Set CS to pin 5 on ESP32
#else
#define CAN0_INT  4                             // Set INT to pin 2 on ESP8266
MCP_CAN CAN0(15);                               // Set CS to pin 15 on ESP8266
#endif

void setup() {
  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  Serial.begin(115200);
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Connect to WiFi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print("*");
  }

  Serial.println("");
  Serial.println("WiFi connection Successful");
  Serial.print("The IP Address of Module is: ");
  Serial.print(WiFi.localIP());// Print the IP address

  delay(2000);

  /* Initialize MCP CAN */
  // Initialize MCP2515 running at 16MHz with a baudrate of 500kb/s and the masks and filters disabled.
  if (CAN0.begin(MCP_ANY, CAN_500KBPS, MCP_16MHZ) == CAN_OK)
    Serial.println("MCP2515 Initialized Successfully!");
  else
    Serial.println("Error Initializing MCP2515...");

  // Since we do not set NORMAL mode, we are in loopback mode by default.
  CAN0.setMode(MCP_NORMAL);

  pinMode(CAN0_INT, INPUT);                           // Configuring pin for /INT input

  Serial.println("MCP2515 Loopback ...");
}

void loop() {
  ArduinoCloud.update();
  // Your code here

  if (!digitalRead(CAN0_INT))                         // If CAN0_INT pin is low, read receive buffer
  {
    CAN0.readMsgBuf(&rxId, &len, rxBuf);  // Read data: len = data length, buf = data byte(s)
    Serial.print("Mensaje recibido");
    sprintf(msgString, "Id: 0x%.8lX  Len: %1d  Data:", data, len);
    Serial.print(msgString);
    for (byte i = 0; i < len; i++) {
      sprintf(msgString, " 0x%.2X", rxBuf[i]);
      Serial.print(msgString);
    }
    Serial.println();
    preassure = rxBuf[0] * 0.2;
  }
}



/*
  Since SetPoint is READ_WRITE variable, onSetPointChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSetPointChange()  {
  // Add your code here to act upon SetPoint change
  data[0] = setPoint;
  prevTX = millis();
  byte sndStat = CAN0.sendMsgBuf(TEST_PGN, 1, 8, data);

  if (sndStat == CAN_OK) {
    Serial.println("CAN Message Sent Successfully!");
    sprintf(msgString, "Set point changed to: %d", setPoint);
    Serial.println(msgString);
  }
  else
    Serial.println("Error Sending CAN Message...");
}

/*
  Since Preassure is READ_WRITE variable, onPreassureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPreassureChange()  {
  // Add your code here to act upon Preassure chan

}


/*
  Since Tierra is READ_WRITE variable, onTierraChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTierraChange()  {
  // Add your code here to act upon Tierra change
  if (tierra) {
    lodo = false;
    pavimento = false;
    setPoint = 16;
    data[0] = setPoint;
    prevTX = millis();
    byte sndStat = CAN0.sendMsgBuf(TEST_PGN, 1, 8, data);

    if (sndStat == CAN_OK) {
      Serial.println("CAN Message Sent Successfully!");
      sprintf(msgString, "Set point changed to: %d", setPoint);
      Serial.println(msgString);
    }
    else
      Serial.println("Error Sending CAN Message...");
  }
}

/*
  Since Pavimento is READ_WRITE variable, onPavimentoChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onPavimentoChange()  {
  // Add your code here to act upon Pavimento change
  if (pavimento) {
    lodo = false;
    tierra = false;
    setPoint = 20;
    data[0] = setPoint;
    prevTX = millis();
    byte sndStat = CAN0.sendMsgBuf(TEST_PGN, 1, 8, data);

    if (sndStat == CAN_OK) {
      Serial.println("CAN Message Sent Successfully!");
      sprintf(msgString, "Set point changed to: %d", setPoint);
      Serial.println(msgString);
    }
    else
      Serial.println("Error Sending CAN Message...");
  }
}

/*
  Since Lodo is READ_WRITE variable, onLodoChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLodoChange()  {
  // Add your code here to act upon Lodo change
  if (lodo) {
    tierra = false;
    pavimento = false;
    setPoint = 12;
    data[0] = setPoint;
    prevTX = millis();
    byte sndStat = CAN0.sendMsgBuf(TEST_PGN, 1, 8, data);

    if (sndStat == CAN_OK) {
      Serial.println("CAN Message Sent Successfully!");
      sprintf(msgString, "Set point changed to: %d", setPoint);
      Serial.println(msgString);
    }
    else
      Serial.println("Error Sending CAN Message...");
  }
}