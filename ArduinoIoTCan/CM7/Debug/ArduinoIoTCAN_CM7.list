
ArduinoIoTCAN_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c07c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004cc  0800c320  0800c320  0001c320  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7ec  0800c7ec  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7ec  0800c7ec  0001c7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7f4  0800c7f4  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7f4  0800c7f4  0001c7f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c7f8  0800c7f8  0001c7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  24000000  0800c7fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  240001e8  0800c9e4  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240004c0  0800c9e4  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e86a  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e06  00000000  00000000  0003ea80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  00041888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017a0  00000000  00000000  00043140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003dfb5  00000000  00000000  000448e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c805  00000000  00000000  00082895  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a4461  00000000  00000000  0009f09a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002434fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b20  00000000  00000000  0024354c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e8 	.word	0x240001e8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c304 	.word	0x0800c304

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001ec 	.word	0x240001ec
 80002dc:	0800c304 	.word	0x0800c304

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <PID_Initialize>:
int setPoint;
double preassure;
double e=0.0,e_1=0.0,u=0.0,u_1=0.0;
double kp,ti,q0,q1;

void PID_Initialize( void ){
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
    double T = 0.01;//			sample rate
 80007c6:	a32c      	add	r3, pc, #176	; (adr r3, 8000878 <PID_Initialize+0xb8>)
 80007c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007cc:	e9c7 2300 	strd	r2, r3, [r7]
    //Complete here with the identified parameters of the plant
    //Calculate the coefficients for the discrete PID controller
    kp = 0.02867;
 80007d0:	4925      	ldr	r1, [pc, #148]	; (8000868 <PID_Initialize+0xa8>)
 80007d2:	a321      	add	r3, pc, #132	; (adr r3, 8000858 <PID_Initialize+0x98>)
 80007d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007d8:	e9c1 2300 	strd	r2, r3, [r1]
    ti = kp / 0.001529;
 80007dc:	4b22      	ldr	r3, [pc, #136]	; (8000868 <PID_Initialize+0xa8>)
 80007de:	ed93 6b00 	vldr	d6, [r3]
 80007e2:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8000860 <PID_Initialize+0xa0>
 80007e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007ea:	4b20      	ldr	r3, [pc, #128]	; (800086c <PID_Initialize+0xac>)
 80007ec:	ed83 7b00 	vstr	d7, [r3]
    q0 = kp + ((kp * T)/(2.0 * ti));
 80007f0:	4b1d      	ldr	r3, [pc, #116]	; (8000868 <PID_Initialize+0xa8>)
 80007f2:	ed93 6b00 	vldr	d6, [r3]
 80007f6:	ed97 7b00 	vldr	d7, [r7]
 80007fa:	ee26 5b07 	vmul.f64	d5, d6, d7
 80007fe:	4b1b      	ldr	r3, [pc, #108]	; (800086c <PID_Initialize+0xac>)
 8000800:	ed93 7b00 	vldr	d7, [r3]
 8000804:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000808:	ee85 6b07 	vdiv.f64	d6, d5, d7
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <PID_Initialize+0xa8>)
 800080e:	ed93 7b00 	vldr	d7, [r3]
 8000812:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000816:	4b16      	ldr	r3, [pc, #88]	; (8000870 <PID_Initialize+0xb0>)
 8000818:	ed83 7b00 	vstr	d7, [r3]
    q1 = ((kp * T)/(2.0 * ti)) - kp;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <PID_Initialize+0xa8>)
 800081e:	ed93 6b00 	vldr	d6, [r3]
 8000822:	ed97 7b00 	vldr	d7, [r7]
 8000826:	ee26 5b07 	vmul.f64	d5, d6, d7
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <PID_Initialize+0xac>)
 800082c:	ed93 7b00 	vldr	d7, [r3]
 8000830:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000834:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000838:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <PID_Initialize+0xa8>)
 800083a:	ed93 7b00 	vldr	d7, [r3]
 800083e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <PID_Initialize+0xb4>)
 8000844:	ed83 7b00 	vstr	d7, [r3]
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	f3af 8000 	nop.w
 8000858:	21815a08 	.word	0x21815a08
 800085c:	3f9d5bab 	.word	0x3f9d5bab
 8000860:	3fb7a5f4 	.word	0x3fb7a5f4
 8000864:	3f590d17 	.word	0x3f590d17
 8000868:	24000488 	.word	0x24000488
 800086c:	24000490 	.word	0x24000490
 8000870:	24000498 	.word	0x24000498
 8000874:	240004a0 	.word	0x240004a0
 8000878:	47ae147b 	.word	0x47ae147b
 800087c:	3f847ae1 	.word	0x3f847ae1

08000880 <PID_Discrete>:
double PID_Discrete( double yM ){
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	ed87 0b00 	vstr	d0, [r7]
    double R = setPoint;//			set-point
 800088a:	4b31      	ldr	r3, [pc, #196]	; (8000950 <PID_Discrete+0xd0>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	ee07 3a90 	vmov	s15, r3
 8000892:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000896:	ed87 7b02 	vstr	d7, [r7, #8]

    e = R - yM;//				calculate the error
 800089a:	ed97 6b02 	vldr	d6, [r7, #8]
 800089e:	ed97 7b00 	vldr	d7, [r7]
 80008a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80008a6:	4b2b      	ldr	r3, [pc, #172]	; (8000954 <PID_Discrete+0xd4>)
 80008a8:	ed83 7b00 	vstr	d7, [r3]
    u = u_1 + q0*e + q1*e_1;//	discrete PID controller
 80008ac:	4b2a      	ldr	r3, [pc, #168]	; (8000958 <PID_Discrete+0xd8>)
 80008ae:	ed93 6b00 	vldr	d6, [r3]
 80008b2:	4b28      	ldr	r3, [pc, #160]	; (8000954 <PID_Discrete+0xd4>)
 80008b4:	ed93 7b00 	vldr	d7, [r3]
 80008b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80008bc:	4b27      	ldr	r3, [pc, #156]	; (800095c <PID_Discrete+0xdc>)
 80008be:	ed93 7b00 	vldr	d7, [r3]
 80008c2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80008c6:	4b26      	ldr	r3, [pc, #152]	; (8000960 <PID_Discrete+0xe0>)
 80008c8:	ed93 5b00 	vldr	d5, [r3]
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <PID_Discrete+0xe4>)
 80008ce:	ed93 7b00 	vldr	d7, [r3]
 80008d2:	ee25 7b07 	vmul.f64	d7, d5, d7
 80008d6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80008da:	4b23      	ldr	r3, [pc, #140]	; (8000968 <PID_Discrete+0xe8>)
 80008dc:	ed83 7b00 	vstr	d7, [r3]

    //Saturate the controller with upper and lower limits
    if(u >= 1)// 			maximum pressure value
 80008e0:	4b21      	ldr	r3, [pc, #132]	; (8000968 <PID_Discrete+0xe8>)
 80008e2:	ed93 7b00 	vldr	d7, [r3]
 80008e6:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80008ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80008ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f2:	db05      	blt.n	8000900 <PID_Discrete+0x80>
        u = 1;
 80008f4:	491c      	ldr	r1, [pc, #112]	; (8000968 <PID_Discrete+0xe8>)
 80008f6:	f04f 0200 	mov.w	r2, #0
 80008fa:	4b1c      	ldr	r3, [pc, #112]	; (800096c <PID_Discrete+0xec>)
 80008fc:	e9c1 2300 	strd	r2, r3, [r1]
    if(u <= 0)//			minimum pressure value
 8000900:	4b19      	ldr	r3, [pc, #100]	; (8000968 <PID_Discrete+0xe8>)
 8000902:	ed93 7b00 	vldr	d7, [r3]
 8000906:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800090a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800090e:	d806      	bhi.n	800091e <PID_Discrete+0x9e>
        u = 0;
 8000910:	4915      	ldr	r1, [pc, #84]	; (8000968 <PID_Discrete+0xe8>)
 8000912:	f04f 0200 	mov.w	r2, #0
 8000916:	f04f 0300 	mov.w	r3, #0
 800091a:	e9c1 2300 	strd	r2, r3, [r1]
    //Update the values for the next iteration
    e_1 = e;
 800091e:	4b0d      	ldr	r3, [pc, #52]	; (8000954 <PID_Discrete+0xd4>)
 8000920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000924:	490f      	ldr	r1, [pc, #60]	; (8000964 <PID_Discrete+0xe4>)
 8000926:	e9c1 2300 	strd	r2, r3, [r1]
    u_1 = u;
 800092a:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <PID_Discrete+0xe8>)
 800092c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000930:	490a      	ldr	r1, [pc, #40]	; (800095c <PID_Discrete+0xdc>)
 8000932:	e9c1 2300 	strd	r2, r3, [r1]

    return u;
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <PID_Discrete+0xe8>)
 8000938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800093c:	ec43 2b17 	vmov	d7, r2, r3
}
 8000940:	eeb0 0b47 	vmov.f64	d0, d7
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	24000458 	.word	0x24000458
 8000954:	24000468 	.word	0x24000468
 8000958:	24000498 	.word	0x24000498
 800095c:	24000480 	.word	0x24000480
 8000960:	240004a0 	.word	0x240004a0
 8000964:	24000470 	.word	0x24000470
 8000968:	24000478 	.word	0x24000478
 800096c:	3ff00000 	.word	0x3ff00000

08000970 <_write>:
static void MX_USART2_UART_Init(void);
static void MX_FDCAN1_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */
int _write( int file, char *ptr, int len ) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b086      	sub	sp, #24
 8000974:	af00      	add	r7, sp, #0
 8000976:	60f8      	str	r0, [r7, #12]
 8000978:	60b9      	str	r1, [r7, #8]
 800097a:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
 8000980:	e00b      	b.n	800099a <_write+0x2a>
		HAL_UART_Transmit(&huart2, ( uint8_t *)ptr++, 1, HAL_UART_TIMEOUT_VALUE);
 8000982:	68b9      	ldr	r1, [r7, #8]
 8000984:	1c4b      	adds	r3, r1, #1
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800098c:	2201      	movs	r2, #1
 800098e:	4807      	ldr	r0, [pc, #28]	; (80009ac <_write+0x3c>)
 8000990:	f007 ff48 	bl	8008824 <HAL_UART_Transmit>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	3301      	adds	r3, #1
 8000998:	617b      	str	r3, [r7, #20]
 800099a:	697a      	ldr	r2, [r7, #20]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	429a      	cmp	r2, r3
 80009a0:	dbef      	blt.n	8000982 <_write+0x12>
	}
	return len;
 80009a2:	687b      	ldr	r3, [r7, #4]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3718      	adds	r7, #24
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	24000354 	.word	0x24000354

080009b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08e      	sub	sp, #56	; 0x38
 80009b4:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 80009b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009ba:	637b      	str	r3, [r7, #52]	; 0x34
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80009bc:	bf00      	nop
 80009be:	4b90      	ldr	r3, [pc, #576]	; (8000c00 <main+0x250>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d004      	beq.n	80009d4 <main+0x24>
 80009ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009cc:	1e5a      	subs	r2, r3, #1
 80009ce:	637a      	str	r2, [r7, #52]	; 0x34
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	dcf4      	bgt.n	80009be <main+0xe>
	if ( timeout < 0 ) {
 80009d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	da01      	bge.n	80009de <main+0x2e>
		Error_Handler();
 80009da:	f000 fc7d 	bl	80012d8 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009de:	f000 ff01 	bl	80017e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e2:	f000 f9a7 	bl	8000d34 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
	HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80009e6:	4b86      	ldr	r3, [pc, #536]	; (8000c00 <main+0x250>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009ec:	4a84      	ldr	r2, [pc, #528]	; (8000c00 <main+0x250>)
 80009ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009f6:	4b82      	ldr	r3, [pc, #520]	; (8000c00 <main+0x250>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f003 fc5b 	bl	80042c0 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f003 fc71 	bl	80042f4 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000a12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a16:	637b      	str	r3, [r7, #52]	; 0x34
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a18:	bf00      	nop
 8000a1a:	4b79      	ldr	r3, [pc, #484]	; (8000c00 <main+0x250>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d104      	bne.n	8000a30 <main+0x80>
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	1e5a      	subs	r2, r3, #1
 8000a2a:	637a      	str	r2, [r7, #52]	; 0x34
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	dcf4      	bgt.n	8000a1a <main+0x6a>
	if ( timeout < 0 ) {
 8000a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	da01      	bge.n	8000a3a <main+0x8a>
	Error_Handler();
 8000a36:	f000 fc4f 	bl	80012d8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3a:	f000 fbd9 	bl	80011f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a3e:	f000 fb8b 	bl	8001158 <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000a42:	f000 fa6b 	bl	8000f1c <MX_FDCAN1_Init>
  MX_ADC1_Init();
 8000a46:	f000 f9ef 	bl	8000e28 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000a4a:	f000 fb0f 	bl	800106c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	uint16_t raw;
	double voltage, input;
	int counter = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a52:	2100      	movs	r1, #0
 8000a54:	486b      	ldr	r0, [pc, #428]	; (8000c04 <main+0x254>)
 8000a56:	f006 feb9 	bl	80077cc <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	setPoint = 0;
 8000a5a:	4b6b      	ldr	r3, [pc, #428]	; (8000c08 <main+0x258>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
	int timestamp = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	623b      	str	r3, [r7, #32]
	PID_Initialize();
 8000a64:	f7ff feac 	bl	80007c0 <PID_Initialize>
	while(1) {
		HAL_ADC_Start(&hadc1);
 8000a68:	4868      	ldr	r0, [pc, #416]	; (8000c0c <main+0x25c>)
 8000a6a:	f001 fb01 	bl	8002070 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000a6e:	f04f 31ff 	mov.w	r1, #4294967295
 8000a72:	4866      	ldr	r0, [pc, #408]	; (8000c0c <main+0x25c>)
 8000a74:	f001 fbc6 	bl	8002204 <HAL_ADC_PollForConversion>
		raw = HAL_ADC_GetValue(&hadc1);
 8000a78:	4864      	ldr	r0, [pc, #400]	; (8000c0c <main+0x25c>)
 8000a7a:	f001 fcb7 	bl	80023ec <HAL_ADC_GetValue>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	837b      	strh	r3, [r7, #26]

		voltage = 3.3 * raw / 65535;
 8000a82:	8b7b      	ldrh	r3, [r7, #26]
 8000a84:	ee07 3a90 	vmov	s15, r3
 8000a88:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000a8c:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8000be0 <main+0x230>
 8000a90:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000a94:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8000be8 <main+0x238>
 8000a98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000a9c:	ed87 7b04 	vstr	d7, [r7, #16]
		preassure = (voltage - 0.527)*35;
 8000aa0:	ed97 7b04 	vldr	d7, [r7, #16]
 8000aa4:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8000bf0 <main+0x240>
 8000aa8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8000aac:	ed9f 6b52 	vldr	d6, [pc, #328]	; 8000bf8 <main+0x248>
 8000ab0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ab4:	4b56      	ldr	r3, [pc, #344]	; (8000c10 <main+0x260>)
 8000ab6:	ed83 7b00 	vstr	d7, [r3]
		//Código que imprime IDs y mensajes que recibe del bus de CAN

	  	if(HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8000aba:	4b56      	ldr	r3, [pc, #344]	; (8000c14 <main+0x264>)
 8000abc:	4a56      	ldr	r2, [pc, #344]	; (8000c18 <main+0x268>)
 8000abe:	2140      	movs	r1, #64	; 0x40
 8000ac0:	4856      	ldr	r0, [pc, #344]	; (8000c1c <main+0x26c>)
 8000ac2:	f002 fe47 	bl	8003754 <HAL_FDCAN_GetRxMessage>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d129      	bne.n	8000b20 <main+0x170>
	  		HAL_Delay(10);
 8000acc:	200a      	movs	r0, #10
 8000ace:	f000 ff1b 	bl	8001908 <HAL_Delay>
		  	printf("\r\nCAN ID: %lX Data: ", RxHeader.Identifier);
 8000ad2:	4b51      	ldr	r3, [pc, #324]	; (8000c18 <main+0x268>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4851      	ldr	r0, [pc, #324]	; (8000c20 <main+0x270>)
 8000ada:	f009 fbdb 	bl	800a294 <iprintf>
		  	for(int i = 0; i < RxHeader.DataLength>>16; i++){
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61fb      	str	r3, [r7, #28]
 8000ae2:	e00a      	b.n	8000afa <main+0x14a>
				printf("%X ", RxData[i]);
 8000ae4:	4a4b      	ldr	r2, [pc, #300]	; (8000c14 <main+0x264>)
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	4413      	add	r3, r2
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	484d      	ldr	r0, [pc, #308]	; (8000c24 <main+0x274>)
 8000af0:	f009 fbd0 	bl	800a294 <iprintf>
		  	for(int i = 0; i < RxHeader.DataLength>>16; i++){
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	3301      	adds	r3, #1
 8000af8:	61fb      	str	r3, [r7, #28]
 8000afa:	4b47      	ldr	r3, [pc, #284]	; (8000c18 <main+0x268>)
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	0c1a      	lsrs	r2, r3, #16
 8000b00:	69fb      	ldr	r3, [r7, #28]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	d8ee      	bhi.n	8000ae4 <main+0x134>
		  	}
			setPoint = RxData[0] + 1;
 8000b06:	4b43      	ldr	r3, [pc, #268]	; (8000c14 <main+0x264>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	4a3e      	ldr	r2, [pc, #248]	; (8000c08 <main+0x258>)
 8000b0e:	6013      	str	r3, [r2, #0]
			counter = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	627b      	str	r3, [r7, #36]	; 0x24
			printf("\r\nSetpoint: %d\r\n", setPoint);
 8000b14:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <main+0x258>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4843      	ldr	r0, [pc, #268]	; (8000c28 <main+0x278>)
 8000b1c:	f009 fbba 	bl	800a294 <iprintf>
	  	}

		if(preassure < setPoint){
 8000b20:	4b39      	ldr	r3, [pc, #228]	; (8000c08 <main+0x258>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	ee07 3a90 	vmov	s15, r3
 8000b28:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b2c:	4b38      	ldr	r3, [pc, #224]	; (8000c10 <main+0x260>)
 8000b2e:	ed93 7b00 	vldr	d7, [r3]
 8000b32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b3a:	dd1e      	ble.n	8000b7a <main+0x1ca>
			HAL_GPIO_WritePin(RL1_GPIO_Port, RL1_Pin, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b42:	483a      	ldr	r0, [pc, #232]	; (8000c2c <main+0x27c>)
 8000b44:	f003 fba2 	bl	800428c <HAL_GPIO_WritePin>
			input = PID_Discrete(preassure);
 8000b48:	4b31      	ldr	r3, [pc, #196]	; (8000c10 <main+0x260>)
 8000b4a:	ed93 7b00 	vldr	d7, [r3]
 8000b4e:	eeb0 0b47 	vmov.f64	d0, d7
 8000b52:	f7ff fe95 	bl	8000880 <PID_Discrete>
 8000b56:	ed87 0b0a 	vstr	d0, [r7, #40]	; 0x28
			int set = (65535 * input);
 8000b5a:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8000b5e:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000be8 <main+0x238>
 8000b62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b66:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000b6a:	ee17 3a90 	vmov	r3, s15
 8000b6e:	60fb      	str	r3, [r7, #12]
			TIM2->CCR1 = set;
 8000b70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	6353      	str	r3, [r2, #52]	; 0x34
 8000b78:	e013      	b.n	8000ba2 <main+0x1f2>
		}
		else if(preassure > setPoint && counter < 100){
 8000b7a:	4b23      	ldr	r3, [pc, #140]	; (8000c08 <main+0x258>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	ee07 3a90 	vmov	s15, r3
 8000b82:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000b86:	4b22      	ldr	r3, [pc, #136]	; (8000c10 <main+0x260>)
 8000b88:	ed93 7b00 	vldr	d7, [r3]
 8000b8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b94:	d505      	bpl.n	8000ba2 <main+0x1f2>
 8000b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b98:	2b63      	cmp	r3, #99	; 0x63
 8000b9a:	dc02      	bgt.n	8000ba2 <main+0x1f2>
			counter++;
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9e:	3301      	adds	r3, #1
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if(counter == 100){
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	2b64      	cmp	r3, #100	; 0x64
 8000ba6:	d103      	bne.n	8000bb0 <main+0x200>
			TIM2->CCR1 = 0;
 8000ba8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000bac:	2200      	movs	r2, #0
 8000bae:	635a      	str	r2, [r3, #52]	; 0x34
		}
		if(preassure > setPoint && counter == 100){
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <main+0x258>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	ee07 3a90 	vmov	s15, r3
 8000bb8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <main+0x260>)
 8000bbe:	ed93 7b00 	vldr	d7, [r3]
 8000bc2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8000bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bca:	d531      	bpl.n	8000c30 <main+0x280>
 8000bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bce:	2b64      	cmp	r3, #100	; 0x64
 8000bd0:	d12e      	bne.n	8000c30 <main+0x280>
			HAL_GPIO_WritePin(RL1_GPIO_Port, RL1_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bd8:	4814      	ldr	r0, [pc, #80]	; (8000c2c <main+0x27c>)
 8000bda:	f003 fb57 	bl	800428c <HAL_GPIO_WritePin>
 8000bde:	e02d      	b.n	8000c3c <main+0x28c>
 8000be0:	66666666 	.word	0x66666666
 8000be4:	400a6666 	.word	0x400a6666
 8000be8:	00000000 	.word	0x00000000
 8000bec:	40efffe0 	.word	0x40efffe0
 8000bf0:	1a9fbe77 	.word	0x1a9fbe77
 8000bf4:	3fe0dd2f 	.word	0x3fe0dd2f
 8000bf8:	00000000 	.word	0x00000000
 8000bfc:	40418000 	.word	0x40418000
 8000c00:	58024400 	.word	0x58024400
 8000c04:	24000308 	.word	0x24000308
 8000c08:	24000458 	.word	0x24000458
 8000c0c:	24000204 	.word	0x24000204
 8000c10:	24000460 	.word	0x24000460
 8000c14:	24000450 	.word	0x24000450
 8000c18:	24000428 	.word	0x24000428
 8000c1c:	24000268 	.word	0x24000268
 8000c20:	0800c320 	.word	0x0800c320
 8000c24:	0800c338 	.word	0x0800c338
 8000c28:	0800c33c 	.word	0x0800c33c
 8000c2c:	58020400 	.word	0x58020400
		}
		else{
			HAL_GPIO_WritePin(RL1_GPIO_Port, RL1_Pin, GPIO_PIN_SET);
 8000c30:	2201      	movs	r2, #1
 8000c32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c36:	4837      	ldr	r0, [pc, #220]	; (8000d14 <main+0x364>)
 8000c38:	f003 fb28 	bl	800428c <HAL_GPIO_WritePin>
		}
		if(timestamp % 10 == 0){
 8000c3c:	6a39      	ldr	r1, [r7, #32]
 8000c3e:	4b36      	ldr	r3, [pc, #216]	; (8000d18 <main+0x368>)
 8000c40:	fb83 2301 	smull	r2, r3, r3, r1
 8000c44:	109a      	asrs	r2, r3, #2
 8000c46:	17cb      	asrs	r3, r1, #31
 8000c48:	1ad2      	subs	r2, r2, r3
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	4413      	add	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	1aca      	subs	r2, r1, r3
 8000c54:	2a00      	cmp	r2, #0
 8000c56:	d156      	bne.n	8000d06 <main+0x356>
			if(preassure < 0)
 8000c58:	4b30      	ldr	r3, [pc, #192]	; (8000d1c <main+0x36c>)
 8000c5a:	ed93 7b00 	vldr	d7, [r3]
 8000c5e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000c62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c66:	d506      	bpl.n	8000c76 <main+0x2c6>
				preassure = 0;
 8000c68:	492c      	ldr	r1, [pc, #176]	; (8000d1c <main+0x36c>)
 8000c6a:	f04f 0200 	mov.w	r2, #0
 8000c6e:	f04f 0300 	mov.w	r3, #0
 8000c72:	e9c1 2300 	strd	r2, r3, [r1]
			TxData[0] = (int) (preassure*5);
 8000c76:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <main+0x36c>)
 8000c78:	ed93 7b00 	vldr	d7, [r3]
 8000c7c:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8000c80:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c84:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000c88:	edc7 7a01 	vstr	s15, [r7, #4]
 8000c8c:	793a      	ldrb	r2, [r7, #4]
 8000c8e:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <main+0x370>)
 8000c90:	701a      	strb	r2, [r3, #0]
			TxData[1] = (int) (preassure*5);
 8000c92:	4b22      	ldr	r3, [pc, #136]	; (8000d1c <main+0x36c>)
 8000c94:	ed93 7b00 	vldr	d7, [r3]
 8000c98:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8000c9c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ca0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ca4:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ca8:	793a      	ldrb	r2, [r7, #4]
 8000caa:	4b1d      	ldr	r3, [pc, #116]	; (8000d20 <main+0x370>)
 8000cac:	705a      	strb	r2, [r3, #1]
			TxData[2] = (int) (preassure*5);
 8000cae:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <main+0x36c>)
 8000cb0:	ed93 7b00 	vldr	d7, [r3]
 8000cb4:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8000cb8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cbc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cc0:	edc7 7a01 	vstr	s15, [r7, #4]
 8000cc4:	793a      	ldrb	r2, [r7, #4]
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <main+0x370>)
 8000cc8:	709a      	strb	r2, [r3, #2]
			TxData[3] = (int) (preassure*5);
 8000cca:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <main+0x36c>)
 8000ccc:	ed93 7b00 	vldr	d7, [r3]
 8000cd0:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 8000cd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cd8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000cdc:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ce0:	793a      	ldrb	r2, [r7, #4]
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <main+0x370>)
 8000ce4:	70da      	strb	r2, [r3, #3]
			HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <main+0x370>)
 8000ce8:	490e      	ldr	r1, [pc, #56]	; (8000d24 <main+0x374>)
 8000cea:	480f      	ldr	r0, [pc, #60]	; (8000d28 <main+0x378>)
 8000cec:	f002 fcd7 	bl	800369e <HAL_FDCAN_AddMessageToTxFifoQ>
			printf("PWM Duty Cycle: %f - ",input);
 8000cf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <main+0x37c>)
 8000cf6:	f009 facd 	bl	800a294 <iprintf>
			printf("Preassure: %.5f\r\n",preassure);
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <main+0x36c>)
 8000cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d00:	480b      	ldr	r0, [pc, #44]	; (8000d30 <main+0x380>)
 8000d02:	f009 fac7 	bl	800a294 <iprintf>
		}
		timestamp++;
 8000d06:	6a3b      	ldr	r3, [r7, #32]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	623b      	str	r3, [r7, #32]
		HAL_Delay(10);
 8000d0c:	200a      	movs	r0, #10
 8000d0e:	f000 fdfb 	bl	8001908 <HAL_Delay>
		HAL_ADC_Start(&hadc1);
 8000d12:	e6a9      	b.n	8000a68 <main+0xb8>
 8000d14:	58020400 	.word	0x58020400
 8000d18:	66666667 	.word	0x66666667
 8000d1c:	24000460 	.word	0x24000460
 8000d20:	24000008 	.word	0x24000008
 8000d24:	24000404 	.word	0x24000404
 8000d28:	24000268 	.word	0x24000268
 8000d2c:	0800c350 	.word	0x0800c350
 8000d30:	0800c368 	.word	0x0800c368

08000d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b09c      	sub	sp, #112	; 0x70
 8000d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d3e:	224c      	movs	r2, #76	; 0x4c
 8000d40:	2100      	movs	r1, #0
 8000d42:	4618      	mov	r0, r3
 8000d44:	f008 fe5c 	bl	8009a00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2220      	movs	r2, #32
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f008 fe56 	bl	8009a00 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d54:	2004      	movs	r0, #4
 8000d56:	f003 fae1 	bl	800431c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b30      	ldr	r3, [pc, #192]	; (8000e20 <SystemClock_Config+0xec>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	4a2f      	ldr	r2, [pc, #188]	; (8000e20 <SystemClock_Config+0xec>)
 8000d64:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d68:	6193      	str	r3, [r2, #24]
 8000d6a:	4b2d      	ldr	r3, [pc, #180]	; (8000e20 <SystemClock_Config+0xec>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	4b2b      	ldr	r3, [pc, #172]	; (8000e24 <SystemClock_Config+0xf0>)
 8000d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d78:	4a2a      	ldr	r2, [pc, #168]	; (8000e24 <SystemClock_Config+0xf0>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000d80:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <SystemClock_Config+0xf0>)
 8000d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	603b      	str	r3, [r7, #0]
 8000d8a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d8c:	bf00      	nop
 8000d8e:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <SystemClock_Config+0xec>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d9a:	d1f8      	bne.n	8000d8e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000da0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da6:	2302      	movs	r3, #2
 8000da8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000daa:	2302      	movs	r3, #2
 8000dac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000dae:	2302      	movs	r3, #2
 8000db0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000db2:	23f0      	movs	r3, #240	; 0xf0
 8000db4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000db6:	2302      	movs	r3, #2
 8000db8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 24;
 8000dba:	2318      	movs	r3, #24
 8000dbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000dbe:	2302      	movs	r3, #2
 8000dc0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 fafc 	bl	80043d0 <HAL_RCC_OscConfig>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000dde:	f000 fa7b 	bl	80012d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de2:	233f      	movs	r3, #63	; 0x3f
 8000de4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de6:	2303      	movs	r3, #3
 8000de8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000dee:	2308      	movs	r3, #8
 8000df0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000df2:	2340      	movs	r3, #64	; 0x40
 8000df4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000df6:	2340      	movs	r3, #64	; 0x40
 8000df8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000dfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dfe:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e00:	2340      	movs	r3, #64	; 0x40
 8000e02:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2104      	movs	r1, #4
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f003 ff0f 	bl	8004c2c <HAL_RCC_ClockConfig>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000e14:	f000 fa60 	bl	80012d8 <Error_Handler>
  }
}
 8000e18:	bf00      	nop
 8000e1a:	3770      	adds	r7, #112	; 0x70
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	58024800 	.word	0x58024800
 8000e24:	58000400 	.word	0x58000400

08000e28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e2e:	f107 031c 	add.w	r3, r7, #28
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
 8000e48:	615a      	str	r2, [r3, #20]
 8000e4a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e4c:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000e4e:	4a31      	ldr	r2, [pc, #196]	; (8000f14 <MX_ADC1_Init+0xec>)
 8000e50:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e52:	4b2f      	ldr	r3, [pc, #188]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000e54:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000e5a:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e60:	4b2b      	ldr	r3, [pc, #172]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e66:	4b2a      	ldr	r3, [pc, #168]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000e68:	2204      	movs	r2, #4
 8000e6a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e6c:	4b28      	ldr	r3, [pc, #160]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e72:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000e78:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e7e:	4b24      	ldr	r3, [pc, #144]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e84:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e8a:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e96:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000e9c:	4b1c      	ldr	r3, [pc, #112]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000ea2:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eaa:	4819      	ldr	r0, [pc, #100]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000eac:	f000 ff3e 	bl	8001d2c <HAL_ADC_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000eb6:	f000 fa0f 	bl	80012d8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ebe:	f107 031c 	add.w	r3, r7, #28
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4812      	ldr	r0, [pc, #72]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000ec6:	f001 ffa9 	bl	8002e1c <HAL_ADCEx_MultiModeConfigChannel>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ed0:	f000 fa02 	bl	80012d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <MX_ADC1_Init+0xf0>)
 8000ed6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed8:	2306      	movs	r3, #6
 8000eda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000edc:	2300      	movs	r3, #0
 8000ede:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ee0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ee4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <MX_ADC1_Init+0xe8>)
 8000ef8:	f001 fa86 	bl	8002408 <HAL_ADC_ConfigChannel>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000f02:	f000 f9e9 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	; 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	24000204 	.word	0x24000204
 8000f14:	40022000 	.word	0x40022000
 8000f18:	14f00020 	.word	0x14f00020

08000f1c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f20:	4b4d      	ldr	r3, [pc, #308]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f22:	4a4e      	ldr	r2, [pc, #312]	; (800105c <MX_FDCAN1_Init+0x140>)
 8000f24:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f26:	4b4c      	ldr	r3, [pc, #304]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f2c:	4b4a      	ldr	r3, [pc, #296]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f32:	4b49      	ldr	r3, [pc, #292]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f38:	4b47      	ldr	r3, [pc, #284]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000f3e:	4b46      	ldr	r3, [pc, #280]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000f44:	4b44      	ldr	r3, [pc, #272]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f46:	2202      	movs	r2, #2
 8000f48:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000f4a:	4b43      	ldr	r3, [pc, #268]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f4c:	2208      	movs	r2, #8
 8000f4e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 0x3F;
 8000f50:	4b41      	ldr	r3, [pc, #260]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f52:	223f      	movs	r2, #63	; 0x3f
 8000f54:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8000f56:	4b40      	ldr	r3, [pc, #256]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f58:	2210      	movs	r2, #16
 8000f5a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f5c:	4b3e      	ldr	r3, [pc, #248]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f5e:	2201      	movs	r2, #1
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f62:	4b3d      	ldr	r3, [pc, #244]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f68:	4b3b      	ldr	r3, [pc, #236]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f6e:	4b3a      	ldr	r3, [pc, #232]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000f74:	4b38      	ldr	r3, [pc, #224]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000f7a:	4b37      	ldr	r3, [pc, #220]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f80:	4b35      	ldr	r3, [pc, #212]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000f86:	4b34      	ldr	r3, [pc, #208]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000f8c:	4b32      	ldr	r3, [pc, #200]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f8e:	2204      	movs	r2, #4
 8000f90:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000f92:	4b31      	ldr	r3, [pc, #196]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000f98:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000f9e:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000fa4:	4b2c      	ldr	r3, [pc, #176]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000fb0:	4b29      	ldr	r3, [pc, #164]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000fb6:	4b28      	ldr	r3, [pc, #160]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fbc:	4b26      	ldr	r3, [pc, #152]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000fc2:	4b25      	ldr	r3, [pc, #148]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000fc8:	4823      	ldr	r0, [pc, #140]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000fca:	f002 f8e9 	bl	80031a0 <HAL_FDCAN_Init>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000fd4:	f000 f980 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
/* Configure Rx filter */
sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 8000fd8:	4b21      	ldr	r3, [pc, #132]	; (8001060 <MX_FDCAN1_Init+0x144>)
 8000fda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fde:	601a      	str	r2, [r3, #0]
sFilterConfig.FilterIndex = 0;
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <MX_FDCAN1_Init+0x144>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	605a      	str	r2, [r3, #4]
sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000fe6:	4b1e      	ldr	r3, [pc, #120]	; (8001060 <MX_FDCAN1_Init+0x144>)
 8000fe8:	2202      	movs	r2, #2
 8000fea:	609a      	str	r2, [r3, #8]
sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000fec:	4b1c      	ldr	r3, [pc, #112]	; (8001060 <MX_FDCAN1_Init+0x144>)
 8000fee:	2201      	movs	r2, #1
 8000ff0:	60da      	str	r2, [r3, #12]


/* Configure global filter to reject all non-matching frames */
//HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);

if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8000ff2:	491b      	ldr	r1, [pc, #108]	; (8001060 <MX_FDCAN1_Init+0x144>)
 8000ff4:	4818      	ldr	r0, [pc, #96]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8000ff6:	f002 fab1 	bl	800355c <HAL_FDCAN_ConfigFilter>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_FDCAN1_Init+0xe8>
  /* Filter configuration Error */
	Error_Handler();
 8001000:	f000 f96a 	bl	80012d8 <Error_Handler>
}
/* Start the FDCAN module */
if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001004:	4814      	ldr	r0, [pc, #80]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8001006:	f002 fb1f 	bl	8003648 <HAL_FDCAN_Start>
  /* Start Error */
}


if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800100a:	2200      	movs	r2, #0
 800100c:	2101      	movs	r1, #1
 800100e:	4812      	ldr	r0, [pc, #72]	; (8001058 <MX_FDCAN1_Init+0x13c>)
 8001010:	f002 fd0e 	bl	8003a30 <HAL_FDCAN_ActivateNotification>
  /* Notification Error */
}

/* Configure Tx buffer message */
TxHeader.Identifier = 0x18FEEEA3;
 8001014:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_FDCAN1_Init+0x148>)
 8001016:	4a14      	ldr	r2, [pc, #80]	; (8001068 <MX_FDCAN1_Init+0x14c>)
 8001018:	601a      	str	r2, [r3, #0]
TxHeader.IdType = FDCAN_EXTENDED_ID;
 800101a:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_FDCAN1_Init+0x148>)
 800101c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001020:	605a      	str	r2, [r3, #4]
TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001022:	4b10      	ldr	r3, [pc, #64]	; (8001064 <MX_FDCAN1_Init+0x148>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_FDCAN1_Init+0x148>)
 800102a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800102e:	60da      	str	r2, [r3, #12]
TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_FDCAN1_Init+0x148>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <MX_FDCAN1_Init+0x148>)
 8001038:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800103c:	615a      	str	r2, [r3, #20]
TxHeader.FDFormat = FDCAN_FD_CAN;
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_FDCAN1_Init+0x148>)
 8001040:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001044:	619a      	str	r2, [r3, #24]
TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <MX_FDCAN1_Init+0x148>)
 8001048:	2200      	movs	r2, #0
 800104a:	61da      	str	r2, [r3, #28]
TxHeader.MessageMarker = 0x00;
 800104c:	4b05      	ldr	r3, [pc, #20]	; (8001064 <MX_FDCAN1_Init+0x148>)
 800104e:	2200      	movs	r2, #0
 8001050:	621a      	str	r2, [r3, #32]

  /* USER CODE END FDCAN1_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	24000268 	.word	0x24000268
 800105c:	4000a000 	.word	0x4000a000
 8001060:	240003e4 	.word	0x240003e4
 8001064:	24000404 	.word	0x24000404
 8001068:	18feeea3 	.word	0x18feeea3

0800106c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	; 0x38
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001072:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800108c:	463b      	mov	r3, r7
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	611a      	str	r2, [r3, #16]
 800109a:	615a      	str	r2, [r3, #20]
 800109c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800109e:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <MX_TIM2_Init+0xe8>)
 80010a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010a6:	4b2b      	ldr	r3, [pc, #172]	; (8001154 <MX_TIM2_Init+0xe8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ac:	4b29      	ldr	r3, [pc, #164]	; (8001154 <MX_TIM2_Init+0xe8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80010b2:	4b28      	ldr	r3, [pc, #160]	; (8001154 <MX_TIM2_Init+0xe8>)
 80010b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ba:	4b26      	ldr	r3, [pc, #152]	; (8001154 <MX_TIM2_Init+0xe8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c0:	4b24      	ldr	r3, [pc, #144]	; (8001154 <MX_TIM2_Init+0xe8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010c6:	4823      	ldr	r0, [pc, #140]	; (8001154 <MX_TIM2_Init+0xe8>)
 80010c8:	f006 fac8 	bl	800765c <HAL_TIM_Base_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80010d2:	f000 f901 	bl	80012d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010e0:	4619      	mov	r1, r3
 80010e2:	481c      	ldr	r0, [pc, #112]	; (8001154 <MX_TIM2_Init+0xe8>)
 80010e4:	f006 fd94 	bl	8007c10 <HAL_TIM_ConfigClockSource>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80010ee:	f000 f8f3 	bl	80012d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010f2:	4818      	ldr	r0, [pc, #96]	; (8001154 <MX_TIM2_Init+0xe8>)
 80010f4:	f006 fb09 	bl	800770a <HAL_TIM_PWM_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80010fe:	f000 f8eb 	bl	80012d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001102:	2300      	movs	r3, #0
 8001104:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800110a:	f107 031c 	add.w	r3, r7, #28
 800110e:	4619      	mov	r1, r3
 8001110:	4810      	ldr	r0, [pc, #64]	; (8001154 <MX_TIM2_Init+0xe8>)
 8001112:	f007 faa9 	bl	8008668 <HAL_TIMEx_MasterConfigSynchronization>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800111c:	f000 f8dc 	bl	80012d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001120:	2360      	movs	r3, #96	; 0x60
 8001122:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001124:	2300      	movs	r3, #0
 8001126:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001128:	2300      	movs	r3, #0
 800112a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800112c:	2300      	movs	r3, #0
 800112e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001130:	463b      	mov	r3, r7
 8001132:	2200      	movs	r2, #0
 8001134:	4619      	mov	r1, r3
 8001136:	4807      	ldr	r0, [pc, #28]	; (8001154 <MX_TIM2_Init+0xe8>)
 8001138:	f006 fc56 	bl	80079e8 <HAL_TIM_PWM_ConfigChannel>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001142:	f000 f8c9 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001146:	4803      	ldr	r0, [pc, #12]	; (8001154 <MX_TIM2_Init+0xe8>)
 8001148:	f000 f9b2 	bl	80014b0 <HAL_TIM_MspPostInit>

}
 800114c:	bf00      	nop
 800114e:	3738      	adds	r7, #56	; 0x38
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	24000308 	.word	0x24000308

08001158 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800115c:	4b22      	ldr	r3, [pc, #136]	; (80011e8 <MX_USART2_UART_Init+0x90>)
 800115e:	4a23      	ldr	r2, [pc, #140]	; (80011ec <MX_USART2_UART_Init+0x94>)
 8001160:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001162:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <MX_USART2_UART_Init+0x90>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b1f      	ldr	r3, [pc, #124]	; (80011e8 <MX_USART2_UART_Init+0x90>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b1d      	ldr	r3, [pc, #116]	; (80011e8 <MX_USART2_UART_Init+0x90>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MX_USART2_UART_Init+0x90>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b1a      	ldr	r3, [pc, #104]	; (80011e8 <MX_USART2_UART_Init+0x90>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b19      	ldr	r3, [pc, #100]	; (80011e8 <MX_USART2_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b17      	ldr	r3, [pc, #92]	; (80011e8 <MX_USART2_UART_Init+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118e:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <MX_USART2_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_USART2_UART_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800119a:	4b13      	ldr	r3, [pc, #76]	; (80011e8 <MX_USART2_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011a0:	4811      	ldr	r0, [pc, #68]	; (80011e8 <MX_USART2_UART_Init+0x90>)
 80011a2:	f007 faef 	bl	8008784 <HAL_UART_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80011ac:	f000 f894 	bl	80012d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011b0:	2100      	movs	r1, #0
 80011b2:	480d      	ldr	r0, [pc, #52]	; (80011e8 <MX_USART2_UART_Init+0x90>)
 80011b4:	f008 fb22 	bl	80097fc <HAL_UARTEx_SetTxFifoThreshold>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80011be:	f000 f88b 	bl	80012d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c2:	2100      	movs	r1, #0
 80011c4:	4808      	ldr	r0, [pc, #32]	; (80011e8 <MX_USART2_UART_Init+0x90>)
 80011c6:	f008 fb57 	bl	8009878 <HAL_UARTEx_SetRxFifoThreshold>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80011d0:	f000 f882 	bl	80012d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <MX_USART2_UART_Init+0x90>)
 80011d6:	f008 fad8 	bl	800978a <HAL_UARTEx_DisableFifoMode>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80011e0:	f000 f87a 	bl	80012d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	24000354 	.word	0x24000354
 80011ec:	40004400 	.word	0x40004400

080011f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
 8001204:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001206:	4b32      	ldr	r3, [pc, #200]	; (80012d0 <MX_GPIO_Init+0xe0>)
 8001208:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120c:	4a30      	ldr	r2, [pc, #192]	; (80012d0 <MX_GPIO_Init+0xe0>)
 800120e:	f043 0304 	orr.w	r3, r3, #4
 8001212:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001216:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <MX_GPIO_Init+0xe0>)
 8001218:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	613b      	str	r3, [r7, #16]
 8001222:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001224:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <MX_GPIO_Init+0xe0>)
 8001226:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122a:	4a29      	ldr	r2, [pc, #164]	; (80012d0 <MX_GPIO_Init+0xe0>)
 800122c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001230:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <MX_GPIO_Init+0xe0>)
 8001236:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	4b23      	ldr	r3, [pc, #140]	; (80012d0 <MX_GPIO_Init+0xe0>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001248:	4a21      	ldr	r2, [pc, #132]	; (80012d0 <MX_GPIO_Init+0xe0>)
 800124a:	f043 0301 	orr.w	r3, r3, #1
 800124e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <MX_GPIO_Init+0xe0>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001258:	f003 0301 	and.w	r3, r3, #1
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <MX_GPIO_Init+0xe0>)
 8001262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001266:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <MX_GPIO_Init+0xe0>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001270:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <MX_GPIO_Init+0xe0>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <MX_GPIO_Init+0xe0>)
 8001280:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001284:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <MX_GPIO_Init+0xe0>)
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800128e:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <MX_GPIO_Init+0xe0>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	f003 0308 	and.w	r3, r3, #8
 8001298:	603b      	str	r3, [r7, #0]
 800129a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RL1_GPIO_Port, RL1_Pin, GPIO_PIN_SET);
 800129c:	2201      	movs	r2, #1
 800129e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012a2:	480c      	ldr	r0, [pc, #48]	; (80012d4 <MX_GPIO_Init+0xe4>)
 80012a4:	f002 fff2 	bl	800428c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RL1_Pin */
  GPIO_InitStruct.Pin = RL1_Pin;
 80012a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ae:	2301      	movs	r3, #1
 80012b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RL1_GPIO_Port, &GPIO_InitStruct);
 80012ba:	f107 0314 	add.w	r3, r7, #20
 80012be:	4619      	mov	r1, r3
 80012c0:	4804      	ldr	r0, [pc, #16]	; (80012d4 <MX_GPIO_Init+0xe4>)
 80012c2:	f002 fe33 	bl	8003f2c <HAL_GPIO_Init>

}
 80012c6:	bf00      	nop
 80012c8:	3728      	adds	r7, #40	; 0x28
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	58024400 	.word	0x58024400
 80012d4:	58020400 	.word	0x58020400

080012d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012dc:	b672      	cpsid	i
}
 80012de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e0:	e7fe      	b.n	80012e0 <Error_Handler+0x8>
	...

080012e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ea:	4b0a      	ldr	r3, [pc, #40]	; (8001314 <HAL_MspInit+0x30>)
 80012ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012f0:	4a08      	ldr	r2, [pc, #32]	; (8001314 <HAL_MspInit+0x30>)
 80012f2:	f043 0302 	orr.w	r3, r3, #2
 80012f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012fa:	4b06      	ldr	r3, [pc, #24]	; (8001314 <HAL_MspInit+0x30>)
 80012fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	607b      	str	r3, [r7, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	58024400 	.word	0x58024400

08001318 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a18      	ldr	r2, [pc, #96]	; (8001398 <HAL_ADC_MspInit+0x80>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d129      	bne.n	800138e <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <HAL_ADC_MspInit+0x84>)
 800133c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001340:	4a16      	ldr	r2, [pc, #88]	; (800139c <HAL_ADC_MspInit+0x84>)
 8001342:	f043 0320 	orr.w	r3, r3, #32
 8001346:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800134a:	4b14      	ldr	r3, [pc, #80]	; (800139c <HAL_ADC_MspInit+0x84>)
 800134c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001350:	f003 0320 	and.w	r3, r3, #32
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001358:	4b10      	ldr	r3, [pc, #64]	; (800139c <HAL_ADC_MspInit+0x84>)
 800135a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800135e:	4a0f      	ldr	r2, [pc, #60]	; (800139c <HAL_ADC_MspInit+0x84>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <HAL_ADC_MspInit+0x84>)
 800136a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001376:	2302      	movs	r3, #2
 8001378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800137a:	2303      	movs	r3, #3
 800137c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	4805      	ldr	r0, [pc, #20]	; (80013a0 <HAL_ADC_MspInit+0x88>)
 800138a:	f002 fdcf 	bl	8003f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	; 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40022000 	.word	0x40022000
 800139c:	58024400 	.word	0x58024400
 80013a0:	58020400 	.word	0x58020400

080013a4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b0b8      	sub	sp, #224	; 0xe0
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	22bc      	movs	r2, #188	; 0xbc
 80013c2:	2100      	movs	r1, #0
 80013c4:	4618      	mov	r0, r3
 80013c6:	f008 fb1b 	bl	8009a00 <memset>
  if(hfdcan->Instance==FDCAN1)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a25      	ldr	r2, [pc, #148]	; (8001464 <HAL_FDCAN_MspInit+0xc0>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d142      	bne.n	800145a <HAL_FDCAN_MspInit+0xb6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80013d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80013da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80013de:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e0:	f107 0310 	add.w	r3, r7, #16
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 ffad 	bl	8005344 <HAL_RCCEx_PeriphCLKConfig>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80013f0:	f7ff ff72 	bl	80012d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <HAL_FDCAN_MspInit+0xc4>)
 80013f6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80013fa:	4a1b      	ldr	r2, [pc, #108]	; (8001468 <HAL_FDCAN_MspInit+0xc4>)
 80013fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001400:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <HAL_FDCAN_MspInit+0xc4>)
 8001406:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800140a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <HAL_FDCAN_MspInit+0xc4>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	4a13      	ldr	r2, [pc, #76]	; (8001468 <HAL_FDCAN_MspInit+0xc4>)
 800141a:	f043 0308 	orr.w	r3, r3, #8
 800141e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <HAL_FDCAN_MspInit+0xc4>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001430:	2303      	movs	r3, #3
 8001432:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143c:	2300      	movs	r3, #0
 800143e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001448:	2309      	movs	r3, #9
 800144a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800144e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <HAL_FDCAN_MspInit+0xc8>)
 8001456:	f002 fd69 	bl	8003f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800145a:	bf00      	nop
 800145c:	37e0      	adds	r7, #224	; 0xe0
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	4000a000 	.word	0x4000a000
 8001468:	58024400 	.word	0x58024400
 800146c:	58020c00 	.word	0x58020c00

08001470 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001480:	d10e      	bne.n	80014a0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_TIM_Base_MspInit+0x3c>)
 8001484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001488:	4a08      	ldr	r2, [pc, #32]	; (80014ac <HAL_TIM_Base_MspInit+0x3c>)
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001492:	4b06      	ldr	r3, [pc, #24]	; (80014ac <HAL_TIM_Base_MspInit+0x3c>)
 8001494:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001498:	f003 0301 	and.w	r3, r3, #1
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	58024400 	.word	0x58024400

080014b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b088      	sub	sp, #32
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 030c 	add.w	r3, r7, #12
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014d0:	d11e      	bne.n	8001510 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d2:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_TIM_MspPostInit+0x68>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	4a0f      	ldr	r2, [pc, #60]	; (8001518 <HAL_TIM_MspPostInit+0x68>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e2:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_TIM_MspPostInit+0x68>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014f0:	2301      	movs	r3, #1
 80014f2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f4:	2302      	movs	r3, #2
 80014f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001500:	2301      	movs	r3, #1
 8001502:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	4619      	mov	r1, r3
 800150a:	4804      	ldr	r0, [pc, #16]	; (800151c <HAL_TIM_MspPostInit+0x6c>)
 800150c:	f002 fd0e 	bl	8003f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001510:	bf00      	nop
 8001512:	3720      	adds	r7, #32
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	58024400 	.word	0x58024400
 800151c:	58020000 	.word	0x58020000

08001520 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0b8      	sub	sp, #224	; 0xe0
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001528:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	605a      	str	r2, [r3, #4]
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	60da      	str	r2, [r3, #12]
 8001536:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001538:	f107 0310 	add.w	r3, r7, #16
 800153c:	22bc      	movs	r2, #188	; 0xbc
 800153e:	2100      	movs	r1, #0
 8001540:	4618      	mov	r0, r3
 8001542:	f008 fa5d 	bl	8009a00 <memset>
  if(huart->Instance==USART2)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a24      	ldr	r2, [pc, #144]	; (80015dc <HAL_UART_MspInit+0xbc>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d141      	bne.n	80015d4 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001550:	2302      	movs	r3, #2
 8001552:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800155a:	f107 0310 	add.w	r3, r7, #16
 800155e:	4618      	mov	r0, r3
 8001560:	f003 fef0 	bl	8005344 <HAL_RCCEx_PeriphCLKConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800156a:	f7ff feb5 	bl	80012d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800156e:	4b1c      	ldr	r3, [pc, #112]	; (80015e0 <HAL_UART_MspInit+0xc0>)
 8001570:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001574:	4a1a      	ldr	r2, [pc, #104]	; (80015e0 <HAL_UART_MspInit+0xc0>)
 8001576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <HAL_UART_MspInit+0xc0>)
 8001580:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <HAL_UART_MspInit+0xc0>)
 800158e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001592:	4a13      	ldr	r2, [pc, #76]	; (80015e0 <HAL_UART_MspInit+0xc0>)
 8001594:	f043 0308 	orr.w	r3, r3, #8
 8001598:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800159c:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <HAL_UART_MspInit+0xc0>)
 800159e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a2:	f003 0308 	and.w	r3, r3, #8
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80015aa:	2360      	movs	r3, #96	; 0x60
 80015ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015bc:	2300      	movs	r3, #0
 80015be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c2:	2307      	movs	r3, #7
 80015c4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80015cc:	4619      	mov	r1, r3
 80015ce:	4805      	ldr	r0, [pc, #20]	; (80015e4 <HAL_UART_MspInit+0xc4>)
 80015d0:	f002 fcac 	bl	8003f2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015d4:	bf00      	nop
 80015d6:	37e0      	adds	r7, #224	; 0xe0
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40004400 	.word	0x40004400
 80015e0:	58024400 	.word	0x58024400
 80015e4:	58020c00 	.word	0x58020c00

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <NMI_Handler+0x4>

080015ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <MemManage_Handler+0x4>

080015fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <UsageFault_Handler+0x4>

08001606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001634:	f000 f948 	bl	80018c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
	return 1;
 8001640:	2301      	movs	r3, #1
}
 8001642:	4618      	mov	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_kill>:

int _kill(int pid, int sig)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001656:	f008 f99b 	bl	8009990 <__errno>
 800165a:	4603      	mov	r3, r0
 800165c:	2216      	movs	r2, #22
 800165e:	601a      	str	r2, [r3, #0]
	return -1;
 8001660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <_exit>:

void _exit (int status)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ffe7 	bl	800164c <_kill>
	while (1) {}		/* Make sure we hang here */
 800167e:	e7fe      	b.n	800167e <_exit+0x12>

08001680 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	e00a      	b.n	80016a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001692:	f3af 8000 	nop.w
 8001696:	4601      	mov	r1, r0
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	60ba      	str	r2, [r7, #8]
 800169e:	b2ca      	uxtb	r2, r1
 80016a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	dbf0      	blt.n	8001692 <_read+0x12>
	}

return len;
 80016b0:	687b      	ldr	r3, [r7, #4]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80016ba:	b480      	push	{r7}
 80016bc:	b083      	sub	sp, #12
 80016be:	af00      	add	r7, sp, #0
 80016c0:	6078      	str	r0, [r7, #4]
	return -1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016e2:	605a      	str	r2, [r3, #4]
	return 0;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <_isatty>:

int _isatty(int file)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
	return 1;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	return 0;
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	3714      	adds	r7, #20
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800172c:	4a14      	ldr	r2, [pc, #80]	; (8001780 <_sbrk+0x5c>)
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <_sbrk+0x60>)
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001738:	4b13      	ldr	r3, [pc, #76]	; (8001788 <_sbrk+0x64>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d102      	bne.n	8001746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001740:	4b11      	ldr	r3, [pc, #68]	; (8001788 <_sbrk+0x64>)
 8001742:	4a12      	ldr	r2, [pc, #72]	; (800178c <_sbrk+0x68>)
 8001744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001746:	4b10      	ldr	r3, [pc, #64]	; (8001788 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	429a      	cmp	r2, r3
 8001752:	d207      	bcs.n	8001764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001754:	f008 f91c 	bl	8009990 <__errno>
 8001758:	4603      	mov	r3, r0
 800175a:	220c      	movs	r2, #12
 800175c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295
 8001762:	e009      	b.n	8001778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001764:	4b08      	ldr	r3, [pc, #32]	; (8001788 <_sbrk+0x64>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <_sbrk+0x64>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <_sbrk+0x64>)
 8001774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001776:	68fb      	ldr	r3, [r7, #12]
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	24080000 	.word	0x24080000
 8001784:	00000400 	.word	0x00000400
 8001788:	240004a8 	.word	0x240004a8
 800178c:	240004c0 	.word	0x240004c0

08001790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001794:	f7fe ff7e 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001798:	480c      	ldr	r0, [pc, #48]	; (80017cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800179a:	490d      	ldr	r1, [pc, #52]	; (80017d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800179c:	4a0d      	ldr	r2, [pc, #52]	; (80017d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800179e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a0:	e002      	b.n	80017a8 <LoopCopyDataInit>

080017a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a6:	3304      	adds	r3, #4

080017a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ac:	d3f9      	bcc.n	80017a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b0:	4c0a      	ldr	r4, [pc, #40]	; (80017dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b4:	e001      	b.n	80017ba <LoopFillZerobss>

080017b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b8:	3204      	adds	r2, #4

080017ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017bc:	d3fb      	bcc.n	80017b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017be:	f008 f8ed 	bl	800999c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017c2:	f7ff f8f5 	bl	80009b0 <main>
  bx  lr
 80017c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80017cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80017d0:	240001e8 	.word	0x240001e8
  ldr r2, =_sidata
 80017d4:	0800c7fc 	.word	0x0800c7fc
  ldr r2, =_sbss
 80017d8:	240001e8 	.word	0x240001e8
  ldr r4, =_ebss
 80017dc:	240004c0 	.word	0x240004c0

080017e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC3_IRQHandler>
	...

080017e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ea:	2003      	movs	r0, #3
 80017ec:	f001 fca6 	bl	800313c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017f0:	f003 fbd2 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 80017f4:	4602      	mov	r2, r0
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <HAL_Init+0x68>)
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	0a1b      	lsrs	r3, r3, #8
 80017fc:	f003 030f 	and.w	r3, r3, #15
 8001800:	4913      	ldr	r1, [pc, #76]	; (8001850 <HAL_Init+0x6c>)
 8001802:	5ccb      	ldrb	r3, [r1, r3]
 8001804:	f003 031f 	and.w	r3, r3, #31
 8001808:	fa22 f303 	lsr.w	r3, r2, r3
 800180c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_Init+0x68>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	f003 030f 	and.w	r3, r3, #15
 8001816:	4a0e      	ldr	r2, [pc, #56]	; (8001850 <HAL_Init+0x6c>)
 8001818:	5cd3      	ldrb	r3, [r2, r3]
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	fa22 f303 	lsr.w	r3, r2, r3
 8001824:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <HAL_Init+0x70>)
 8001826:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001828:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <HAL_Init+0x74>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800182e:	200f      	movs	r0, #15
 8001830:	f000 f814 	bl	800185c <HAL_InitTick>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e002      	b.n	8001844 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800183e:	f7ff fd51 	bl	80012e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	58024400 	.word	0x58024400
 8001850:	0800c3c8 	.word	0x0800c3c8
 8001854:	24000004 	.word	0x24000004
 8001858:	24000000 	.word	0x24000000

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001864:	4b15      	ldr	r3, [pc, #84]	; (80018bc <HAL_InitTick+0x60>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e021      	b.n	80018b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <HAL_InitTick+0x64>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_InitTick+0x60>)
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	4619      	mov	r1, r3
 800187a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800187e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001882:	fbb2 f3f3 	udiv	r3, r2, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f001 fc7d 	bl	8003186 <HAL_SYSTICK_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e00e      	b.n	80018b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b0f      	cmp	r3, #15
 800189a:	d80a      	bhi.n	80018b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800189c:	2200      	movs	r2, #0
 800189e:	6879      	ldr	r1, [r7, #4]
 80018a0:	f04f 30ff 	mov.w	r0, #4294967295
 80018a4:	f001 fc55 	bl	8003152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018a8:	4a06      	ldr	r2, [pc, #24]	; (80018c4 <HAL_InitTick+0x68>)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	e000      	b.n	80018b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	24000014 	.word	0x24000014
 80018c0:	24000000 	.word	0x24000000
 80018c4:	24000010 	.word	0x24000010

080018c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <HAL_IncTick+0x20>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_IncTick+0x24>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <HAL_IncTick+0x24>)
 80018da:	6013      	str	r3, [r2, #0]
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	24000014 	.word	0x24000014
 80018ec:	240004ac 	.word	0x240004ac

080018f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  return uwTick;
 80018f4:	4b03      	ldr	r3, [pc, #12]	; (8001904 <HAL_GetTick+0x14>)
 80018f6:	681b      	ldr	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	240004ac 	.word	0x240004ac

08001908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001910:	f7ff ffee 	bl	80018f0 <HAL_GetTick>
 8001914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001920:	d005      	beq.n	800192e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_Delay+0x44>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	461a      	mov	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800192e:	bf00      	nop
 8001930:	f7ff ffde 	bl	80018f0 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	68fa      	ldr	r2, [r7, #12]
 800193c:	429a      	cmp	r2, r3
 800193e:	d8f7      	bhi.n	8001930 <HAL_Delay+0x28>
  {
  }
}
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	24000014 	.word	0x24000014

08001950 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_GetREVID+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	0c1b      	lsrs	r3, r3, #16
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	5c001000 	.word	0x5c001000

08001968 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	431a      	orrs	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	609a      	str	r2, [r3, #8]
}
 8001982:	bf00      	nop
 8001984:	370c      	adds	r7, #12
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800198e:	b480      	push	{r7}
 8001990:	b083      	sub	sp, #12
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
 8001996:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	431a      	orrs	r2, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	609a      	str	r2, [r3, #8]
}
 80019a8:	bf00      	nop
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b087      	sub	sp, #28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3360      	adds	r3, #96	; 0x60
 80019e2:	461a      	mov	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	430b      	orrs	r3, r1
 80019fe:	431a      	orrs	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001a04:	bf00      	nop
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f003 031f 	and.w	r3, r3, #31
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a30:	431a      	orrs	r2, r3
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	611a      	str	r2, [r3, #16]
}
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b087      	sub	sp, #28
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	60b9      	str	r1, [r7, #8]
 8001a4c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3360      	adds	r3, #96	; 0x60
 8001a52:	461a      	mov	r2, r3
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	601a      	str	r2, [r3, #0]
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	371c      	adds	r7, #28
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr

08001a9e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b087      	sub	sp, #28
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	3330      	adds	r3, #48	; 0x30
 8001aae:	461a      	mov	r2, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	0a1b      	lsrs	r3, r3, #8
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	4413      	add	r3, r2
 8001abc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	f003 031f 	and.w	r3, r3, #31
 8001ac8:	211f      	movs	r1, #31
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	401a      	ands	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	0e9b      	lsrs	r3, r3, #26
 8001ad6:	f003 011f 	and.w	r1, r3, #31
 8001ada:	68bb      	ldr	r3, [r7, #8]
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	431a      	orrs	r2, r3
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001aea:	bf00      	nop
 8001aec:	371c      	adds	r7, #28
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b087      	sub	sp, #28
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3314      	adds	r3, #20
 8001b06:	461a      	mov	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	0e5b      	lsrs	r3, r3, #25
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	f003 0304 	and.w	r3, r3, #4
 8001b12:	4413      	add	r3, r2
 8001b14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	0d1b      	lsrs	r3, r3, #20
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	2107      	movs	r1, #7
 8001b24:	fa01 f303 	lsl.w	r3, r1, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	401a      	ands	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	0d1b      	lsrs	r3, r3, #20
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b40:	bf00      	nop
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b64:	43db      	mvns	r3, r3
 8001b66:	401a      	ands	r2, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f003 0318 	and.w	r3, r3, #24
 8001b6e:	4908      	ldr	r1, [pc, #32]	; (8001b90 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b70:	40d9      	lsrs	r1, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	400b      	ands	r3, r1
 8001b76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 8001b82:	bf00      	nop
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	000fffff 	.word	0x000fffff

08001b94 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 031f 	and.w	r3, r3, #31
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr

08001bb0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	4b04      	ldr	r3, [pc, #16]	; (8001bec <LL_ADC_DisableDeepPowerDown+0x20>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6093      	str	r3, [r2, #8]
}
 8001be0:	bf00      	nop
 8001be2:	370c      	adds	r7, #12
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	5fffffc0 	.word	0x5fffffc0

08001bf0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c04:	d101      	bne.n	8001c0a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689a      	ldr	r2, [r3, #8]
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <LL_ADC_EnableInternalRegulator+0x24>)
 8001c26:	4013      	ands	r3, r2
 8001c28:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	6fffffc0 	.word	0x6fffffc0

08001c40 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c54:	d101      	bne.n	8001c5a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <LL_ADC_Enable+0x24>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	f043 0201 	orr.w	r2, r3, #1
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	7fffffc0 	.word	0x7fffffc0

08001c90 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <LL_ADC_IsEnabled+0x18>
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e000      	b.n	8001caa <LL_ADC_IsEnabled+0x1a>
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
	...

08001cb8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <LL_ADC_REG_StartConversion+0x24>)
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	f043 0204 	orr.w	r2, r3, #4
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	7fffffc0 	.word	0x7fffffc0

08001ce0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b04      	cmp	r3, #4
 8001cf2:	d101      	bne.n	8001cf8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cf8:	2300      	movs	r3, #0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d101      	bne.n	8001d1e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b089      	sub	sp, #36	; 0x24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e18f      	b.n	8002066 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d109      	bne.n	8001d68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7ff fadf 	bl	8001318 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff ff3f 	bl	8001bf0 <LL_ADC_IsDeepPowerDownEnabled>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d004      	beq.n	8001d82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff25 	bl	8001bcc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ff5a 	bl	8001c40 <LL_ADC_IsInternalRegulatorEnabled>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d114      	bne.n	8001dbc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff3e 	bl	8001c18 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d9c:	4b87      	ldr	r3, [pc, #540]	; (8001fbc <HAL_ADC_Init+0x290>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	099b      	lsrs	r3, r3, #6
 8001da2:	4a87      	ldr	r2, [pc, #540]	; (8001fc0 <HAL_ADC_Init+0x294>)
 8001da4:	fba2 2303 	umull	r2, r3, r2, r3
 8001da8:	099b      	lsrs	r3, r3, #6
 8001daa:	3301      	adds	r3, #1
 8001dac:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001dae:	e002      	b.n	8001db6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f9      	bne.n	8001db0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff ff3d 	bl	8001c40 <LL_ADC_IsInternalRegulatorEnabled>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10d      	bne.n	8001de8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd0:	f043 0210 	orr.w	r2, r3, #16
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	f043 0201 	orr.w	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff77 	bl	8001ce0 <LL_ADC_REG_IsConversionOngoing>
 8001df2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df8:	f003 0310 	and.w	r3, r3, #16
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f040 8129 	bne.w	8002054 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	f040 8125 	bne.w	8002054 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e0e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001e12:	f043 0202 	orr.w	r2, r3, #2
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7ff ff36 	bl	8001c90 <LL_ADC_IsEnabled>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d136      	bne.n	8001e98 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a65      	ldr	r2, [pc, #404]	; (8001fc4 <HAL_ADC_Init+0x298>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d004      	beq.n	8001e3e <HAL_ADC_Init+0x112>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a63      	ldr	r2, [pc, #396]	; (8001fc8 <HAL_ADC_Init+0x29c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d10e      	bne.n	8001e5c <HAL_ADC_Init+0x130>
 8001e3e:	4861      	ldr	r0, [pc, #388]	; (8001fc4 <HAL_ADC_Init+0x298>)
 8001e40:	f7ff ff26 	bl	8001c90 <LL_ADC_IsEnabled>
 8001e44:	4604      	mov	r4, r0
 8001e46:	4860      	ldr	r0, [pc, #384]	; (8001fc8 <HAL_ADC_Init+0x29c>)
 8001e48:	f7ff ff22 	bl	8001c90 <LL_ADC_IsEnabled>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4323      	orrs	r3, r4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bf0c      	ite	eq
 8001e54:	2301      	moveq	r3, #1
 8001e56:	2300      	movne	r3, #0
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	e008      	b.n	8001e6e <HAL_ADC_Init+0x142>
 8001e5c:	485b      	ldr	r0, [pc, #364]	; (8001fcc <HAL_ADC_Init+0x2a0>)
 8001e5e:	f7ff ff17 	bl	8001c90 <LL_ADC_IsEnabled>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d012      	beq.n	8001e98 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a53      	ldr	r2, [pc, #332]	; (8001fc4 <HAL_ADC_Init+0x298>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d004      	beq.n	8001e86 <HAL_ADC_Init+0x15a>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a51      	ldr	r2, [pc, #324]	; (8001fc8 <HAL_ADC_Init+0x29c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_Init+0x15e>
 8001e86:	4a52      	ldr	r2, [pc, #328]	; (8001fd0 <HAL_ADC_Init+0x2a4>)
 8001e88:	e000      	b.n	8001e8c <HAL_ADC_Init+0x160>
 8001e8a:	4a52      	ldr	r2, [pc, #328]	; (8001fd4 <HAL_ADC_Init+0x2a8>)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	4619      	mov	r1, r3
 8001e92:	4610      	mov	r0, r2
 8001e94:	f7ff fd68 	bl	8001968 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001e98:	f7ff fd5a 	bl	8001950 <HAL_GetREVID>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d914      	bls.n	8001ed0 <HAL_ADC_Init+0x1a4>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	2b10      	cmp	r3, #16
 8001eac:	d110      	bne.n	8001ed0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	7d5b      	ldrb	r3, [r3, #21]
 8001eb2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001eb8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ebe:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7f1b      	ldrb	r3, [r3, #28]
 8001ec4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001ec6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ec8:	f043 030c 	orr.w	r3, r3, #12
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	e00d      	b.n	8001eec <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	7d5b      	ldrb	r3, [r3, #21]
 8001ed4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001eda:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001ee0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7f1b      	ldrb	r3, [r3, #28]
 8001ee6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	7f1b      	ldrb	r3, [r3, #28]
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d106      	bne.n	8001f02 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a1b      	ldr	r3, [r3, #32]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	045b      	lsls	r3, r3, #17
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d009      	beq.n	8001f1e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	68da      	ldr	r2, [r3, #12]
 8001f24:	4b2c      	ldr	r3, [pc, #176]	; (8001fd8 <HAL_ADC_Init+0x2ac>)
 8001f26:	4013      	ands	r3, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	69b9      	ldr	r1, [r7, #24]
 8001f2e:	430b      	orrs	r3, r1
 8001f30:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff fed2 	bl	8001ce0 <LL_ADC_REG_IsConversionOngoing>
 8001f3c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fedf 	bl	8001d06 <LL_ADC_INJ_IsConversionOngoing>
 8001f48:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d15f      	bne.n	8002010 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d15c      	bne.n	8002010 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	7d1b      	ldrb	r3, [r3, #20]
 8001f5a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001f60:	4313      	orrs	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <HAL_ADC_Init+0x2b0>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	69b9      	ldr	r1, [r7, #24]
 8001f74:	430b      	orrs	r3, r1
 8001f76:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d130      	bne.n	8001fe4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_ADC_Init+0x2b4>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f96:	3a01      	subs	r2, #1
 8001f98:	0411      	lsls	r1, r2, #16
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f9e:	4311      	orrs	r1, r2
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001fa4:	4311      	orrs	r1, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001faa:	430a      	orrs	r2, r1
 8001fac:	431a      	orrs	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f042 0201 	orr.w	r2, r2, #1
 8001fb6:	611a      	str	r2, [r3, #16]
 8001fb8:	e01c      	b.n	8001ff4 <HAL_ADC_Init+0x2c8>
 8001fba:	bf00      	nop
 8001fbc:	24000000 	.word	0x24000000
 8001fc0:	053e2d63 	.word	0x053e2d63
 8001fc4:	40022000 	.word	0x40022000
 8001fc8:	40022100 	.word	0x40022100
 8001fcc:	58026000 	.word	0x58026000
 8001fd0:	40022300 	.word	0x40022300
 8001fd4:	58026300 	.word	0x58026300
 8001fd8:	fff0c003 	.word	0xfff0c003
 8001fdc:	ffffbffc 	.word	0xffffbffc
 8001fe0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f022 0201 	bic.w	r2, r2, #1
 8001ff2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 fdd6 	bl	8002bbc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d10c      	bne.n	8002032 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f023 010f 	bic.w	r1, r3, #15
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	1e5a      	subs	r2, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	631a      	str	r2, [r3, #48]	; 0x30
 8002030:	e007      	b.n	8002042 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f022 020f 	bic.w	r2, r2, #15
 8002040:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	f043 0201 	orr.w	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	655a      	str	r2, [r3, #84]	; 0x54
 8002052:	e007      	b.n	8002064 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002058:	f043 0210 	orr.w	r2, r3, #16
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002064:	7ffb      	ldrb	r3, [r7, #31]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3724      	adds	r7, #36	; 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	bd90      	pop	{r4, r7, pc}
 800206e:	bf00      	nop

08002070 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a5c      	ldr	r2, [pc, #368]	; (80021f0 <HAL_ADC_Start+0x180>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d004      	beq.n	800208c <HAL_ADC_Start+0x1c>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a5b      	ldr	r2, [pc, #364]	; (80021f4 <HAL_ADC_Start+0x184>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d101      	bne.n	8002090 <HAL_ADC_Start+0x20>
 800208c:	4b5a      	ldr	r3, [pc, #360]	; (80021f8 <HAL_ADC_Start+0x188>)
 800208e:	e000      	b.n	8002092 <HAL_ADC_Start+0x22>
 8002090:	4b5a      	ldr	r3, [pc, #360]	; (80021fc <HAL_ADC_Start+0x18c>)
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff fd7e 	bl	8001b94 <LL_ADC_GetMultimode>
 8002098:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff fe1e 	bl	8001ce0 <LL_ADC_REG_IsConversionOngoing>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 809a 	bne.w	80021e0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_ADC_Start+0x4a>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e095      	b.n	80021e6 <HAL_ADC_Start+0x176>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fcf0 	bl	8002aa8 <ADC_Enable>
 80020c8:	4603      	mov	r3, r0
 80020ca:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80020cc:	7dfb      	ldrb	r3, [r7, #23]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	f040 8081 	bne.w	80021d6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020d8:	4b49      	ldr	r3, [pc, #292]	; (8002200 <HAL_ADC_Start+0x190>)
 80020da:	4013      	ands	r3, r2
 80020dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a42      	ldr	r2, [pc, #264]	; (80021f4 <HAL_ADC_Start+0x184>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d002      	beq.n	80020f4 <HAL_ADC_Start+0x84>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	e000      	b.n	80020f6 <HAL_ADC_Start+0x86>
 80020f4:	4b3e      	ldr	r3, [pc, #248]	; (80021f0 <HAL_ADC_Start+0x180>)
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	6812      	ldr	r2, [r2, #0]
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d002      	beq.n	8002104 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d105      	bne.n	8002110 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002108:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800211c:	d106      	bne.n	800212c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002122:	f023 0206 	bic.w	r2, r3, #6
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	659a      	str	r2, [r3, #88]	; 0x58
 800212a:	e002      	b.n	8002132 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	221c      	movs	r2, #28
 8002138:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a2b      	ldr	r2, [pc, #172]	; (80021f4 <HAL_ADC_Start+0x184>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d002      	beq.n	8002152 <HAL_ADC_Start+0xe2>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	e000      	b.n	8002154 <HAL_ADC_Start+0xe4>
 8002152:	4b27      	ldr	r3, [pc, #156]	; (80021f0 <HAL_ADC_Start+0x180>)
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6812      	ldr	r2, [r2, #0]
 8002158:	4293      	cmp	r3, r2
 800215a:	d008      	beq.n	800216e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d005      	beq.n	800216e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b05      	cmp	r3, #5
 8002166:	d002      	beq.n	800216e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	2b09      	cmp	r3, #9
 800216c:	d114      	bne.n	8002198 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002180:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002184:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fd91 	bl	8001cb8 <LL_ADC_REG_StartConversion>
 8002196:	e025      	b.n	80021e4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a12      	ldr	r2, [pc, #72]	; (80021f4 <HAL_ADC_Start+0x184>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d002      	beq.n	80021b4 <HAL_ADC_Start+0x144>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	e000      	b.n	80021b6 <HAL_ADC_Start+0x146>
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_ADC_Start+0x180>)
 80021b6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00f      	beq.n	80021e4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	655a      	str	r2, [r3, #84]	; 0x54
 80021d4:	e006      	b.n	80021e4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80021de:	e001      	b.n	80021e4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80021e0:	2302      	movs	r3, #2
 80021e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80021e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40022000 	.word	0x40022000
 80021f4:	40022100 	.word	0x40022100
 80021f8:	40022300 	.word	0x40022300
 80021fc:	58026300 	.word	0x58026300
 8002200:	fffff0fe 	.word	0xfffff0fe

08002204 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b088      	sub	sp, #32
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a72      	ldr	r2, [pc, #456]	; (80023dc <HAL_ADC_PollForConversion+0x1d8>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d004      	beq.n	8002222 <HAL_ADC_PollForConversion+0x1e>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a70      	ldr	r2, [pc, #448]	; (80023e0 <HAL_ADC_PollForConversion+0x1dc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_ADC_PollForConversion+0x22>
 8002222:	4b70      	ldr	r3, [pc, #448]	; (80023e4 <HAL_ADC_PollForConversion+0x1e0>)
 8002224:	e000      	b.n	8002228 <HAL_ADC_PollForConversion+0x24>
 8002226:	4b70      	ldr	r3, [pc, #448]	; (80023e8 <HAL_ADC_PollForConversion+0x1e4>)
 8002228:	4618      	mov	r0, r3
 800222a:	f7ff fcb3 	bl	8001b94 <LL_ADC_GetMultimode>
 800222e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	2b08      	cmp	r3, #8
 8002236:	d102      	bne.n	800223e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002238:	2308      	movs	r3, #8
 800223a:	61fb      	str	r3, [r7, #28]
 800223c:	e037      	b.n	80022ae <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b05      	cmp	r3, #5
 8002248:	d002      	beq.n	8002250 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b09      	cmp	r3, #9
 800224e:	d111      	bne.n	8002274 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d007      	beq.n	800226e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002262:	f043 0220 	orr.w	r2, r3, #32
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e0b1      	b.n	80023d2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800226e:	2304      	movs	r3, #4
 8002270:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8002272:	e01c      	b.n	80022ae <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a58      	ldr	r2, [pc, #352]	; (80023dc <HAL_ADC_PollForConversion+0x1d8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d004      	beq.n	8002288 <HAL_ADC_PollForConversion+0x84>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a57      	ldr	r2, [pc, #348]	; (80023e0 <HAL_ADC_PollForConversion+0x1dc>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d101      	bne.n	800228c <HAL_ADC_PollForConversion+0x88>
 8002288:	4b56      	ldr	r3, [pc, #344]	; (80023e4 <HAL_ADC_PollForConversion+0x1e0>)
 800228a:	e000      	b.n	800228e <HAL_ADC_PollForConversion+0x8a>
 800228c:	4b56      	ldr	r3, [pc, #344]	; (80023e8 <HAL_ADC_PollForConversion+0x1e4>)
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fc8e 	bl	8001bb0 <LL_ADC_GetMultiDMATransfer>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d007      	beq.n	80022aa <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229e:	f043 0220 	orr.w	r2, r3, #32
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e093      	b.n	80023d2 <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80022aa:	2304      	movs	r3, #4
 80022ac:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80022ae:	f7ff fb1f 	bl	80018f0 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022b4:	e021      	b.n	80022fa <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022bc:	d01d      	beq.n	80022fa <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80022be:	f7ff fb17 	bl	80018f0 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d302      	bcc.n	80022d4 <HAL_ADC_PollForConversion+0xd0>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d112      	bne.n	80022fa <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	4013      	ands	r3, r2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10b      	bne.n	80022fa <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e6:	f043 0204 	orr.w	r2, r3, #4
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e06b      	b.n	80023d2 <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0d6      	beq.n	80022b6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7ff fbad 	bl	8001a78 <LL_ADC_REG_IsTriggerSourceSWStart>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d01c      	beq.n	800235e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	7d5b      	ldrb	r3, [r3, #21]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d118      	bne.n	800235e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b08      	cmp	r3, #8
 8002338:	d111      	bne.n	800235e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800233e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d105      	bne.n	800235e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002356:	f043 0201 	orr.w	r2, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a1f      	ldr	r2, [pc, #124]	; (80023e0 <HAL_ADC_PollForConversion+0x1dc>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d002      	beq.n	800236e <HAL_ADC_PollForConversion+0x16a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	e000      	b.n	8002370 <HAL_ADC_PollForConversion+0x16c>
 800236e:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <HAL_ADC_PollForConversion+0x1d8>)
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	4293      	cmp	r3, r2
 8002376:	d008      	beq.n	800238a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d005      	beq.n	800238a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	2b05      	cmp	r3, #5
 8002382:	d002      	beq.n	800238a <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	2b09      	cmp	r3, #9
 8002388:	d104      	bne.n	8002394 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	61bb      	str	r3, [r7, #24]
 8002392:	e00c      	b.n	80023ae <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a11      	ldr	r2, [pc, #68]	; (80023e0 <HAL_ADC_PollForConversion+0x1dc>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d002      	beq.n	80023a4 <HAL_ADC_PollForConversion+0x1a0>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	e000      	b.n	80023a6 <HAL_ADC_PollForConversion+0x1a2>
 80023a4:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <HAL_ADC_PollForConversion+0x1d8>)
 80023a6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d104      	bne.n	80023be <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2208      	movs	r2, #8
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	e008      	b.n	80023d0 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d103      	bne.n	80023d0 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	220c      	movs	r2, #12
 80023ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3720      	adds	r7, #32
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40022000 	.word	0x40022000
 80023e0:	40022100 	.word	0x40022100
 80023e4:	40022300 	.word	0x40022300
 80023e8:	58026300 	.word	0x58026300

080023ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002408:	b590      	push	{r4, r7, lr}
 800240a:	b0a1      	sub	sp, #132	; 0x84
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8002418:	2300      	movs	r3, #0
 800241a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	4a9d      	ldr	r2, [pc, #628]	; (8002698 <HAL_ADC_ConfigChannel+0x290>)
 8002422:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x2a>
 800242e:	2302      	movs	r3, #2
 8002430:	e321      	b.n	8002a76 <HAL_ADC_ConfigChannel+0x66e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fc4e 	bl	8001ce0 <LL_ADC_REG_IsConversionOngoing>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 8306 	bne.w	8002a58 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002454:	2b00      	cmp	r3, #0
 8002456:	d108      	bne.n	800246a <HAL_ADC_ConfigChannel+0x62>
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0e9b      	lsrs	r3, r3, #26
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	2201      	movs	r2, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	e016      	b.n	8002498 <HAL_ADC_ConfigChannel+0x90>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002472:	fa93 f3a3 	rbit	r3, r3
 8002476:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002478:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800247a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800247c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8002482:	2320      	movs	r3, #32
 8002484:	e003      	b.n	800248e <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8002486:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002488:	fab3 f383 	clz	r3, r3
 800248c:	b2db      	uxtb	r3, r3
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	2201      	movs	r2, #1
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	687a      	ldr	r2, [r7, #4]
 800249a:	6812      	ldr	r2, [r2, #0]
 800249c:	69d1      	ldr	r1, [r2, #28]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6812      	ldr	r2, [r2, #0]
 80024a2:	430b      	orrs	r3, r1
 80024a4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	6859      	ldr	r1, [r3, #4]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f7ff faf3 	bl	8001a9e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff fc0f 	bl	8001ce0 <LL_ADC_REG_IsConversionOngoing>
 80024c2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fc1c 	bl	8001d06 <LL_ADC_INJ_IsConversionOngoing>
 80024ce:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f040 80b3 	bne.w	800263e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f040 80af 	bne.w	800263e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	6819      	ldr	r1, [r3, #0]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	461a      	mov	r2, r3
 80024ee:	f7ff fb02 	bl	8001af6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80024f2:	4b6a      	ldr	r3, [pc, #424]	; (800269c <HAL_ADC_ConfigChannel+0x294>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80024fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024fe:	d10b      	bne.n	8002518 <HAL_ADC_ConfigChannel+0x110>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	089b      	lsrs	r3, r3, #2
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	e01d      	b.n	8002554 <HAL_ADC_ConfigChannel+0x14c>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f003 0310 	and.w	r3, r3, #16
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10b      	bne.n	800253e <HAL_ADC_ConfigChannel+0x136>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	089b      	lsrs	r3, r3, #2
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	e00a      	b.n	8002554 <HAL_ADC_ConfigChannel+0x14c>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	695a      	ldr	r2, [r3, #20]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	089b      	lsrs	r3, r3, #2
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	2b04      	cmp	r3, #4
 800255c:	d027      	beq.n	80025ae <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	6919      	ldr	r1, [r3, #16]
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800256c:	f7ff fa30 	bl	80019d0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	6919      	ldr	r1, [r3, #16]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	7e5b      	ldrb	r3, [r3, #25]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d102      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x17e>
 8002580:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002584:	e000      	b.n	8002588 <HAL_ADC_ConfigChannel+0x180>
 8002586:	2300      	movs	r3, #0
 8002588:	461a      	mov	r2, r3
 800258a:	f7ff fa5a 	bl	8001a42 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	6919      	ldr	r1, [r3, #16]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	7e1b      	ldrb	r3, [r3, #24]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d102      	bne.n	80025a4 <HAL_ADC_ConfigChannel+0x19c>
 800259e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025a2:	e000      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x19e>
 80025a4:	2300      	movs	r3, #0
 80025a6:	461a      	mov	r2, r3
 80025a8:	f7ff fa32 	bl	8001a10 <LL_ADC_SetDataRightShift>
 80025ac:	e047      	b.n	800263e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	069b      	lsls	r3, r3, #26
 80025be:	429a      	cmp	r2, r3
 80025c0:	d107      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025d0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	069b      	lsls	r3, r3, #26
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d107      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025f4:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	069b      	lsls	r3, r3, #26
 8002606:	429a      	cmp	r2, r3
 8002608:	d107      	bne.n	800261a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002618:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002620:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	069b      	lsls	r3, r3, #26
 800262a:	429a      	cmp	r2, r3
 800262c:	d107      	bne.n	800263e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800263c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff fb24 	bl	8001c90 <LL_ADC_IsEnabled>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	f040 820d 	bne.w	8002a6a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6819      	ldr	r1, [r3, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	461a      	mov	r2, r3
 800265e:	f7ff fa75 	bl	8001b4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	4a0c      	ldr	r2, [pc, #48]	; (8002698 <HAL_ADC_ConfigChannel+0x290>)
 8002668:	4293      	cmp	r3, r2
 800266a:	f040 8133 	bne.w	80028d4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800267a:	2b00      	cmp	r3, #0
 800267c:	d110      	bne.n	80026a0 <HAL_ADC_ConfigChannel+0x298>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	0e9b      	lsrs	r3, r3, #26
 8002684:	3301      	adds	r3, #1
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	2b09      	cmp	r3, #9
 800268c:	bf94      	ite	ls
 800268e:	2301      	movls	r3, #1
 8002690:	2300      	movhi	r3, #0
 8002692:	b2db      	uxtb	r3, r3
 8002694:	e01e      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x2cc>
 8002696:	bf00      	nop
 8002698:	47ff0000 	.word	0x47ff0000
 800269c:	5c001000 	.word	0x5c001000
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026a8:	fa93 f3a3 	rbit	r3, r3
 80026ac:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80026ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80026b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80026b8:	2320      	movs	r3, #32
 80026ba:	e003      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80026bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	3301      	adds	r3, #1
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	2b09      	cmp	r3, #9
 80026cc:	bf94      	ite	ls
 80026ce:	2301      	movls	r3, #1
 80026d0:	2300      	movhi	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d079      	beq.n	80027cc <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d107      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x2ec>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	0e9b      	lsrs	r3, r3, #26
 80026ea:	3301      	adds	r3, #1
 80026ec:	069b      	lsls	r3, r3, #26
 80026ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026f2:	e015      	b.n	8002720 <HAL_ADC_ConfigChannel+0x318>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026fc:	fa93 f3a3 	rbit	r3, r3
 8002700:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002704:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800270c:	2320      	movs	r3, #32
 800270e:	e003      	b.n	8002718 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002710:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	b2db      	uxtb	r3, r3
 8002718:	3301      	adds	r3, #1
 800271a:	069b      	lsls	r3, r3, #26
 800271c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002728:	2b00      	cmp	r3, #0
 800272a:	d109      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x338>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	0e9b      	lsrs	r3, r3, #26
 8002732:	3301      	adds	r3, #1
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	2101      	movs	r1, #1
 800273a:	fa01 f303 	lsl.w	r3, r1, r3
 800273e:	e017      	b.n	8002770 <HAL_ADC_ConfigChannel+0x368>
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002748:	fa93 f3a3 	rbit	r3, r3
 800274c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800274e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002750:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002754:	2b00      	cmp	r3, #0
 8002756:	d101      	bne.n	800275c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8002758:	2320      	movs	r3, #32
 800275a:	e003      	b.n	8002764 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800275c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800275e:	fab3 f383 	clz	r3, r3
 8002762:	b2db      	uxtb	r3, r3
 8002764:	3301      	adds	r3, #1
 8002766:	f003 031f 	and.w	r3, r3, #31
 800276a:	2101      	movs	r1, #1
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	ea42 0103 	orr.w	r1, r2, r3
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10a      	bne.n	8002796 <HAL_ADC_ConfigChannel+0x38e>
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	0e9b      	lsrs	r3, r3, #26
 8002786:	3301      	adds	r3, #1
 8002788:	f003 021f 	and.w	r2, r3, #31
 800278c:	4613      	mov	r3, r2
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	4413      	add	r3, r2
 8002792:	051b      	lsls	r3, r3, #20
 8002794:	e018      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x3c0>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800279e:	fa93 f3a3 	rbit	r3, r3
 80027a2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80027a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80027ae:	2320      	movs	r3, #32
 80027b0:	e003      	b.n	80027ba <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80027b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b4:	fab3 f383 	clz	r3, r3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	3301      	adds	r3, #1
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027c8:	430b      	orrs	r3, r1
 80027ca:	e07e      	b.n	80028ca <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d107      	bne.n	80027e8 <HAL_ADC_ConfigChannel+0x3e0>
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0e9b      	lsrs	r3, r3, #26
 80027de:	3301      	adds	r3, #1
 80027e0:	069b      	lsls	r3, r3, #26
 80027e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027e6:	e015      	b.n	8002814 <HAL_ADC_ConfigChannel+0x40c>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f0:	fa93 f3a3 	rbit	r3, r3
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80027fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002800:	2320      	movs	r3, #32
 8002802:	e003      	b.n	800280c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	3301      	adds	r3, #1
 800280e:	069b      	lsls	r3, r3, #26
 8002810:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800281c:	2b00      	cmp	r3, #0
 800281e:	d109      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x42c>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	0e9b      	lsrs	r3, r3, #26
 8002826:	3301      	adds	r3, #1
 8002828:	f003 031f 	and.w	r3, r3, #31
 800282c:	2101      	movs	r1, #1
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	e017      	b.n	8002864 <HAL_ADC_ConfigChannel+0x45c>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	61bb      	str	r3, [r7, #24]
  return result;
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800284c:	2320      	movs	r3, #32
 800284e:	e003      	b.n	8002858 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	fab3 f383 	clz	r3, r3
 8002856:	b2db      	uxtb	r3, r3
 8002858:	3301      	adds	r3, #1
 800285a:	f003 031f 	and.w	r3, r3, #31
 800285e:	2101      	movs	r1, #1
 8002860:	fa01 f303 	lsl.w	r3, r1, r3
 8002864:	ea42 0103 	orr.w	r1, r2, r3
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002870:	2b00      	cmp	r3, #0
 8002872:	d10d      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x488>
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	0e9b      	lsrs	r3, r3, #26
 800287a:	3301      	adds	r3, #1
 800287c:	f003 021f 	and.w	r2, r3, #31
 8002880:	4613      	mov	r3, r2
 8002882:	005b      	lsls	r3, r3, #1
 8002884:	4413      	add	r3, r2
 8002886:	3b1e      	subs	r3, #30
 8002888:	051b      	lsls	r3, r3, #20
 800288a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800288e:	e01b      	b.n	80028c8 <HAL_ADC_ConfigChannel+0x4c0>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	fa93 f3a3 	rbit	r3, r3
 800289c:	60fb      	str	r3, [r7, #12]
  return result;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80028a8:	2320      	movs	r3, #32
 80028aa:	e003      	b.n	80028b4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	fab3 f383 	clz	r3, r3
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	3301      	adds	r3, #1
 80028b6:	f003 021f 	and.w	r2, r3, #31
 80028ba:	4613      	mov	r3, r2
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	4413      	add	r3, r2
 80028c0:	3b1e      	subs	r3, #30
 80028c2:	051b      	lsls	r3, r3, #20
 80028c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028c8:	430b      	orrs	r3, r1
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	6892      	ldr	r2, [r2, #8]
 80028ce:	4619      	mov	r1, r3
 80028d0:	f7ff f911 	bl	8001af6 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f280 80c6 	bge.w	8002a6a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a67      	ldr	r2, [pc, #412]	; (8002a80 <HAL_ADC_ConfigChannel+0x678>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d004      	beq.n	80028f2 <HAL_ADC_ConfigChannel+0x4ea>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a65      	ldr	r2, [pc, #404]	; (8002a84 <HAL_ADC_ConfigChannel+0x67c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d101      	bne.n	80028f6 <HAL_ADC_ConfigChannel+0x4ee>
 80028f2:	4b65      	ldr	r3, [pc, #404]	; (8002a88 <HAL_ADC_ConfigChannel+0x680>)
 80028f4:	e000      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x4f0>
 80028f6:	4b65      	ldr	r3, [pc, #404]	; (8002a8c <HAL_ADC_ConfigChannel+0x684>)
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff f85b 	bl	80019b4 <LL_ADC_GetCommonPathInternalCh>
 80028fe:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a5e      	ldr	r2, [pc, #376]	; (8002a80 <HAL_ADC_ConfigChannel+0x678>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d004      	beq.n	8002914 <HAL_ADC_ConfigChannel+0x50c>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a5d      	ldr	r2, [pc, #372]	; (8002a84 <HAL_ADC_ConfigChannel+0x67c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d10e      	bne.n	8002932 <HAL_ADC_ConfigChannel+0x52a>
 8002914:	485a      	ldr	r0, [pc, #360]	; (8002a80 <HAL_ADC_ConfigChannel+0x678>)
 8002916:	f7ff f9bb 	bl	8001c90 <LL_ADC_IsEnabled>
 800291a:	4604      	mov	r4, r0
 800291c:	4859      	ldr	r0, [pc, #356]	; (8002a84 <HAL_ADC_ConfigChannel+0x67c>)
 800291e:	f7ff f9b7 	bl	8001c90 <LL_ADC_IsEnabled>
 8002922:	4603      	mov	r3, r0
 8002924:	4323      	orrs	r3, r4
 8002926:	2b00      	cmp	r3, #0
 8002928:	bf0c      	ite	eq
 800292a:	2301      	moveq	r3, #1
 800292c:	2300      	movne	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	e008      	b.n	8002944 <HAL_ADC_ConfigChannel+0x53c>
 8002932:	4857      	ldr	r0, [pc, #348]	; (8002a90 <HAL_ADC_ConfigChannel+0x688>)
 8002934:	f7ff f9ac 	bl	8001c90 <LL_ADC_IsEnabled>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	bf0c      	ite	eq
 800293e:	2301      	moveq	r3, #1
 8002940:	2300      	movne	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d07d      	beq.n	8002a44 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a51      	ldr	r2, [pc, #324]	; (8002a94 <HAL_ADC_ConfigChannel+0x68c>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d130      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x5ac>
 8002952:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002954:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d12b      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a4b      	ldr	r2, [pc, #300]	; (8002a90 <HAL_ADC_ConfigChannel+0x688>)
 8002962:	4293      	cmp	r3, r2
 8002964:	f040 8081 	bne.w	8002a6a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a44      	ldr	r2, [pc, #272]	; (8002a80 <HAL_ADC_ConfigChannel+0x678>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d004      	beq.n	800297c <HAL_ADC_ConfigChannel+0x574>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a43      	ldr	r2, [pc, #268]	; (8002a84 <HAL_ADC_ConfigChannel+0x67c>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d101      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x578>
 800297c:	4a42      	ldr	r2, [pc, #264]	; (8002a88 <HAL_ADC_ConfigChannel+0x680>)
 800297e:	e000      	b.n	8002982 <HAL_ADC_ConfigChannel+0x57a>
 8002980:	4a42      	ldr	r2, [pc, #264]	; (8002a8c <HAL_ADC_ConfigChannel+0x684>)
 8002982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002984:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002988:	4619      	mov	r1, r3
 800298a:	4610      	mov	r0, r2
 800298c:	f7fe ffff 	bl	800198e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002990:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <HAL_ADC_ConfigChannel+0x690>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	099b      	lsrs	r3, r3, #6
 8002996:	4a41      	ldr	r2, [pc, #260]	; (8002a9c <HAL_ADC_ConfigChannel+0x694>)
 8002998:	fba2 2303 	umull	r2, r3, r2, r3
 800299c:	099b      	lsrs	r3, r3, #6
 800299e:	3301      	adds	r3, #1
 80029a0:	005b      	lsls	r3, r3, #1
 80029a2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80029a4:	e002      	b.n	80029ac <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	3b01      	subs	r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d1f9      	bne.n	80029a6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029b2:	e05a      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a39      	ldr	r2, [pc, #228]	; (8002aa0 <HAL_ADC_ConfigChannel+0x698>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d11e      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x5f4>
 80029be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d119      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a30      	ldr	r2, [pc, #192]	; (8002a90 <HAL_ADC_ConfigChannel+0x688>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d14b      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a2a      	ldr	r2, [pc, #168]	; (8002a80 <HAL_ADC_ConfigChannel+0x678>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d004      	beq.n	80029e6 <HAL_ADC_ConfigChannel+0x5de>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a28      	ldr	r2, [pc, #160]	; (8002a84 <HAL_ADC_ConfigChannel+0x67c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d101      	bne.n	80029ea <HAL_ADC_ConfigChannel+0x5e2>
 80029e6:	4a28      	ldr	r2, [pc, #160]	; (8002a88 <HAL_ADC_ConfigChannel+0x680>)
 80029e8:	e000      	b.n	80029ec <HAL_ADC_ConfigChannel+0x5e4>
 80029ea:	4a28      	ldr	r2, [pc, #160]	; (8002a8c <HAL_ADC_ConfigChannel+0x684>)
 80029ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029f2:	4619      	mov	r1, r3
 80029f4:	4610      	mov	r0, r2
 80029f6:	f7fe ffca 	bl	800198e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029fa:	e036      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a28      	ldr	r2, [pc, #160]	; (8002aa4 <HAL_ADC_ConfigChannel+0x69c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d131      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x662>
 8002a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d12c      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a1e      	ldr	r2, [pc, #120]	; (8002a90 <HAL_ADC_ConfigChannel+0x688>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d127      	bne.n	8002a6a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a18      	ldr	r2, [pc, #96]	; (8002a80 <HAL_ADC_ConfigChannel+0x678>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d004      	beq.n	8002a2e <HAL_ADC_ConfigChannel+0x626>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a16      	ldr	r2, [pc, #88]	; (8002a84 <HAL_ADC_ConfigChannel+0x67c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x62a>
 8002a2e:	4a16      	ldr	r2, [pc, #88]	; (8002a88 <HAL_ADC_ConfigChannel+0x680>)
 8002a30:	e000      	b.n	8002a34 <HAL_ADC_ConfigChannel+0x62c>
 8002a32:	4a16      	ldr	r2, [pc, #88]	; (8002a8c <HAL_ADC_ConfigChannel+0x684>)
 8002a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	f7fe ffa6 	bl	800198e <LL_ADC_SetCommonPathInternalCh>
 8002a42:	e012      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a48:	f043 0220 	orr.w	r2, r3, #32
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002a56:	e008      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5c:	f043 0220 	orr.w	r2, r3, #32
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002a72:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3784      	adds	r7, #132	; 0x84
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd90      	pop	{r4, r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40022000 	.word	0x40022000
 8002a84:	40022100 	.word	0x40022100
 8002a88:	40022300 	.word	0x40022300
 8002a8c:	58026300 	.word	0x58026300
 8002a90:	58026000 	.word	0x58026000
 8002a94:	cb840000 	.word	0xcb840000
 8002a98:	24000000 	.word	0x24000000
 8002a9c:	053e2d63 	.word	0x053e2d63
 8002aa0:	c7520000 	.word	0xc7520000
 8002aa4:	cfb80000 	.word	0xcfb80000

08002aa8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b084      	sub	sp, #16
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff f8eb 	bl	8001c90 <LL_ADC_IsEnabled>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d16e      	bne.n	8002b9e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689a      	ldr	r2, [r3, #8]
 8002ac6:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <ADC_Enable+0x100>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00d      	beq.n	8002aea <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad2:	f043 0210 	orr.w	r2, r3, #16
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ade:	f043 0201 	orr.w	r2, r3, #1
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e05a      	b.n	8002ba0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff f8ba 	bl	8001c68 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002af4:	f7fe fefc 	bl	80018f0 <HAL_GetTick>
 8002af8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a2b      	ldr	r2, [pc, #172]	; (8002bac <ADC_Enable+0x104>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d004      	beq.n	8002b0e <ADC_Enable+0x66>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a29      	ldr	r2, [pc, #164]	; (8002bb0 <ADC_Enable+0x108>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d101      	bne.n	8002b12 <ADC_Enable+0x6a>
 8002b0e:	4b29      	ldr	r3, [pc, #164]	; (8002bb4 <ADC_Enable+0x10c>)
 8002b10:	e000      	b.n	8002b14 <ADC_Enable+0x6c>
 8002b12:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <ADC_Enable+0x110>)
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff f83d 	bl	8001b94 <LL_ADC_GetMultimode>
 8002b1a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a23      	ldr	r2, [pc, #140]	; (8002bb0 <ADC_Enable+0x108>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d002      	beq.n	8002b2c <ADC_Enable+0x84>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	e000      	b.n	8002b2e <ADC_Enable+0x86>
 8002b2c:	4b1f      	ldr	r3, [pc, #124]	; (8002bac <ADC_Enable+0x104>)
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	6812      	ldr	r2, [r2, #0]
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d02c      	beq.n	8002b90 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d130      	bne.n	8002b9e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b3c:	e028      	b.n	8002b90 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff f8a4 	bl	8001c90 <LL_ADC_IsEnabled>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d104      	bne.n	8002b58 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f7ff f888 	bl	8001c68 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b58:	f7fe feca 	bl	80018f0 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d914      	bls.n	8002b90 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d00d      	beq.n	8002b90 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b78:	f043 0210 	orr.w	r2, r3, #16
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b84:	f043 0201 	orr.w	r2, r3, #1
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e007      	b.n	8002ba0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d1cf      	bne.n	8002b3e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	8000003f 	.word	0x8000003f
 8002bac:	40022000 	.word	0x40022000
 8002bb0:	40022100 	.word	0x40022100
 8002bb4:	40022300 	.word	0x40022300
 8002bb8:	58026300 	.word	0x58026300

08002bbc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a79      	ldr	r2, [pc, #484]	; (8002db0 <ADC_ConfigureBoostMode+0x1f4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d004      	beq.n	8002bd8 <ADC_ConfigureBoostMode+0x1c>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a78      	ldr	r2, [pc, #480]	; (8002db4 <ADC_ConfigureBoostMode+0x1f8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d109      	bne.n	8002bec <ADC_ConfigureBoostMode+0x30>
 8002bd8:	4b77      	ldr	r3, [pc, #476]	; (8002db8 <ADC_ConfigureBoostMode+0x1fc>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf14      	ite	ne
 8002be4:	2301      	movne	r3, #1
 8002be6:	2300      	moveq	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	e008      	b.n	8002bfe <ADC_ConfigureBoostMode+0x42>
 8002bec:	4b73      	ldr	r3, [pc, #460]	; (8002dbc <ADC_ConfigureBoostMode+0x200>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d01c      	beq.n	8002c3c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002c02:	f002 fb43 	bl	800528c <HAL_RCC_GetHCLKFreq>
 8002c06:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c10:	d010      	beq.n	8002c34 <ADC_ConfigureBoostMode+0x78>
 8002c12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c16:	d871      	bhi.n	8002cfc <ADC_ConfigureBoostMode+0x140>
 8002c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c1c:	d002      	beq.n	8002c24 <ADC_ConfigureBoostMode+0x68>
 8002c1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c22:	d16b      	bne.n	8002cfc <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	0c1b      	lsrs	r3, r3, #16
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c30:	60fb      	str	r3, [r7, #12]
        break;
 8002c32:	e066      	b.n	8002d02 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	60fb      	str	r3, [r7, #12]
        break;
 8002c3a:	e062      	b.n	8002d02 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002c3c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002c40:	f003 fac6 	bl	80061d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c44:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002c4e:	d051      	beq.n	8002cf4 <ADC_ConfigureBoostMode+0x138>
 8002c50:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002c54:	d854      	bhi.n	8002d00 <ADC_ConfigureBoostMode+0x144>
 8002c56:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002c5a:	d047      	beq.n	8002cec <ADC_ConfigureBoostMode+0x130>
 8002c5c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002c60:	d84e      	bhi.n	8002d00 <ADC_ConfigureBoostMode+0x144>
 8002c62:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002c66:	d03d      	beq.n	8002ce4 <ADC_ConfigureBoostMode+0x128>
 8002c68:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002c6c:	d848      	bhi.n	8002d00 <ADC_ConfigureBoostMode+0x144>
 8002c6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c72:	d033      	beq.n	8002cdc <ADC_ConfigureBoostMode+0x120>
 8002c74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c78:	d842      	bhi.n	8002d00 <ADC_ConfigureBoostMode+0x144>
 8002c7a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002c7e:	d029      	beq.n	8002cd4 <ADC_ConfigureBoostMode+0x118>
 8002c80:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002c84:	d83c      	bhi.n	8002d00 <ADC_ConfigureBoostMode+0x144>
 8002c86:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002c8a:	d01a      	beq.n	8002cc2 <ADC_ConfigureBoostMode+0x106>
 8002c8c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002c90:	d836      	bhi.n	8002d00 <ADC_ConfigureBoostMode+0x144>
 8002c92:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002c96:	d014      	beq.n	8002cc2 <ADC_ConfigureBoostMode+0x106>
 8002c98:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002c9c:	d830      	bhi.n	8002d00 <ADC_ConfigureBoostMode+0x144>
 8002c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ca2:	d00e      	beq.n	8002cc2 <ADC_ConfigureBoostMode+0x106>
 8002ca4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ca8:	d82a      	bhi.n	8002d00 <ADC_ConfigureBoostMode+0x144>
 8002caa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cae:	d008      	beq.n	8002cc2 <ADC_ConfigureBoostMode+0x106>
 8002cb0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002cb4:	d824      	bhi.n	8002d00 <ADC_ConfigureBoostMode+0x144>
 8002cb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002cba:	d002      	beq.n	8002cc2 <ADC_ConfigureBoostMode+0x106>
 8002cbc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002cc0:	d11e      	bne.n	8002d00 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	0c9b      	lsrs	r3, r3, #18
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	68fa      	ldr	r2, [r7, #12]
 8002ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd0:	60fb      	str	r3, [r7, #12]
        break;
 8002cd2:	e016      	b.n	8002d02 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	60fb      	str	r3, [r7, #12]
        break;
 8002cda:	e012      	b.n	8002d02 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	095b      	lsrs	r3, r3, #5
 8002ce0:	60fb      	str	r3, [r7, #12]
        break;
 8002ce2:	e00e      	b.n	8002d02 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	099b      	lsrs	r3, r3, #6
 8002ce8:	60fb      	str	r3, [r7, #12]
        break;
 8002cea:	e00a      	b.n	8002d02 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	09db      	lsrs	r3, r3, #7
 8002cf0:	60fb      	str	r3, [r7, #12]
        break;
 8002cf2:	e006      	b.n	8002d02 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	60fb      	str	r3, [r7, #12]
        break;
 8002cfa:	e002      	b.n	8002d02 <ADC_ConfigureBoostMode+0x146>
        break;
 8002cfc:	bf00      	nop
 8002cfe:	e000      	b.n	8002d02 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8002d00:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8002d02:	f7fe fe25 	bl	8001950 <HAL_GetREVID>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f241 0203 	movw	r2, #4099	; 0x1003
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d815      	bhi.n	8002d3c <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4a2b      	ldr	r2, [pc, #172]	; (8002dc0 <ADC_ConfigureBoostMode+0x204>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d908      	bls.n	8002d2a <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d26:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002d28:	e03e      	b.n	8002da8 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d38:	609a      	str	r2, [r3, #8]
}
 8002d3a:	e035      	b.n	8002da8 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4a1f      	ldr	r2, [pc, #124]	; (8002dc4 <ADC_ConfigureBoostMode+0x208>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d808      	bhi.n	8002d5c <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d58:	609a      	str	r2, [r3, #8]
}
 8002d5a:	e025      	b.n	8002da8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4a1a      	ldr	r2, [pc, #104]	; (8002dc8 <ADC_ConfigureBoostMode+0x20c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d80a      	bhi.n	8002d7a <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d76:	609a      	str	r2, [r3, #8]
}
 8002d78:	e016      	b.n	8002da8 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4a13      	ldr	r2, [pc, #76]	; (8002dcc <ADC_ConfigureBoostMode+0x210>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d80a      	bhi.n	8002d98 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d94:	609a      	str	r2, [r3, #8]
}
 8002d96:	e007      	b.n	8002da8 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002da6:	609a      	str	r2, [r3, #8]
}
 8002da8:	bf00      	nop
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40022000 	.word	0x40022000
 8002db4:	40022100 	.word	0x40022100
 8002db8:	40022300 	.word	0x40022300
 8002dbc:	58026300 	.word	0x58026300
 8002dc0:	01312d00 	.word	0x01312d00
 8002dc4:	005f5e10 	.word	0x005f5e10
 8002dc8:	00bebc20 	.word	0x00bebc20
 8002dcc:	017d7840 	.word	0x017d7840

08002dd0 <LL_ADC_IsEnabled>:
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d101      	bne.n	8002de8 <LL_ADC_IsEnabled+0x18>
 8002de4:	2301      	movs	r3, #1
 8002de6:	e000      	b.n	8002dea <LL_ADC_IsEnabled+0x1a>
 8002de8:	2300      	movs	r3, #0
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	370c      	adds	r7, #12
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <LL_ADC_REG_IsConversionOngoing>:
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d101      	bne.n	8002e0e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002e1c:	b590      	push	{r4, r7, lr}
 8002e1e:	b09f      	sub	sp, #124	; 0x7c
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e32:	2b01      	cmp	r3, #1
 8002e34:	d101      	bne.n	8002e3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e0be      	b.n	8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002e42:	2300      	movs	r3, #0
 8002e44:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002e46:	2300      	movs	r3, #0
 8002e48:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a5c      	ldr	r2, [pc, #368]	; (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d102      	bne.n	8002e5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002e54:	4b5b      	ldr	r3, [pc, #364]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	e001      	b.n	8002e5e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10b      	bne.n	8002e7c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e68:	f043 0220 	orr.w	r2, r3, #32
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e09d      	b.n	8002fb8 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ffb9 	bl	8002df6 <LL_ADC_REG_IsConversionOngoing>
 8002e84:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7ff ffb3 	bl	8002df6 <LL_ADC_REG_IsConversionOngoing>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d17f      	bne.n	8002f96 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d17c      	bne.n	8002f96 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a47      	ldr	r2, [pc, #284]	; (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d004      	beq.n	8002eb0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a46      	ldr	r2, [pc, #280]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d101      	bne.n	8002eb4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002eb0:	4b45      	ldr	r3, [pc, #276]	; (8002fc8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002eb2:	e000      	b.n	8002eb6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002eb4:	4b45      	ldr	r3, [pc, #276]	; (8002fcc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8002eb6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d039      	beq.n	8002f34 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002ec0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed0:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a3a      	ldr	r2, [pc, #232]	; (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d004      	beq.n	8002ee6 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a38      	ldr	r2, [pc, #224]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d10e      	bne.n	8002f04 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002ee6:	4836      	ldr	r0, [pc, #216]	; (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002ee8:	f7ff ff72 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002eec:	4604      	mov	r4, r0
 8002eee:	4835      	ldr	r0, [pc, #212]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002ef0:	f7ff ff6e 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4323      	orrs	r3, r4
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	e008      	b.n	8002f16 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002f04:	4832      	ldr	r0, [pc, #200]	; (8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002f06:	f7ff ff63 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf0c      	ite	eq
 8002f10:	2301      	moveq	r3, #1
 8002f12:	2300      	movne	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d047      	beq.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002f1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f1c:	689a      	ldr	r2, [r3, #8]
 8002f1e:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002f20:	4013      	ands	r3, r2
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	6811      	ldr	r1, [r2, #0]
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	6892      	ldr	r2, [r2, #8]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f30:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f32:	e03a      	b.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f3e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1e      	ldr	r2, [pc, #120]	; (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d004      	beq.n	8002f54 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1d      	ldr	r2, [pc, #116]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d10e      	bne.n	8002f72 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002f54:	481a      	ldr	r0, [pc, #104]	; (8002fc0 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002f56:	f7ff ff3b 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002f5a:	4604      	mov	r4, r0
 8002f5c:	4819      	ldr	r0, [pc, #100]	; (8002fc4 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002f5e:	f7ff ff37 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002f62:	4603      	mov	r3, r0
 8002f64:	4323      	orrs	r3, r4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	bf0c      	ite	eq
 8002f6a:	2301      	moveq	r3, #1
 8002f6c:	2300      	movne	r3, #0
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	e008      	b.n	8002f84 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002f72:	4817      	ldr	r0, [pc, #92]	; (8002fd0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002f74:	f7ff ff2c 	bl	8002dd0 <LL_ADC_IsEnabled>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf0c      	ite	eq
 8002f7e:	2301      	moveq	r3, #1
 8002f80:	2300      	movne	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d010      	beq.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f92:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002f94:	e009      	b.n	8002faa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f9a:	f043 0220 	orr.w	r2, r3, #32
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002fa8:	e000      	b.n	8002fac <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002faa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002fb4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	377c      	adds	r7, #124	; 0x7c
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd90      	pop	{r4, r7, pc}
 8002fc0:	40022000 	.word	0x40022000
 8002fc4:	40022100 	.word	0x40022100
 8002fc8:	40022300 	.word	0x40022300
 8002fcc:	58026300 	.word	0x58026300
 8002fd0:	58026000 	.word	0x58026000
 8002fd4:	fffff0e0 	.word	0xfffff0e0

08002fd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b085      	sub	sp, #20
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <__NVIC_SetPriorityGrouping+0x40>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003000:	4b06      	ldr	r3, [pc, #24]	; (800301c <__NVIC_SetPriorityGrouping+0x44>)
 8003002:	4313      	orrs	r3, r2
 8003004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003006:	4a04      	ldr	r2, [pc, #16]	; (8003018 <__NVIC_SetPriorityGrouping+0x40>)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	60d3      	str	r3, [r2, #12]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000ed00 	.word	0xe000ed00
 800301c:	05fa0000 	.word	0x05fa0000

08003020 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003024:	4b04      	ldr	r3, [pc, #16]	; (8003038 <__NVIC_GetPriorityGrouping+0x18>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 0307 	and.w	r3, r3, #7
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	4603      	mov	r3, r0
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003048:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800304c:	2b00      	cmp	r3, #0
 800304e:	db0a      	blt.n	8003066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	b2da      	uxtb	r2, r3
 8003054:	490c      	ldr	r1, [pc, #48]	; (8003088 <__NVIC_SetPriority+0x4c>)
 8003056:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800305a:	0112      	lsls	r2, r2, #4
 800305c:	b2d2      	uxtb	r2, r2
 800305e:	440b      	add	r3, r1
 8003060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003064:	e00a      	b.n	800307c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	4908      	ldr	r1, [pc, #32]	; (800308c <__NVIC_SetPriority+0x50>)
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	3b04      	subs	r3, #4
 8003074:	0112      	lsls	r2, r2, #4
 8003076:	b2d2      	uxtb	r2, r2
 8003078:	440b      	add	r3, r1
 800307a:	761a      	strb	r2, [r3, #24]
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	e000e100 	.word	0xe000e100
 800308c:	e000ed00 	.word	0xe000ed00

08003090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003090:	b480      	push	{r7}
 8003092:	b089      	sub	sp, #36	; 0x24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f1c3 0307 	rsb	r3, r3, #7
 80030aa:	2b04      	cmp	r3, #4
 80030ac:	bf28      	it	cs
 80030ae:	2304      	movcs	r3, #4
 80030b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3304      	adds	r3, #4
 80030b6:	2b06      	cmp	r3, #6
 80030b8:	d902      	bls.n	80030c0 <NVIC_EncodePriority+0x30>
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3b03      	subs	r3, #3
 80030be:	e000      	b.n	80030c2 <NVIC_EncodePriority+0x32>
 80030c0:	2300      	movs	r3, #0
 80030c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030c4:	f04f 32ff 	mov.w	r2, #4294967295
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43da      	mvns	r2, r3
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	401a      	ands	r2, r3
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030d8:	f04f 31ff 	mov.w	r1, #4294967295
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	fa01 f303 	lsl.w	r3, r1, r3
 80030e2:	43d9      	mvns	r1, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e8:	4313      	orrs	r3, r2
         );
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3724      	adds	r7, #36	; 0x24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
	...

080030f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3b01      	subs	r3, #1
 8003104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003108:	d301      	bcc.n	800310e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800310a:	2301      	movs	r3, #1
 800310c:	e00f      	b.n	800312e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800310e:	4a0a      	ldr	r2, [pc, #40]	; (8003138 <SysTick_Config+0x40>)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	3b01      	subs	r3, #1
 8003114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003116:	210f      	movs	r1, #15
 8003118:	f04f 30ff 	mov.w	r0, #4294967295
 800311c:	f7ff ff8e 	bl	800303c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003120:	4b05      	ldr	r3, [pc, #20]	; (8003138 <SysTick_Config+0x40>)
 8003122:	2200      	movs	r2, #0
 8003124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003126:	4b04      	ldr	r3, [pc, #16]	; (8003138 <SysTick_Config+0x40>)
 8003128:	2207      	movs	r2, #7
 800312a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3708      	adds	r7, #8
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	e000e010 	.word	0xe000e010

0800313c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff ff47 	bl	8002fd8 <__NVIC_SetPriorityGrouping>
}
 800314a:	bf00      	nop
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b086      	sub	sp, #24
 8003156:	af00      	add	r7, sp, #0
 8003158:	4603      	mov	r3, r0
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003160:	f7ff ff5e 	bl	8003020 <__NVIC_GetPriorityGrouping>
 8003164:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	6978      	ldr	r0, [r7, #20]
 800316c:	f7ff ff90 	bl	8003090 <NVIC_EncodePriority>
 8003170:	4602      	mov	r2, r0
 8003172:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003176:	4611      	mov	r1, r2
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff5f 	bl	800303c <__NVIC_SetPriority>
}
 800317e:	bf00      	nop
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b082      	sub	sp, #8
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ffb2 	bl	80030f8 <SysTick_Config>
 8003194:	4603      	mov	r3, r0
}
 8003196:	4618      	mov	r0, r3
 8003198:	3708      	adds	r7, #8
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
	...

080031a0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b098      	sub	sp, #96	; 0x60
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80031a8:	4a84      	ldr	r2, [pc, #528]	; (80033bc <HAL_FDCAN_Init+0x21c>)
 80031aa:	f107 030c 	add.w	r3, r7, #12
 80031ae:	4611      	mov	r1, r2
 80031b0:	224c      	movs	r2, #76	; 0x4c
 80031b2:	4618      	mov	r0, r3
 80031b4:	f006 fc16 	bl	80099e4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e1c6      	b.n	8003550 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a7e      	ldr	r2, [pc, #504]	; (80033c0 <HAL_FDCAN_Init+0x220>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d106      	bne.n	80031da <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80031d4:	461a      	mov	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fe f8d8 	bl	80013a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699a      	ldr	r2, [r3, #24]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0210 	bic.w	r2, r2, #16
 8003202:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003204:	f7fe fb74 	bl	80018f0 <HAL_GetTick>
 8003208:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800320a:	e014      	b.n	8003236 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800320c:	f7fe fb70 	bl	80018f0 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b0a      	cmp	r3, #10
 8003218:	d90d      	bls.n	8003236 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003220:	f043 0201 	orr.w	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2203      	movs	r2, #3
 800322e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e18c      	b.n	8003550 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	f003 0308 	and.w	r3, r3, #8
 8003240:	2b08      	cmp	r3, #8
 8003242:	d0e3      	beq.n	800320c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0201 	orr.w	r2, r2, #1
 8003252:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003254:	f7fe fb4c 	bl	80018f0 <HAL_GetTick>
 8003258:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800325a:	e014      	b.n	8003286 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800325c:	f7fe fb48 	bl	80018f0 <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	2b0a      	cmp	r3, #10
 8003268:	d90d      	bls.n	8003286 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003270:	f043 0201 	orr.w	r2, r3, #1
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2203      	movs	r2, #3
 800327e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e164      	b.n	8003550 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0e3      	beq.n	800325c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	699a      	ldr	r2, [r3, #24]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f042 0202 	orr.w	r2, r2, #2
 80032a2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	7c1b      	ldrb	r3, [r3, #16]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d108      	bne.n	80032be <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032ba:	619a      	str	r2, [r3, #24]
 80032bc:	e007      	b.n	80032ce <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	699a      	ldr	r2, [r3, #24]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032cc:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	7c5b      	ldrb	r3, [r3, #17]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d108      	bne.n	80032e8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699a      	ldr	r2, [r3, #24]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032e4:	619a      	str	r2, [r3, #24]
 80032e6:	e007      	b.n	80032f8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699a      	ldr	r2, [r3, #24]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80032f6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	7c9b      	ldrb	r3, [r3, #18]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d108      	bne.n	8003312 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800330e:	619a      	str	r2, [r3, #24]
 8003310:	e007      	b.n	8003322 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699a      	ldr	r2, [r3, #24]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003320:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	430a      	orrs	r2, r1
 8003336:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699a      	ldr	r2, [r3, #24]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003346:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	691a      	ldr	r2, [r3, #16]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0210 	bic.w	r2, r2, #16
 8003356:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d108      	bne.n	8003372 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0204 	orr.w	r2, r2, #4
 800336e:	619a      	str	r2, [r3, #24]
 8003370:	e030      	b.n	80033d4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d02c      	beq.n	80033d4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d020      	beq.n	80033c4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	699a      	ldr	r2, [r3, #24]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003390:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0210 	orr.w	r2, r2, #16
 80033a0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d114      	bne.n	80033d4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	699a      	ldr	r2, [r3, #24]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f042 0220 	orr.w	r2, r2, #32
 80033b8:	619a      	str	r2, [r3, #24]
 80033ba:	e00b      	b.n	80033d4 <HAL_FDCAN_Init+0x234>
 80033bc:	0800c37c 	.word	0x0800c37c
 80033c0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0220 	orr.w	r2, r2, #32
 80033d2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	699b      	ldr	r3, [r3, #24]
 80033d8:	3b01      	subs	r3, #1
 80033da:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	3b01      	subs	r3, #1
 80033e2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033e4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80033ec:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	3b01      	subs	r3, #1
 80033f6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80033fc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80033fe:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003408:	d115      	bne.n	8003436 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	3b01      	subs	r3, #1
 8003416:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003418:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	3b01      	subs	r3, #1
 8003420:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003422:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	3b01      	subs	r3, #1
 800342c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8003432:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003434:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00a      	beq.n	8003454 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800345c:	4413      	add	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d011      	beq.n	8003486 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800346a:	f023 0107 	bic.w	r1, r3, #7
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	3360      	adds	r3, #96	; 0x60
 8003476:	443b      	add	r3, r7
 8003478:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d011      	beq.n	80034b2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003496:	f023 0107 	bic.w	r1, r3, #7
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	3360      	adds	r3, #96	; 0x60
 80034a2:	443b      	add	r3, r7
 80034a4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d012      	beq.n	80034e0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80034c2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	3360      	adds	r3, #96	; 0x60
 80034ce:	443b      	add	r3, r7
 80034d0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80034d4:	011a      	lsls	r2, r3, #4
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d012      	beq.n	800350e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80034f0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	3360      	adds	r3, #96	; 0x60
 80034fc:	443b      	add	r3, r7
 80034fe:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003502:	021a      	lsls	r2, r3, #8
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a11      	ldr	r2, [pc, #68]	; (8003558 <HAL_FDCAN_Init+0x3b8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d107      	bne.n	8003528 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f022 0203 	bic.w	r2, r2, #3
 8003526:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f000 faef 	bl	8003b24 <FDCAN_CalcultateRamBlockAddresses>
 8003546:	4603      	mov	r3, r0
 8003548:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800354c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8003550:	4618      	mov	r0, r3
 8003552:	3760      	adds	r7, #96	; 0x60
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	4000a000 	.word	0x4000a000

0800355c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800355c:	b480      	push	{r7}
 800355e:	b087      	sub	sp, #28
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800356c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800356e:	7bfb      	ldrb	r3, [r7, #15]
 8003570:	2b01      	cmp	r3, #1
 8003572:	d002      	beq.n	800357a <HAL_FDCAN_ConfigFilter+0x1e>
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d157      	bne.n	800362a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d12b      	bne.n	80035da <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2b07      	cmp	r3, #7
 8003588:	d10d      	bne.n	80035a6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8003596:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800359c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800359e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80035a2:	617b      	str	r3, [r7, #20]
 80035a4:	e00e      	b.n	80035c4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80035b2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80035ba:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	697a      	ldr	r2, [r7, #20]
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	e025      	b.n	8003626 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	075a      	lsls	r2, r3, #29
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	2b07      	cmp	r3, #7
 80035ee:	d103      	bne.n	80035f8 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	699b      	ldr	r3, [r3, #24]
 80035f4:	613b      	str	r3, [r7, #16]
 80035f6:	e006      	b.n	8003606 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	079a      	lsls	r2, r3, #30
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	4313      	orrs	r3, r2
 8003604:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	3304      	adds	r3, #4
 800361e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8003626:	2300      	movs	r3, #0
 8003628:	e008      	b.n	800363c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003630:	f043 0202 	orr.w	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
  }
}
 800363c:	4618      	mov	r0, r3
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b01      	cmp	r3, #1
 800365a:	d111      	bne.n	8003680 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 800367c:	2300      	movs	r3, #0
 800367e:	e008      	b.n	8003692 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003686:	f043 0204 	orr.w	r2, r3, #4
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
  }
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b086      	sub	sp, #24
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d141      	bne.n	800373a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036be:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036cc:	f043 0220 	orr.w	r2, r3, #32
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e038      	b.n	800374c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80036e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d009      	beq.n	80036fe <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036f0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e026      	b.n	800374c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8003706:	0c1b      	lsrs	r3, r3, #16
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	68b9      	ldr	r1, [r7, #8]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 fb8b 	bl	8003e30 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2101      	movs	r1, #1
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	fa01 f202 	lsl.w	r2, r1, r2
 8003726:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800372a:	2201      	movs	r2, #1
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	409a      	lsls	r2, r3
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8003736:	2300      	movs	r3, #0
 8003738:	e008      	b.n	800374c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003740:	f043 0208 	orr.w	r2, r3, #8
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
  }
}
 800374c:	4618      	mov	r0, r3
 800374e:	3718      	adds	r7, #24
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8003754:	b480      	push	{r7}
 8003756:	b08b      	sub	sp, #44	; 0x2c
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800376c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800376e:	7efb      	ldrb	r3, [r7, #27]
 8003770:	2b02      	cmp	r3, #2
 8003772:	f040 814b 	bne.w	8003a0c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d14d      	bne.n	8003818 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003784:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d109      	bne.n	80037a0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003792:	f043 0220 	orr.w	r2, r3, #32
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e13e      	b.n	8003a1e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d109      	bne.n	80037c4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e12c      	b.n	8003a1e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037cc:	0e1b      	lsrs	r3, r3, #24
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d10b      	bne.n	80037ee <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80037de:	0fdb      	lsrs	r3, r3, #31
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037e8:	d101      	bne.n	80037ee <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80037ea:	2301      	movs	r3, #1
 80037ec:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037f6:	0a1b      	lsrs	r3, r3, #8
 80037f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037fc:	69fa      	ldr	r2, [r7, #28]
 80037fe:	4413      	add	r3, r2
 8003800:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380a:	69f9      	ldr	r1, [r7, #28]
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	4413      	add	r3, r2
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
 8003816:	e069      	b.n	80038ec <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b41      	cmp	r3, #65	; 0x41
 800381c:	d14d      	bne.n	80038ba <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003826:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d109      	bne.n	8003842 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003834:	f043 0220 	orr.w	r2, r3, #32
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e0ed      	b.n	8003a1e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800384a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003858:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e0db      	b.n	8003a1e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800386e:	0e1b      	lsrs	r3, r3, #24
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b01      	cmp	r3, #1
 8003876:	d10b      	bne.n	8003890 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003880:	0fdb      	lsrs	r3, r3, #31
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800388a:	d101      	bne.n	8003890 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800388c:	2301      	movs	r3, #1
 800388e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003898:	0a1b      	lsrs	r3, r3, #8
 800389a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800389e:	69fa      	ldr	r2, [r7, #28]
 80038a0:	4413      	add	r3, r2
 80038a2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ac:	69f9      	ldr	r1, [r7, #28]
 80038ae:	fb01 f303 	mul.w	r3, r1, r3
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	627b      	str	r3, [r7, #36]	; 0x24
 80038b8:	e018      	b.n	80038ec <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d309      	bcc.n	80038d8 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038ca:	f043 0220 	orr.w	r2, r3, #32
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e0a2      	b.n	8003a1e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e0:	68b9      	ldr	r1, [r7, #8]
 80038e2:	fb01 f303 	mul.w	r3, r1, r3
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d107      	bne.n	8003910 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	0c9b      	lsrs	r3, r3, #18
 8003906:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e005      	b.n	800391c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8003934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003936:	3304      	adds	r3, #4
 8003938:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800393a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	b29a      	uxth	r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8003944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8003950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8003968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	0e1b      	lsrs	r3, r3, #24
 800396e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8003976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	0fda      	lsrs	r2, r3, #31
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	3304      	adds	r3, #4
 8003984:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800398a:	2300      	movs	r3, #0
 800398c:	623b      	str	r3, [r7, #32]
 800398e:	e00a      	b.n	80039a6 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003990:	697a      	ldr	r2, [r7, #20]
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	441a      	add	r2, r3
 8003996:	6839      	ldr	r1, [r7, #0]
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	440b      	add	r3, r1
 800399c:	7812      	ldrb	r2, [r2, #0]
 800399e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	3301      	adds	r3, #1
 80039a4:	623b      	str	r3, [r7, #32]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	0c1b      	lsrs	r3, r3, #16
 80039ac:	4a1f      	ldr	r2, [pc, #124]	; (8003a2c <HAL_FDCAN_GetRxMessage+0x2d8>)
 80039ae:	5cd3      	ldrb	r3, [r2, r3]
 80039b0:	461a      	mov	r2, r3
 80039b2:	6a3b      	ldr	r3, [r7, #32]
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d3eb      	bcc.n	8003990 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b40      	cmp	r3, #64	; 0x40
 80039bc:	d105      	bne.n	80039ca <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80039c8:	e01e      	b.n	8003a08 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b41      	cmp	r3, #65	; 0x41
 80039ce:	d105      	bne.n	80039dc <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	69fa      	ldr	r2, [r7, #28]
 80039d6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80039da:	e015      	b.n	8003a08 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	2b1f      	cmp	r3, #31
 80039e0:	d808      	bhi.n	80039f4 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	2101      	movs	r1, #1
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	fa01 f202 	lsl.w	r2, r1, r2
 80039ee:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80039f2:	e009      	b.n	8003a08 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	f003 021f 	and.w	r2, r3, #31
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2101      	movs	r1, #1
 8003a00:	fa01 f202 	lsl.w	r2, r1, r2
 8003a04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	e008      	b.n	8003a1e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a12:	f043 0208 	orr.w	r2, r3, #8
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
  }
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	372c      	adds	r7, #44	; 0x2c
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	0800c3d8 	.word	0x0800c3d8

08003a30 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b087      	sub	sp, #28
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003a42:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003a44:	7dfb      	ldrb	r3, [r7, #23]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d002      	beq.n	8003a50 <HAL_FDCAN_ActivateNotification+0x20>
 8003a4a:	7dfb      	ldrb	r3, [r7, #23]
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d155      	bne.n	8003afc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d108      	bne.n	8003a70 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f042 0201 	orr.w	r2, r2, #1
 8003a6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a6e:	e014      	b.n	8003a9a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	68ba      	ldr	r2, [r7, #8]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d108      	bne.n	8003a92 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f042 0202 	orr.w	r2, r2, #2
 8003a8e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003a90:	e003      	b.n	8003a9a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2203      	movs	r2, #3
 8003a98:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d009      	beq.n	8003ab8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d009      	beq.n	8003ad6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	687a      	ldr	r2, [r7, #4]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <HAL_FDCAN_ActivateNotification+0xec>)
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	6812      	ldr	r2, [r2, #0]
 8003ae6:	430b      	orrs	r3, r1
 8003ae8:	6553      	str	r3, [r2, #84]	; 0x54
 8003aea:	4b0d      	ldr	r3, [pc, #52]	; (8003b20 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003aec:	695a      	ldr	r2, [r3, #20]
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	0f9b      	lsrs	r3, r3, #30
 8003af2:	490b      	ldr	r1, [pc, #44]	; (8003b20 <HAL_FDCAN_ActivateNotification+0xf0>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	e008      	b.n	8003b0e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003b02:	f043 0202 	orr.w	r2, r3, #2
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
  }
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	3fcfffff 	.word	0x3fcfffff
 8003b20:	4000a800 	.word	0x4000a800

08003b24 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b30:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003b3a:	4ba7      	ldr	r3, [pc, #668]	; (8003dd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	0091      	lsls	r1, r2, #2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6812      	ldr	r2, [r2, #0]
 8003b46:	430b      	orrs	r3, r1
 8003b48:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b54:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	041a      	lsls	r2, r3, #16
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	4413      	add	r3, r2
 8003b70:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003b7a:	4b97      	ldr	r3, [pc, #604]	; (8003dd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	0091      	lsls	r1, r2, #2
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	430b      	orrs	r3, r1
 8003b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b94:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	041a      	lsls	r2, r3, #16
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003bbc:	4b86      	ldr	r3, [pc, #536]	; (8003dd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	0091      	lsls	r1, r2, #2
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	6812      	ldr	r2, [r2, #0]
 8003bc8:	430b      	orrs	r3, r1
 8003bca:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003bd6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	041a      	lsls	r2, r3, #16
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bee:	687a      	ldr	r2, [r7, #4]
 8003bf0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003c04:	4b74      	ldr	r3, [pc, #464]	; (8003dd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c06:	4013      	ands	r3, r2
 8003c08:	68ba      	ldr	r2, [r7, #8]
 8003c0a:	0091      	lsls	r1, r2, #2
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	6812      	ldr	r2, [r2, #0]
 8003c10:	430b      	orrs	r3, r1
 8003c12:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c1e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c26:	041a      	lsls	r2, r3, #16
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003c3a:	fb02 f303 	mul.w	r3, r2, r3
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	4413      	add	r3, r2
 8003c42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003c4c:	4b62      	ldr	r3, [pc, #392]	; (8003dd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c4e:	4013      	ands	r3, r2
 8003c50:	68ba      	ldr	r2, [r7, #8]
 8003c52:	0091      	lsls	r1, r2, #2
 8003c54:	687a      	ldr	r2, [r7, #4]
 8003c56:	6812      	ldr	r2, [r2, #0]
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003c66:	fb02 f303 	mul.w	r3, r2, r3
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003c78:	4b57      	ldr	r3, [pc, #348]	; (8003dd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	0091      	lsls	r1, r2, #2
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	430b      	orrs	r3, r1
 8003c86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003c92:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9a:	041a      	lsls	r2, r3, #16
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	4413      	add	r3, r2
 8003cb0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003cba:	4b47      	ldr	r3, [pc, #284]	; (8003dd8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	68ba      	ldr	r2, [r7, #8]
 8003cc0:	0091      	lsls	r1, r2, #2
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	6812      	ldr	r2, [r2, #0]
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003cd4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cdc:	041a      	lsls	r2, r3, #16
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003cf0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cf8:	061a      	lsls	r2, r3, #24
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d08:	4b34      	ldr	r3, [pc, #208]	; (8003ddc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8003d0a:	4413      	add	r3, r2
 8003d0c:	009a      	lsls	r2, r3, #2
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	441a      	add	r2, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	441a      	add	r2, r3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003d3e:	fb01 f303 	mul.w	r3, r1, r3
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	441a      	add	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003d56:	fb01 f303 	mul.w	r3, r1, r3
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	441a      	add	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003d6e:	fb01 f303 	mul.w	r3, r1, r3
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	441a      	add	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	00db      	lsls	r3, r3, #3
 8003d88:	441a      	add	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	441a      	add	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003dba:	fb01 f303 	mul.w	r3, r1, r3
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	441a      	add	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dce:	4a04      	ldr	r2, [pc, #16]	; (8003de0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d915      	bls.n	8003e00 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003dd4:	e006      	b.n	8003de4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003dd6:	bf00      	nop
 8003dd8:	ffff0003 	.word	0xffff0003
 8003ddc:	10002b00 	.word	0x10002b00
 8003de0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dea:	f043 0220 	orr.w	r2, r3, #32
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2203      	movs	r2, #3
 8003df8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e010      	b.n	8003e22 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	e005      	b.n	8003e14 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3304      	adds	r3, #4
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d3f3      	bcc.n	8003e08 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop

08003e30 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b089      	sub	sp, #36	; 0x24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10a      	bne.n	8003e5c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8003e4e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61fb      	str	r3, [r7, #28]
 8003e5a:	e00a      	b.n	8003e72 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8003e64:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8003e6a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003e6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e70:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
 8003e76:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003e7c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8003e82:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8003e88:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e9c:	6839      	ldr	r1, [r7, #0]
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	4413      	add	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	69fa      	ldr	r2, [r7, #28]
 8003eac:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	3304      	adds	r3, #4
 8003eb2:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	e020      	b.n	8003f08 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	3303      	adds	r3, #3
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	4413      	add	r3, r2
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	3302      	adds	r3, #2
 8003ed6:	6879      	ldr	r1, [r7, #4]
 8003ed8:	440b      	add	r3, r1
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003ede:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	440b      	add	r3, r1
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8003eec:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003eee:	6879      	ldr	r1, [r7, #4]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	440a      	add	r2, r1
 8003ef4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8003ef6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	3304      	adds	r3, #4
 8003f00:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	3304      	adds	r3, #4
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	4a06      	ldr	r2, [pc, #24]	; (8003f28 <FDCAN_CopyMessageToRAM+0xf8>)
 8003f10:	5cd3      	ldrb	r3, [r2, r3]
 8003f12:	461a      	mov	r2, r3
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d3d5      	bcc.n	8003ec6 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	bf00      	nop
 8003f1e:	3724      	adds	r7, #36	; 0x24
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	0800c3d8 	.word	0x0800c3d8

08003f2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b089      	sub	sp, #36	; 0x24
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003f3a:	4b89      	ldr	r3, [pc, #548]	; (8004160 <HAL_GPIO_Init+0x234>)
 8003f3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f3e:	e194      	b.n	800426a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	2101      	movs	r1, #1
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	fa01 f303 	lsl.w	r3, r1, r3
 8003f4c:	4013      	ands	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 8186 	beq.w	8004264 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d005      	beq.n	8003f70 <HAL_GPIO_Init+0x44>
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d130      	bne.n	8003fd2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	2203      	movs	r2, #3
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4013      	ands	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	005b      	lsls	r3, r3, #1
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43db      	mvns	r3, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	091b      	lsrs	r3, r3, #4
 8003fbc:	f003 0201 	and.w	r2, r3, #1
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	69ba      	ldr	r2, [r7, #24]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	2b03      	cmp	r3, #3
 8003fdc:	d017      	beq.n	800400e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	2203      	movs	r2, #3
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	689a      	ldr	r2, [r3, #8]
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4313      	orrs	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d123      	bne.n	8004062 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	08da      	lsrs	r2, r3, #3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3208      	adds	r2, #8
 8004022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	220f      	movs	r2, #15
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43db      	mvns	r3, r3
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	4013      	ands	r3, r2
 800403c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	691a      	ldr	r2, [r3, #16]
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f003 0307 	and.w	r3, r3, #7
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	fa02 f303 	lsl.w	r3, r2, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4313      	orrs	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	08da      	lsrs	r2, r3, #3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3208      	adds	r2, #8
 800405c:	69b9      	ldr	r1, [r7, #24]
 800405e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	2203      	movs	r2, #3
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4013      	ands	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f003 0203 	and.w	r2, r3, #3
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4313      	orrs	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	f000 80e0 	beq.w	8004264 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040a4:	4b2f      	ldr	r3, [pc, #188]	; (8004164 <HAL_GPIO_Init+0x238>)
 80040a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040aa:	4a2e      	ldr	r2, [pc, #184]	; (8004164 <HAL_GPIO_Init+0x238>)
 80040ac:	f043 0302 	orr.w	r3, r3, #2
 80040b0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80040b4:	4b2b      	ldr	r3, [pc, #172]	; (8004164 <HAL_GPIO_Init+0x238>)
 80040b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	60fb      	str	r3, [r7, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040c2:	4a29      	ldr	r2, [pc, #164]	; (8004168 <HAL_GPIO_Init+0x23c>)
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	089b      	lsrs	r3, r3, #2
 80040c8:	3302      	adds	r3, #2
 80040ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	220f      	movs	r2, #15
 80040da:	fa02 f303 	lsl.w	r3, r2, r3
 80040de:	43db      	mvns	r3, r3
 80040e0:	69ba      	ldr	r2, [r7, #24]
 80040e2:	4013      	ands	r3, r2
 80040e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a20      	ldr	r2, [pc, #128]	; (800416c <HAL_GPIO_Init+0x240>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d052      	beq.n	8004194 <HAL_GPIO_Init+0x268>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a1f      	ldr	r2, [pc, #124]	; (8004170 <HAL_GPIO_Init+0x244>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d031      	beq.n	800415a <HAL_GPIO_Init+0x22e>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a1e      	ldr	r2, [pc, #120]	; (8004174 <HAL_GPIO_Init+0x248>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d02b      	beq.n	8004156 <HAL_GPIO_Init+0x22a>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a1d      	ldr	r2, [pc, #116]	; (8004178 <HAL_GPIO_Init+0x24c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d025      	beq.n	8004152 <HAL_GPIO_Init+0x226>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a1c      	ldr	r2, [pc, #112]	; (800417c <HAL_GPIO_Init+0x250>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d01f      	beq.n	800414e <HAL_GPIO_Init+0x222>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a1b      	ldr	r2, [pc, #108]	; (8004180 <HAL_GPIO_Init+0x254>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d019      	beq.n	800414a <HAL_GPIO_Init+0x21e>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a1a      	ldr	r2, [pc, #104]	; (8004184 <HAL_GPIO_Init+0x258>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d013      	beq.n	8004146 <HAL_GPIO_Init+0x21a>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a19      	ldr	r2, [pc, #100]	; (8004188 <HAL_GPIO_Init+0x25c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d00d      	beq.n	8004142 <HAL_GPIO_Init+0x216>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a18      	ldr	r2, [pc, #96]	; (800418c <HAL_GPIO_Init+0x260>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d007      	beq.n	800413e <HAL_GPIO_Init+0x212>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a17      	ldr	r2, [pc, #92]	; (8004190 <HAL_GPIO_Init+0x264>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d101      	bne.n	800413a <HAL_GPIO_Init+0x20e>
 8004136:	2309      	movs	r3, #9
 8004138:	e02d      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 800413a:	230a      	movs	r3, #10
 800413c:	e02b      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 800413e:	2308      	movs	r3, #8
 8004140:	e029      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 8004142:	2307      	movs	r3, #7
 8004144:	e027      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 8004146:	2306      	movs	r3, #6
 8004148:	e025      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 800414a:	2305      	movs	r3, #5
 800414c:	e023      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 800414e:	2304      	movs	r3, #4
 8004150:	e021      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 8004152:	2303      	movs	r3, #3
 8004154:	e01f      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 8004156:	2302      	movs	r3, #2
 8004158:	e01d      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 800415a:	2301      	movs	r3, #1
 800415c:	e01b      	b.n	8004196 <HAL_GPIO_Init+0x26a>
 800415e:	bf00      	nop
 8004160:	58000080 	.word	0x58000080
 8004164:	58024400 	.word	0x58024400
 8004168:	58000400 	.word	0x58000400
 800416c:	58020000 	.word	0x58020000
 8004170:	58020400 	.word	0x58020400
 8004174:	58020800 	.word	0x58020800
 8004178:	58020c00 	.word	0x58020c00
 800417c:	58021000 	.word	0x58021000
 8004180:	58021400 	.word	0x58021400
 8004184:	58021800 	.word	0x58021800
 8004188:	58021c00 	.word	0x58021c00
 800418c:	58022000 	.word	0x58022000
 8004190:	58022400 	.word	0x58022400
 8004194:	2300      	movs	r3, #0
 8004196:	69fa      	ldr	r2, [r7, #28]
 8004198:	f002 0203 	and.w	r2, r2, #3
 800419c:	0092      	lsls	r2, r2, #2
 800419e:	4093      	lsls	r3, r2
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041a6:	4938      	ldr	r1, [pc, #224]	; (8004288 <HAL_GPIO_Init+0x35c>)
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	089b      	lsrs	r3, r3, #2
 80041ac:	3302      	adds	r3, #2
 80041ae:	69ba      	ldr	r2, [r7, #24]
 80041b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80041b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	43db      	mvns	r3, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4013      	ands	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80041da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80041e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	43db      	mvns	r3, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4013      	ands	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d003      	beq.n	8004208 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004208:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	43db      	mvns	r3, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4013      	ands	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004228:	2b00      	cmp	r3, #0
 800422a:	d003      	beq.n	8004234 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	4313      	orrs	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	43db      	mvns	r3, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4013      	ands	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	4313      	orrs	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	69ba      	ldr	r2, [r7, #24]
 8004262:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	3301      	adds	r3, #1
 8004268:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	69fb      	ldr	r3, [r7, #28]
 8004270:	fa22 f303 	lsr.w	r3, r2, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	f47f ae63 	bne.w	8003f40 <HAL_GPIO_Init+0x14>
  }
}
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	3724      	adds	r7, #36	; 0x24
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	58000400 	.word	0x58000400

0800428c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	807b      	strh	r3, [r7, #2]
 8004298:	4613      	mov	r3, r2
 800429a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800429c:	787b      	ldrb	r3, [r7, #1]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d003      	beq.n	80042aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042a2:	887a      	ldrh	r2, [r7, #2]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80042a8:	e003      	b.n	80042b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80042aa:	887b      	ldrh	r3, [r7, #2]
 80042ac:	041a      	lsls	r2, r3, #16
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	619a      	str	r2, [r3, #24]
}
 80042b2:	bf00      	nop
 80042b4:	370c      	adds	r7, #12
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
	...

080042c0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b083      	sub	sp, #12
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80042c8:	4a08      	ldr	r2, [pc, #32]	; (80042ec <HAL_HSEM_FastTake+0x2c>)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3320      	adds	r3, #32
 80042ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042d2:	4a07      	ldr	r2, [pc, #28]	; (80042f0 <HAL_HSEM_FastTake+0x30>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d101      	bne.n	80042dc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	e000      	b.n	80042de <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
}
 80042de:	4618      	mov	r0, r3
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	58026400 	.word	0x58026400
 80042f0:	80000300 	.word	0x80000300

080042f4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80042fe:	4906      	ldr	r1, [pc, #24]	; (8004318 <HAL_HSEM_Release+0x24>)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800430c:	bf00      	nop
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr
 8004318:	58026400 	.word	0x58026400

0800431c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004324:	4b29      	ldr	r3, [pc, #164]	; (80043cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	2b06      	cmp	r3, #6
 800432e:	d00a      	beq.n	8004346 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004330:	4b26      	ldr	r3, [pc, #152]	; (80043cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	429a      	cmp	r2, r3
 800433c:	d001      	beq.n	8004342 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e040      	b.n	80043c4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004342:	2300      	movs	r3, #0
 8004344:	e03e      	b.n	80043c4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004346:	4b21      	ldr	r3, [pc, #132]	; (80043cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800434e:	491f      	ldr	r1, [pc, #124]	; (80043cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4313      	orrs	r3, r2
 8004354:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004356:	f7fd facb 	bl	80018f0 <HAL_GetTick>
 800435a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800435c:	e009      	b.n	8004372 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800435e:	f7fd fac7 	bl	80018f0 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800436c:	d901      	bls.n	8004372 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e028      	b.n	80043c4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004372:	4b16      	ldr	r3, [pc, #88]	; (80043cc <HAL_PWREx_ConfigSupply+0xb0>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800437a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800437e:	d1ee      	bne.n	800435e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b1e      	cmp	r3, #30
 8004384:	d008      	beq.n	8004398 <HAL_PWREx_ConfigSupply+0x7c>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b2e      	cmp	r3, #46	; 0x2e
 800438a:	d005      	beq.n	8004398 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b1d      	cmp	r3, #29
 8004390:	d002      	beq.n	8004398 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b2d      	cmp	r3, #45	; 0x2d
 8004396:	d114      	bne.n	80043c2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004398:	f7fd faaa 	bl	80018f0 <HAL_GetTick>
 800439c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800439e:	e009      	b.n	80043b4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80043a0:	f7fd faa6 	bl	80018f0 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043ae:	d901      	bls.n	80043b4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e007      	b.n	80043c4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <HAL_PWREx_ConfigSupply+0xb0>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043c0:	d1ee      	bne.n	80043a0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3710      	adds	r7, #16
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	58024800 	.word	0x58024800

080043d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b08c      	sub	sp, #48	; 0x30
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	f000 bc1d 	b.w	8004c1e <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 8087 	beq.w	8004500 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043f2:	4b99      	ldr	r3, [pc, #612]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043fc:	4b96      	ldr	r3, [pc, #600]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004404:	2b10      	cmp	r3, #16
 8004406:	d007      	beq.n	8004418 <HAL_RCC_OscConfig+0x48>
 8004408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440a:	2b18      	cmp	r3, #24
 800440c:	d110      	bne.n	8004430 <HAL_RCC_OscConfig+0x60>
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d10b      	bne.n	8004430 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004418:	4b8f      	ldr	r3, [pc, #572]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004420:	2b00      	cmp	r3, #0
 8004422:	d06c      	beq.n	80044fe <HAL_RCC_OscConfig+0x12e>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d168      	bne.n	80044fe <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e3f6      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004438:	d106      	bne.n	8004448 <HAL_RCC_OscConfig+0x78>
 800443a:	4b87      	ldr	r3, [pc, #540]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a86      	ldr	r2, [pc, #536]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 8004440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	e02e      	b.n	80044a6 <HAL_RCC_OscConfig+0xd6>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10c      	bne.n	800446a <HAL_RCC_OscConfig+0x9a>
 8004450:	4b81      	ldr	r3, [pc, #516]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a80      	ldr	r2, [pc, #512]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 8004456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	4b7e      	ldr	r3, [pc, #504]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a7d      	ldr	r2, [pc, #500]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 8004462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	e01d      	b.n	80044a6 <HAL_RCC_OscConfig+0xd6>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004472:	d10c      	bne.n	800448e <HAL_RCC_OscConfig+0xbe>
 8004474:	4b78      	ldr	r3, [pc, #480]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a77      	ldr	r2, [pc, #476]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 800447a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800447e:	6013      	str	r3, [r2, #0]
 8004480:	4b75      	ldr	r3, [pc, #468]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a74      	ldr	r2, [pc, #464]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 8004486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	e00b      	b.n	80044a6 <HAL_RCC_OscConfig+0xd6>
 800448e:	4b72      	ldr	r3, [pc, #456]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a71      	ldr	r2, [pc, #452]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 8004494:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	4b6f      	ldr	r3, [pc, #444]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a6e      	ldr	r2, [pc, #440]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 80044a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d013      	beq.n	80044d6 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ae:	f7fd fa1f 	bl	80018f0 <HAL_GetTick>
 80044b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044b4:	e008      	b.n	80044c8 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044b6:	f7fd fa1b 	bl	80018f0 <HAL_GetTick>
 80044ba:	4602      	mov	r2, r0
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	2b64      	cmp	r3, #100	; 0x64
 80044c2:	d901      	bls.n	80044c8 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80044c4:	2303      	movs	r3, #3
 80044c6:	e3aa      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044c8:	4b63      	ldr	r3, [pc, #396]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d0f0      	beq.n	80044b6 <HAL_RCC_OscConfig+0xe6>
 80044d4:	e014      	b.n	8004500 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d6:	f7fd fa0b 	bl	80018f0 <HAL_GetTick>
 80044da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044dc:	e008      	b.n	80044f0 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044de:	f7fd fa07 	bl	80018f0 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b64      	cmp	r3, #100	; 0x64
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e396      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80044f0:	4b59      	ldr	r3, [pc, #356]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f0      	bne.n	80044de <HAL_RCC_OscConfig+0x10e>
 80044fc:	e000      	b.n	8004500 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 80cb 	beq.w	80046a4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800450e:	4b52      	ldr	r3, [pc, #328]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004516:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004518:	4b4f      	ldr	r3, [pc, #316]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 800451a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451c:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d007      	beq.n	8004534 <HAL_RCC_OscConfig+0x164>
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	2b18      	cmp	r3, #24
 8004528:	d156      	bne.n	80045d8 <HAL_RCC_OscConfig+0x208>
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d151      	bne.n	80045d8 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004534:	4b48      	ldr	r3, [pc, #288]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0304 	and.w	r3, r3, #4
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_RCC_OscConfig+0x17c>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e368      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800454c:	4b42      	ldr	r3, [pc, #264]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f023 0219 	bic.w	r2, r3, #25
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	493f      	ldr	r1, [pc, #252]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800455e:	f7fd f9c7 	bl	80018f0 <HAL_GetTick>
 8004562:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004566:	f7fd f9c3 	bl	80018f0 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b02      	cmp	r3, #2
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e352      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004578:	4b37      	ldr	r3, [pc, #220]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0304 	and.w	r3, r3, #4
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0f0      	beq.n	8004566 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004584:	f7fd f9e4 	bl	8001950 <HAL_GetREVID>
 8004588:	4603      	mov	r3, r0
 800458a:	f241 0203 	movw	r2, #4099	; 0x1003
 800458e:	4293      	cmp	r3, r2
 8004590:	d817      	bhi.n	80045c2 <HAL_RCC_OscConfig+0x1f2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	2b40      	cmp	r3, #64	; 0x40
 8004598:	d108      	bne.n	80045ac <HAL_RCC_OscConfig+0x1dc>
 800459a:	4b2f      	ldr	r3, [pc, #188]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80045a2:	4a2d      	ldr	r2, [pc, #180]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 80045a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045a8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045aa:	e07b      	b.n	80046a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ac:	4b2a      	ldr	r3, [pc, #168]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	031b      	lsls	r3, r3, #12
 80045ba:	4927      	ldr	r1, [pc, #156]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045c0:	e070      	b.n	80046a4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c2:	4b25      	ldr	r3, [pc, #148]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	061b      	lsls	r3, r3, #24
 80045d0:	4921      	ldr	r1, [pc, #132]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045d6:	e065      	b.n	80046a4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d048      	beq.n	8004672 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80045e0:	4b1d      	ldr	r3, [pc, #116]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f023 0219 	bic.w	r2, r3, #25
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	491a      	ldr	r1, [pc, #104]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f2:	f7fd f97d 	bl	80018f0 <HAL_GetTick>
 80045f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045f8:	e008      	b.n	800460c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045fa:	f7fd f979 	bl	80018f0 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	2b02      	cmp	r3, #2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e308      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800460c:	4b12      	ldr	r3, [pc, #72]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0304 	and.w	r3, r3, #4
 8004614:	2b00      	cmp	r3, #0
 8004616:	d0f0      	beq.n	80045fa <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004618:	f7fd f99a 	bl	8001950 <HAL_GetREVID>
 800461c:	4603      	mov	r3, r0
 800461e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004622:	4293      	cmp	r3, r2
 8004624:	d81a      	bhi.n	800465c <HAL_RCC_OscConfig+0x28c>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	2b40      	cmp	r3, #64	; 0x40
 800462c:	d108      	bne.n	8004640 <HAL_RCC_OscConfig+0x270>
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004636:	4a08      	ldr	r2, [pc, #32]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 8004638:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800463c:	6053      	str	r3, [r2, #4]
 800463e:	e031      	b.n	80046a4 <HAL_RCC_OscConfig+0x2d4>
 8004640:	4b05      	ldr	r3, [pc, #20]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	031b      	lsls	r3, r3, #12
 800464e:	4902      	ldr	r1, [pc, #8]	; (8004658 <HAL_RCC_OscConfig+0x288>)
 8004650:	4313      	orrs	r3, r2
 8004652:	604b      	str	r3, [r1, #4]
 8004654:	e026      	b.n	80046a4 <HAL_RCC_OscConfig+0x2d4>
 8004656:	bf00      	nop
 8004658:	58024400 	.word	0x58024400
 800465c:	4b9a      	ldr	r3, [pc, #616]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	691b      	ldr	r3, [r3, #16]
 8004668:	061b      	lsls	r3, r3, #24
 800466a:	4997      	ldr	r1, [pc, #604]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
 8004670:	e018      	b.n	80046a4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004672:	4b95      	ldr	r3, [pc, #596]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a94      	ldr	r2, [pc, #592]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 8004678:	f023 0301 	bic.w	r3, r3, #1
 800467c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467e:	f7fd f937 	bl	80018f0 <HAL_GetTick>
 8004682:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004684:	e008      	b.n	8004698 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004686:	f7fd f933 	bl	80018f0 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	1ad3      	subs	r3, r2, r3
 8004690:	2b02      	cmp	r3, #2
 8004692:	d901      	bls.n	8004698 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004694:	2303      	movs	r3, #3
 8004696:	e2c2      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004698:	4b8b      	ldr	r3, [pc, #556]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1f0      	bne.n	8004686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0310 	and.w	r3, r3, #16
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 80a9 	beq.w	8004804 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046b2:	4b85      	ldr	r3, [pc, #532]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80046ba:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80046bc:	4b82      	ldr	r3, [pc, #520]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 80046be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046c0:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d007      	beq.n	80046d8 <HAL_RCC_OscConfig+0x308>
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	2b18      	cmp	r3, #24
 80046cc:	d13a      	bne.n	8004744 <HAL_RCC_OscConfig+0x374>
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f003 0303 	and.w	r3, r3, #3
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d135      	bne.n	8004744 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80046d8:	4b7b      	ldr	r3, [pc, #492]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_RCC_OscConfig+0x320>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	69db      	ldr	r3, [r3, #28]
 80046e8:	2b80      	cmp	r3, #128	; 0x80
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e296      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80046f0:	f7fd f92e 	bl	8001950 <HAL_GetREVID>
 80046f4:	4603      	mov	r3, r0
 80046f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d817      	bhi.n	800472e <HAL_RCC_OscConfig+0x35e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	2b20      	cmp	r3, #32
 8004704:	d108      	bne.n	8004718 <HAL_RCC_OscConfig+0x348>
 8004706:	4b70      	ldr	r3, [pc, #448]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800470e:	4a6e      	ldr	r2, [pc, #440]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 8004710:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004714:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004716:	e075      	b.n	8004804 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004718:	4b6b      	ldr	r3, [pc, #428]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	069b      	lsls	r3, r3, #26
 8004726:	4968      	ldr	r1, [pc, #416]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 8004728:	4313      	orrs	r3, r2
 800472a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800472c:	e06a      	b.n	8004804 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800472e:	4b66      	ldr	r3, [pc, #408]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	061b      	lsls	r3, r3, #24
 800473c:	4962      	ldr	r1, [pc, #392]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 800473e:	4313      	orrs	r3, r2
 8004740:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004742:	e05f      	b.n	8004804 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d042      	beq.n	80047d2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800474c:	4b5e      	ldr	r3, [pc, #376]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a5d      	ldr	r2, [pc, #372]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 8004752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004756:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004758:	f7fd f8ca 	bl	80018f0 <HAL_GetTick>
 800475c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800475e:	e008      	b.n	8004772 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004760:	f7fd f8c6 	bl	80018f0 <HAL_GetTick>
 8004764:	4602      	mov	r2, r0
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	1ad3      	subs	r3, r2, r3
 800476a:	2b02      	cmp	r3, #2
 800476c:	d901      	bls.n	8004772 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800476e:	2303      	movs	r3, #3
 8004770:	e255      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004772:	4b55      	ldr	r3, [pc, #340]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477a:	2b00      	cmp	r3, #0
 800477c:	d0f0      	beq.n	8004760 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800477e:	f7fd f8e7 	bl	8001950 <HAL_GetREVID>
 8004782:	4603      	mov	r3, r0
 8004784:	f241 0203 	movw	r2, #4099	; 0x1003
 8004788:	4293      	cmp	r3, r2
 800478a:	d817      	bhi.n	80047bc <HAL_RCC_OscConfig+0x3ec>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	2b20      	cmp	r3, #32
 8004792:	d108      	bne.n	80047a6 <HAL_RCC_OscConfig+0x3d6>
 8004794:	4b4c      	ldr	r3, [pc, #304]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800479c:	4a4a      	ldr	r2, [pc, #296]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 800479e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047a2:	6053      	str	r3, [r2, #4]
 80047a4:	e02e      	b.n	8004804 <HAL_RCC_OscConfig+0x434>
 80047a6:	4b48      	ldr	r3, [pc, #288]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	069b      	lsls	r3, r3, #26
 80047b4:	4944      	ldr	r1, [pc, #272]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	604b      	str	r3, [r1, #4]
 80047ba:	e023      	b.n	8004804 <HAL_RCC_OscConfig+0x434>
 80047bc:	4b42      	ldr	r3, [pc, #264]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a1b      	ldr	r3, [r3, #32]
 80047c8:	061b      	lsls	r3, r3, #24
 80047ca:	493f      	ldr	r1, [pc, #252]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60cb      	str	r3, [r1, #12]
 80047d0:	e018      	b.n	8004804 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80047d2:	4b3d      	ldr	r3, [pc, #244]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a3c      	ldr	r2, [pc, #240]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 80047d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047de:	f7fd f887 	bl	80018f0 <HAL_GetTick>
 80047e2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047e4:	e008      	b.n	80047f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80047e6:	f7fd f883 	bl	80018f0 <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ee:	1ad3      	subs	r3, r2, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d901      	bls.n	80047f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80047f4:	2303      	movs	r3, #3
 80047f6:	e212      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80047f8:	4b33      	ldr	r3, [pc, #204]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d1f0      	bne.n	80047e6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0308 	and.w	r3, r3, #8
 800480c:	2b00      	cmp	r3, #0
 800480e:	d036      	beq.n	800487e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d019      	beq.n	800484c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004818:	4b2b      	ldr	r3, [pc, #172]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 800481a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800481c:	4a2a      	ldr	r2, [pc, #168]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004824:	f7fd f864 	bl	80018f0 <HAL_GetTick>
 8004828:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800482a:	e008      	b.n	800483e <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800482c:	f7fd f860 	bl	80018f0 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	2b02      	cmp	r3, #2
 8004838:	d901      	bls.n	800483e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e1ef      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800483e:	4b22      	ldr	r3, [pc, #136]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 8004840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0f0      	beq.n	800482c <HAL_RCC_OscConfig+0x45c>
 800484a:	e018      	b.n	800487e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800484c:	4b1e      	ldr	r3, [pc, #120]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 800484e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004850:	4a1d      	ldr	r2, [pc, #116]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 8004852:	f023 0301 	bic.w	r3, r3, #1
 8004856:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004858:	f7fd f84a 	bl	80018f0 <HAL_GetTick>
 800485c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800485e:	e008      	b.n	8004872 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004860:	f7fd f846 	bl	80018f0 <HAL_GetTick>
 8004864:	4602      	mov	r2, r0
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	1ad3      	subs	r3, r2, r3
 800486a:	2b02      	cmp	r3, #2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e1d5      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004872:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 8004874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1f0      	bne.n	8004860 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0320 	and.w	r3, r3, #32
 8004886:	2b00      	cmp	r3, #0
 8004888:	d039      	beq.n	80048fe <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	699b      	ldr	r3, [r3, #24]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01c      	beq.n	80048cc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004892:	4b0d      	ldr	r3, [pc, #52]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a0c      	ldr	r2, [pc, #48]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 8004898:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800489c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800489e:	f7fd f827 	bl	80018f0 <HAL_GetTick>
 80048a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80048a6:	f7fd f823 	bl	80018f0 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e1b2      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80048b8:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <HAL_RCC_OscConfig+0x4f8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0f0      	beq.n	80048a6 <HAL_RCC_OscConfig+0x4d6>
 80048c4:	e01b      	b.n	80048fe <HAL_RCC_OscConfig+0x52e>
 80048c6:	bf00      	nop
 80048c8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80048cc:	4b9b      	ldr	r3, [pc, #620]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a9a      	ldr	r2, [pc, #616]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 80048d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048d6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80048d8:	f7fd f80a 	bl	80018f0 <HAL_GetTick>
 80048dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048de:	e008      	b.n	80048f2 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80048e0:	f7fd f806 	bl	80018f0 <HAL_GetTick>
 80048e4:	4602      	mov	r2, r0
 80048e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d901      	bls.n	80048f2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e195      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80048f2:	4b92      	ldr	r3, [pc, #584]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d1f0      	bne.n	80048e0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 8081 	beq.w	8004a0e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800490c:	4b8c      	ldr	r3, [pc, #560]	; (8004b40 <HAL_RCC_OscConfig+0x770>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a8b      	ldr	r2, [pc, #556]	; (8004b40 <HAL_RCC_OscConfig+0x770>)
 8004912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004916:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004918:	f7fc ffea 	bl	80018f0 <HAL_GetTick>
 800491c:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004920:	f7fc ffe6 	bl	80018f0 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b64      	cmp	r3, #100	; 0x64
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e175      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004932:	4b83      	ldr	r3, [pc, #524]	; (8004b40 <HAL_RCC_OscConfig+0x770>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d106      	bne.n	8004954 <HAL_RCC_OscConfig+0x584>
 8004946:	4b7d      	ldr	r3, [pc, #500]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494a:	4a7c      	ldr	r2, [pc, #496]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 800494c:	f043 0301 	orr.w	r3, r3, #1
 8004950:	6713      	str	r3, [r2, #112]	; 0x70
 8004952:	e02d      	b.n	80049b0 <HAL_RCC_OscConfig+0x5e0>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10c      	bne.n	8004976 <HAL_RCC_OscConfig+0x5a6>
 800495c:	4b77      	ldr	r3, [pc, #476]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 800495e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004960:	4a76      	ldr	r2, [pc, #472]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004962:	f023 0301 	bic.w	r3, r3, #1
 8004966:	6713      	str	r3, [r2, #112]	; 0x70
 8004968:	4b74      	ldr	r3, [pc, #464]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 800496a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800496c:	4a73      	ldr	r2, [pc, #460]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 800496e:	f023 0304 	bic.w	r3, r3, #4
 8004972:	6713      	str	r3, [r2, #112]	; 0x70
 8004974:	e01c      	b.n	80049b0 <HAL_RCC_OscConfig+0x5e0>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b05      	cmp	r3, #5
 800497c:	d10c      	bne.n	8004998 <HAL_RCC_OscConfig+0x5c8>
 800497e:	4b6f      	ldr	r3, [pc, #444]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004982:	4a6e      	ldr	r2, [pc, #440]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004984:	f043 0304 	orr.w	r3, r3, #4
 8004988:	6713      	str	r3, [r2, #112]	; 0x70
 800498a:	4b6c      	ldr	r3, [pc, #432]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 800498c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800498e:	4a6b      	ldr	r2, [pc, #428]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004990:	f043 0301 	orr.w	r3, r3, #1
 8004994:	6713      	str	r3, [r2, #112]	; 0x70
 8004996:	e00b      	b.n	80049b0 <HAL_RCC_OscConfig+0x5e0>
 8004998:	4b68      	ldr	r3, [pc, #416]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 800499a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800499c:	4a67      	ldr	r2, [pc, #412]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	6713      	str	r3, [r2, #112]	; 0x70
 80049a4:	4b65      	ldr	r3, [pc, #404]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 80049a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a8:	4a64      	ldr	r2, [pc, #400]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 80049aa:	f023 0304 	bic.w	r3, r3, #4
 80049ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d015      	beq.n	80049e4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b8:	f7fc ff9a 	bl	80018f0 <HAL_GetTick>
 80049bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049be:	e00a      	b.n	80049d6 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049c0:	f7fc ff96 	bl	80018f0 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e123      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049d6:	4b59      	ldr	r3, [pc, #356]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 80049d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d0ee      	beq.n	80049c0 <HAL_RCC_OscConfig+0x5f0>
 80049e2:	e014      	b.n	8004a0e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049e4:	f7fc ff84 	bl	80018f0 <HAL_GetTick>
 80049e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80049ea:	e00a      	b.n	8004a02 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ec:	f7fc ff80 	bl	80018f0 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e10d      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004a02:	4b4e      	ldr	r3, [pc, #312]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1ee      	bne.n	80049ec <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 8102 	beq.w	8004c1c <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004a18:	4b48      	ldr	r3, [pc, #288]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a20:	2b18      	cmp	r3, #24
 8004a22:	f000 80bd 	beq.w	8004ba0 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	f040 809e 	bne.w	8004b6c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a30:	4b42      	ldr	r3, [pc, #264]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a41      	ldr	r2, [pc, #260]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004a36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3c:	f7fc ff58 	bl	80018f0 <HAL_GetTick>
 8004a40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a42:	e008      	b.n	8004a56 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a44:	f7fc ff54 	bl	80018f0 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e0e3      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a56:	4b39      	ldr	r3, [pc, #228]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f0      	bne.n	8004a44 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a62:	4b36      	ldr	r3, [pc, #216]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004a64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a66:	4b37      	ldr	r3, [pc, #220]	; (8004b44 <HAL_RCC_OscConfig+0x774>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004a72:	0112      	lsls	r2, r2, #4
 8004a74:	430a      	orrs	r2, r1
 8004a76:	4931      	ldr	r1, [pc, #196]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	628b      	str	r3, [r1, #40]	; 0x28
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a80:	3b01      	subs	r3, #1
 8004a82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	025b      	lsls	r3, r3, #9
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a96:	3b01      	subs	r3, #1
 8004a98:	041b      	lsls	r3, r3, #16
 8004a9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	061b      	lsls	r3, r3, #24
 8004aa8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004aac:	4923      	ldr	r1, [pc, #140]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8004ab2:	4b22      	ldr	r3, [pc, #136]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab6:	4a21      	ldr	r2, [pc, #132]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004abe:	4b1f      	ldr	r3, [pc, #124]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac2:	4b21      	ldr	r3, [pc, #132]	; (8004b48 <HAL_RCC_OscConfig+0x778>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004aca:	00d2      	lsls	r2, r2, #3
 8004acc:	491b      	ldr	r1, [pc, #108]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004ad2:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	f023 020c 	bic.w	r2, r3, #12
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	4917      	ldr	r1, [pc, #92]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004ae4:	4b15      	ldr	r3, [pc, #84]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	f023 0202 	bic.w	r2, r3, #2
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af0:	4912      	ldr	r1, [pc, #72]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004af6:	4b11      	ldr	r3, [pc, #68]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	4a10      	ldr	r2, [pc, #64]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004afc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b02:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b06:	4a0d      	ldr	r2, [pc, #52]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004b0e:	4b0b      	ldr	r3, [pc, #44]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b12:	4a0a      	ldr	r2, [pc, #40]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004b1a:	4b08      	ldr	r3, [pc, #32]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b1e:	4a07      	ldr	r2, [pc, #28]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004b20:	f043 0301 	orr.w	r3, r3, #1
 8004b24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b26:	4b05      	ldr	r3, [pc, #20]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a04      	ldr	r2, [pc, #16]	; (8004b3c <HAL_RCC_OscConfig+0x76c>)
 8004b2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b32:	f7fc fedd 	bl	80018f0 <HAL_GetTick>
 8004b36:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b38:	e011      	b.n	8004b5e <HAL_RCC_OscConfig+0x78e>
 8004b3a:	bf00      	nop
 8004b3c:	58024400 	.word	0x58024400
 8004b40:	58024800 	.word	0x58024800
 8004b44:	fffffc0c 	.word	0xfffffc0c
 8004b48:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b4c:	f7fc fed0 	bl	80018f0 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e05f      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004b5e:	4b32      	ldr	r3, [pc, #200]	; (8004c28 <HAL_RCC_OscConfig+0x858>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d0f0      	beq.n	8004b4c <HAL_RCC_OscConfig+0x77c>
 8004b6a:	e057      	b.n	8004c1c <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b6c:	4b2e      	ldr	r3, [pc, #184]	; (8004c28 <HAL_RCC_OscConfig+0x858>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a2d      	ldr	r2, [pc, #180]	; (8004c28 <HAL_RCC_OscConfig+0x858>)
 8004b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b78:	f7fc feba 	bl	80018f0 <HAL_GetTick>
 8004b7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b7e:	e008      	b.n	8004b92 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b80:	f7fc feb6 	bl	80018f0 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d901      	bls.n	8004b92 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e045      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b92:	4b25      	ldr	r3, [pc, #148]	; (8004c28 <HAL_RCC_OscConfig+0x858>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d1f0      	bne.n	8004b80 <HAL_RCC_OscConfig+0x7b0>
 8004b9e:	e03d      	b.n	8004c1c <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004ba0:	4b21      	ldr	r3, [pc, #132]	; (8004c28 <HAL_RCC_OscConfig+0x858>)
 8004ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004ba6:	4b20      	ldr	r3, [pc, #128]	; (8004c28 <HAL_RCC_OscConfig+0x858>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d031      	beq.n	8004c18 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f003 0203 	and.w	r2, r3, #3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d12a      	bne.n	8004c18 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	091b      	lsrs	r3, r3, #4
 8004bc6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d122      	bne.n	8004c18 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d11a      	bne.n	8004c18 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	0a5b      	lsrs	r3, r3, #9
 8004be6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bee:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d111      	bne.n	8004c18 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	0c1b      	lsrs	r3, r3, #16
 8004bf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d108      	bne.n	8004c18 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	0e1b      	lsrs	r3, r3, #24
 8004c0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c12:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d001      	beq.n	8004c1c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	e000      	b.n	8004c1e <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3730      	adds	r7, #48	; 0x30
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	58024400 	.word	0x58024400

08004c2c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e19c      	b.n	8004f7a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c40:	4b8a      	ldr	r3, [pc, #552]	; (8004e6c <HAL_RCC_ClockConfig+0x240>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d910      	bls.n	8004c70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c4e:	4b87      	ldr	r3, [pc, #540]	; (8004e6c <HAL_RCC_ClockConfig+0x240>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f023 020f 	bic.w	r2, r3, #15
 8004c56:	4985      	ldr	r1, [pc, #532]	; (8004e6c <HAL_RCC_ClockConfig+0x240>)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c5e:	4b83      	ldr	r3, [pc, #524]	; (8004e6c <HAL_RCC_ClockConfig+0x240>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d001      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e184      	b.n	8004f7a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d010      	beq.n	8004c9e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	691a      	ldr	r2, [r3, #16]
 8004c80:	4b7b      	ldr	r3, [pc, #492]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d908      	bls.n	8004c9e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004c8c:	4b78      	ldr	r3, [pc, #480]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004c8e:	699b      	ldr	r3, [r3, #24]
 8004c90:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	4975      	ldr	r1, [pc, #468]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d010      	beq.n	8004ccc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	695a      	ldr	r2, [r3, #20]
 8004cae:	4b70      	ldr	r3, [pc, #448]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004cb0:	69db      	ldr	r3, [r3, #28]
 8004cb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d908      	bls.n	8004ccc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004cba:	4b6d      	ldr	r3, [pc, #436]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004cbc:	69db      	ldr	r3, [r3, #28]
 8004cbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	695b      	ldr	r3, [r3, #20]
 8004cc6:	496a      	ldr	r1, [pc, #424]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0310 	and.w	r3, r3, #16
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d010      	beq.n	8004cfa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	699a      	ldr	r2, [r3, #24]
 8004cdc:	4b64      	ldr	r3, [pc, #400]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004cde:	69db      	ldr	r3, [r3, #28]
 8004ce0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d908      	bls.n	8004cfa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ce8:	4b61      	ldr	r3, [pc, #388]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004cea:	69db      	ldr	r3, [r3, #28]
 8004cec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	699b      	ldr	r3, [r3, #24]
 8004cf4:	495e      	ldr	r1, [pc, #376]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0320 	and.w	r3, r3, #32
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d010      	beq.n	8004d28 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	69da      	ldr	r2, [r3, #28]
 8004d0a:	4b59      	ldr	r3, [pc, #356]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004d0c:	6a1b      	ldr	r3, [r3, #32]
 8004d0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d908      	bls.n	8004d28 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004d16:	4b56      	ldr	r3, [pc, #344]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	4953      	ldr	r1, [pc, #332]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d010      	beq.n	8004d56 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	68da      	ldr	r2, [r3, #12]
 8004d38:	4b4d      	ldr	r3, [pc, #308]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f003 030f 	and.w	r3, r3, #15
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d908      	bls.n	8004d56 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d44:	4b4a      	ldr	r3, [pc, #296]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	f023 020f 	bic.w	r2, r3, #15
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	4947      	ldr	r1, [pc, #284]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d055      	beq.n	8004e0e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004d62:	4b43      	ldr	r3, [pc, #268]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	4940      	ldr	r1, [pc, #256]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d107      	bne.n	8004d8c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004d7c:	4b3c      	ldr	r3, [pc, #240]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d121      	bne.n	8004dcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e0f6      	b.n	8004f7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	2b03      	cmp	r3, #3
 8004d92:	d107      	bne.n	8004da4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d94:	4b36      	ldr	r3, [pc, #216]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d115      	bne.n	8004dcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e0ea      	b.n	8004f7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d107      	bne.n	8004dbc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004dac:	4b30      	ldr	r3, [pc, #192]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d109      	bne.n	8004dcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e0de      	b.n	8004f7a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dbc:	4b2c      	ldr	r3, [pc, #176]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0d6      	b.n	8004f7a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dcc:	4b28      	ldr	r3, [pc, #160]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f023 0207 	bic.w	r2, r3, #7
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	4925      	ldr	r1, [pc, #148]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dde:	f7fc fd87 	bl	80018f0 <HAL_GetTick>
 8004de2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de4:	e00a      	b.n	8004dfc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de6:	f7fc fd83 	bl	80018f0 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d901      	bls.n	8004dfc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e0be      	b.n	8004f7a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dfc:	4b1c      	ldr	r3, [pc, #112]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d1eb      	bne.n	8004de6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d010      	beq.n	8004e3c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68da      	ldr	r2, [r3, #12]
 8004e1e:	4b14      	ldr	r3, [pc, #80]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d208      	bcs.n	8004e3c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e2a:	4b11      	ldr	r3, [pc, #68]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f023 020f 	bic.w	r2, r3, #15
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	490e      	ldr	r1, [pc, #56]	; (8004e70 <HAL_RCC_ClockConfig+0x244>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e3c:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <HAL_RCC_ClockConfig+0x240>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d214      	bcs.n	8004e74 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4a:	4b08      	ldr	r3, [pc, #32]	; (8004e6c <HAL_RCC_ClockConfig+0x240>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f023 020f 	bic.w	r2, r3, #15
 8004e52:	4906      	ldr	r1, [pc, #24]	; (8004e6c <HAL_RCC_ClockConfig+0x240>)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5a:	4b04      	ldr	r3, [pc, #16]	; (8004e6c <HAL_RCC_ClockConfig+0x240>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	683a      	ldr	r2, [r7, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d005      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	e086      	b.n	8004f7a <HAL_RCC_ClockConfig+0x34e>
 8004e6c:	52002000 	.word	0x52002000
 8004e70:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d010      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	691a      	ldr	r2, [r3, #16]
 8004e84:	4b3f      	ldr	r3, [pc, #252]	; (8004f84 <HAL_RCC_ClockConfig+0x358>)
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d208      	bcs.n	8004ea2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e90:	4b3c      	ldr	r3, [pc, #240]	; (8004f84 <HAL_RCC_ClockConfig+0x358>)
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	4939      	ldr	r1, [pc, #228]	; (8004f84 <HAL_RCC_ClockConfig+0x358>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d010      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	695a      	ldr	r2, [r3, #20]
 8004eb2:	4b34      	ldr	r3, [pc, #208]	; (8004f84 <HAL_RCC_ClockConfig+0x358>)
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d208      	bcs.n	8004ed0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004ebe:	4b31      	ldr	r3, [pc, #196]	; (8004f84 <HAL_RCC_ClockConfig+0x358>)
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	695b      	ldr	r3, [r3, #20]
 8004eca:	492e      	ldr	r1, [pc, #184]	; (8004f84 <HAL_RCC_ClockConfig+0x358>)
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d010      	beq.n	8004efe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699a      	ldr	r2, [r3, #24]
 8004ee0:	4b28      	ldr	r3, [pc, #160]	; (8004f84 <HAL_RCC_ClockConfig+0x358>)
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d208      	bcs.n	8004efe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004eec:	4b25      	ldr	r3, [pc, #148]	; (8004f84 <HAL_RCC_ClockConfig+0x358>)
 8004eee:	69db      	ldr	r3, [r3, #28]
 8004ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	4922      	ldr	r1, [pc, #136]	; (8004f84 <HAL_RCC_ClockConfig+0x358>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0320 	and.w	r3, r3, #32
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d010      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69da      	ldr	r2, [r3, #28]
 8004f0e:	4b1d      	ldr	r3, [pc, #116]	; (8004f84 <HAL_RCC_ClockConfig+0x358>)
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d208      	bcs.n	8004f2c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004f1a:	4b1a      	ldr	r3, [pc, #104]	; (8004f84 <HAL_RCC_ClockConfig+0x358>)
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	69db      	ldr	r3, [r3, #28]
 8004f26:	4917      	ldr	r1, [pc, #92]	; (8004f84 <HAL_RCC_ClockConfig+0x358>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004f2c:	f000 f834 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 8004f30:	4602      	mov	r2, r0
 8004f32:	4b14      	ldr	r3, [pc, #80]	; (8004f84 <HAL_RCC_ClockConfig+0x358>)
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	f003 030f 	and.w	r3, r3, #15
 8004f3c:	4912      	ldr	r1, [pc, #72]	; (8004f88 <HAL_RCC_ClockConfig+0x35c>)
 8004f3e:	5ccb      	ldrb	r3, [r1, r3]
 8004f40:	f003 031f 	and.w	r3, r3, #31
 8004f44:	fa22 f303 	lsr.w	r3, r2, r3
 8004f48:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f4a:	4b0e      	ldr	r3, [pc, #56]	; (8004f84 <HAL_RCC_ClockConfig+0x358>)
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	4a0d      	ldr	r2, [pc, #52]	; (8004f88 <HAL_RCC_ClockConfig+0x35c>)
 8004f54:	5cd3      	ldrb	r3, [r2, r3]
 8004f56:	f003 031f 	and.w	r3, r3, #31
 8004f5a:	693a      	ldr	r2, [r7, #16]
 8004f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f60:	4a0a      	ldr	r2, [pc, #40]	; (8004f8c <HAL_RCC_ClockConfig+0x360>)
 8004f62:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f64:	4a0a      	ldr	r2, [pc, #40]	; (8004f90 <HAL_RCC_ClockConfig+0x364>)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004f6a:	4b0a      	ldr	r3, [pc, #40]	; (8004f94 <HAL_RCC_ClockConfig+0x368>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fc fc74 	bl	800185c <HAL_InitTick>
 8004f74:	4603      	mov	r3, r0
 8004f76:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	58024400 	.word	0x58024400
 8004f88:	0800c3c8 	.word	0x0800c3c8
 8004f8c:	24000004 	.word	0x24000004
 8004f90:	24000000 	.word	0x24000000
 8004f94:	24000010 	.word	0x24000010

08004f98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b089      	sub	sp, #36	; 0x24
 8004f9c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f9e:	4bb3      	ldr	r3, [pc, #716]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fa6:	2b18      	cmp	r3, #24
 8004fa8:	f200 8155 	bhi.w	8005256 <HAL_RCC_GetSysClockFreq+0x2be>
 8004fac:	a201      	add	r2, pc, #4	; (adr r2, 8004fb4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb2:	bf00      	nop
 8004fb4:	08005019 	.word	0x08005019
 8004fb8:	08005257 	.word	0x08005257
 8004fbc:	08005257 	.word	0x08005257
 8004fc0:	08005257 	.word	0x08005257
 8004fc4:	08005257 	.word	0x08005257
 8004fc8:	08005257 	.word	0x08005257
 8004fcc:	08005257 	.word	0x08005257
 8004fd0:	08005257 	.word	0x08005257
 8004fd4:	0800503f 	.word	0x0800503f
 8004fd8:	08005257 	.word	0x08005257
 8004fdc:	08005257 	.word	0x08005257
 8004fe0:	08005257 	.word	0x08005257
 8004fe4:	08005257 	.word	0x08005257
 8004fe8:	08005257 	.word	0x08005257
 8004fec:	08005257 	.word	0x08005257
 8004ff0:	08005257 	.word	0x08005257
 8004ff4:	08005045 	.word	0x08005045
 8004ff8:	08005257 	.word	0x08005257
 8004ffc:	08005257 	.word	0x08005257
 8005000:	08005257 	.word	0x08005257
 8005004:	08005257 	.word	0x08005257
 8005008:	08005257 	.word	0x08005257
 800500c:	08005257 	.word	0x08005257
 8005010:	08005257 	.word	0x08005257
 8005014:	0800504b 	.word	0x0800504b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005018:	4b94      	ldr	r3, [pc, #592]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0320 	and.w	r3, r3, #32
 8005020:	2b00      	cmp	r3, #0
 8005022:	d009      	beq.n	8005038 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005024:	4b91      	ldr	r3, [pc, #580]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	08db      	lsrs	r3, r3, #3
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	4a90      	ldr	r2, [pc, #576]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005030:	fa22 f303 	lsr.w	r3, r2, r3
 8005034:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005036:	e111      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005038:	4b8d      	ldr	r3, [pc, #564]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800503a:	61bb      	str	r3, [r7, #24]
    break;
 800503c:	e10e      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800503e:	4b8d      	ldr	r3, [pc, #564]	; (8005274 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005040:	61bb      	str	r3, [r7, #24]
    break;
 8005042:	e10b      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005044:	4b8c      	ldr	r3, [pc, #560]	; (8005278 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005046:	61bb      	str	r3, [r7, #24]
    break;
 8005048:	e108      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800504a:	4b88      	ldr	r3, [pc, #544]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005054:	4b85      	ldr	r3, [pc, #532]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	091b      	lsrs	r3, r3, #4
 800505a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800505e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005060:	4b82      	ldr	r3, [pc, #520]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800506a:	4b80      	ldr	r3, [pc, #512]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800506c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506e:	08db      	lsrs	r3, r3, #3
 8005070:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	ee07 3a90 	vmov	s15, r3
 800507e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005082:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 80e1 	beq.w	8005250 <HAL_RCC_GetSysClockFreq+0x2b8>
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b02      	cmp	r3, #2
 8005092:	f000 8083 	beq.w	800519c <HAL_RCC_GetSysClockFreq+0x204>
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b02      	cmp	r3, #2
 800509a:	f200 80a1 	bhi.w	80051e0 <HAL_RCC_GetSysClockFreq+0x248>
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <HAL_RCC_GetSysClockFreq+0x114>
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d056      	beq.n	8005158 <HAL_RCC_GetSysClockFreq+0x1c0>
 80050aa:	e099      	b.n	80051e0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050ac:	4b6f      	ldr	r3, [pc, #444]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0320 	and.w	r3, r3, #32
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d02d      	beq.n	8005114 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80050b8:	4b6c      	ldr	r3, [pc, #432]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	08db      	lsrs	r3, r3, #3
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	4a6b      	ldr	r2, [pc, #428]	; (8005270 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80050c4:	fa22 f303 	lsr.w	r3, r2, r3
 80050c8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	ee07 3a90 	vmov	s15, r3
 80050d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050e2:	4b62      	ldr	r3, [pc, #392]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ea:	ee07 3a90 	vmov	s15, r3
 80050ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80050f6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800527c <HAL_RCC_GetSysClockFreq+0x2e4>
 80050fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005102:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800510a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800510e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005112:	e087      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	ee07 3a90 	vmov	s15, r3
 800511a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800511e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005280 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005126:	4b51      	ldr	r3, [pc, #324]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005136:	ed97 6a02 	vldr	s12, [r7, #8]
 800513a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800527c <HAL_RCC_GetSysClockFreq+0x2e4>
 800513e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800514a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800514e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005152:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005156:	e065      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	ee07 3a90 	vmov	s15, r3
 800515e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005162:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005284 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800516a:	4b40      	ldr	r3, [pc, #256]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800516c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005172:	ee07 3a90 	vmov	s15, r3
 8005176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800517a:	ed97 6a02 	vldr	s12, [r7, #8]
 800517e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800527c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800518a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800518e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005196:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800519a:	e043      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	ee07 3a90 	vmov	s15, r3
 80051a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051a6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005288 <HAL_RCC_GetSysClockFreq+0x2f0>
 80051aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051ae:	4b2f      	ldr	r3, [pc, #188]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051b6:	ee07 3a90 	vmov	s15, r3
 80051ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051be:	ed97 6a02 	vldr	s12, [r7, #8]
 80051c2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800527c <HAL_RCC_GetSysClockFreq+0x2e4>
 80051c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80051de:	e021      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	ee07 3a90 	vmov	s15, r3
 80051e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ea:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005284 <HAL_RCC_GetSysClockFreq+0x2ec>
 80051ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051f2:	4b1e      	ldr	r3, [pc, #120]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005202:	ed97 6a02 	vldr	s12, [r7, #8]
 8005206:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800527c <HAL_RCC_GetSysClockFreq+0x2e4>
 800520a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800520e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800521a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005222:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005224:	4b11      	ldr	r3, [pc, #68]	; (800526c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005228:	0a5b      	lsrs	r3, r3, #9
 800522a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800522e:	3301      	adds	r3, #1
 8005230:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	ee07 3a90 	vmov	s15, r3
 8005238:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800523c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005240:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005244:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005248:	ee17 3a90 	vmov	r3, s15
 800524c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800524e:	e005      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	61bb      	str	r3, [r7, #24]
    break;
 8005254:	e002      	b.n	800525c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005256:	4b07      	ldr	r3, [pc, #28]	; (8005274 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005258:	61bb      	str	r3, [r7, #24]
    break;
 800525a:	bf00      	nop
  }

  return sysclockfreq;
 800525c:	69bb      	ldr	r3, [r7, #24]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3724      	adds	r7, #36	; 0x24
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	58024400 	.word	0x58024400
 8005270:	03d09000 	.word	0x03d09000
 8005274:	003d0900 	.word	0x003d0900
 8005278:	007a1200 	.word	0x007a1200
 800527c:	46000000 	.word	0x46000000
 8005280:	4c742400 	.word	0x4c742400
 8005284:	4a742400 	.word	0x4a742400
 8005288:	4af42400 	.word	0x4af42400

0800528c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b082      	sub	sp, #8
 8005290:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005292:	f7ff fe81 	bl	8004f98 <HAL_RCC_GetSysClockFreq>
 8005296:	4602      	mov	r2, r0
 8005298:	4b10      	ldr	r3, [pc, #64]	; (80052dc <HAL_RCC_GetHCLKFreq+0x50>)
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	0a1b      	lsrs	r3, r3, #8
 800529e:	f003 030f 	and.w	r3, r3, #15
 80052a2:	490f      	ldr	r1, [pc, #60]	; (80052e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80052a4:	5ccb      	ldrb	r3, [r1, r3]
 80052a6:	f003 031f 	and.w	r3, r3, #31
 80052aa:	fa22 f303 	lsr.w	r3, r2, r3
 80052ae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80052b0:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <HAL_RCC_GetHCLKFreq+0x50>)
 80052b2:	699b      	ldr	r3, [r3, #24]
 80052b4:	f003 030f 	and.w	r3, r3, #15
 80052b8:	4a09      	ldr	r2, [pc, #36]	; (80052e0 <HAL_RCC_GetHCLKFreq+0x54>)
 80052ba:	5cd3      	ldrb	r3, [r2, r3]
 80052bc:	f003 031f 	and.w	r3, r3, #31
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	fa22 f303 	lsr.w	r3, r2, r3
 80052c6:	4a07      	ldr	r2, [pc, #28]	; (80052e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80052c8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80052ca:	4a07      	ldr	r2, [pc, #28]	; (80052e8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80052d0:	4b04      	ldr	r3, [pc, #16]	; (80052e4 <HAL_RCC_GetHCLKFreq+0x58>)
 80052d2:	681b      	ldr	r3, [r3, #0]
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3708      	adds	r7, #8
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	58024400 	.word	0x58024400
 80052e0:	0800c3c8 	.word	0x0800c3c8
 80052e4:	24000004 	.word	0x24000004
 80052e8:	24000000 	.word	0x24000000

080052ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80052f0:	f7ff ffcc 	bl	800528c <HAL_RCC_GetHCLKFreq>
 80052f4:	4602      	mov	r2, r0
 80052f6:	4b06      	ldr	r3, [pc, #24]	; (8005310 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	091b      	lsrs	r3, r3, #4
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	4904      	ldr	r1, [pc, #16]	; (8005314 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005302:	5ccb      	ldrb	r3, [r1, r3]
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800530c:	4618      	mov	r0, r3
 800530e:	bd80      	pop	{r7, pc}
 8005310:	58024400 	.word	0x58024400
 8005314:	0800c3c8 	.word	0x0800c3c8

08005318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800531c:	f7ff ffb6 	bl	800528c <HAL_RCC_GetHCLKFreq>
 8005320:	4602      	mov	r2, r0
 8005322:	4b06      	ldr	r3, [pc, #24]	; (800533c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	0a1b      	lsrs	r3, r3, #8
 8005328:	f003 0307 	and.w	r3, r3, #7
 800532c:	4904      	ldr	r1, [pc, #16]	; (8005340 <HAL_RCC_GetPCLK2Freq+0x28>)
 800532e:	5ccb      	ldrb	r3, [r1, r3]
 8005330:	f003 031f 	and.w	r3, r3, #31
 8005334:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005338:	4618      	mov	r0, r3
 800533a:	bd80      	pop	{r7, pc}
 800533c:	58024400 	.word	0x58024400
 8005340:	0800c3c8 	.word	0x0800c3c8

08005344 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800534c:	2300      	movs	r3, #0
 800534e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005350:	2300      	movs	r3, #0
 8005352:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d03f      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005364:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005368:	d02a      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800536a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800536e:	d824      	bhi.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005370:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005374:	d018      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005376:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800537a:	d81e      	bhi.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005380:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005384:	d007      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005386:	e018      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005388:	4ba3      	ldr	r3, [pc, #652]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	4aa2      	ldr	r2, [pc, #648]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800538e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005392:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005394:	e015      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3304      	adds	r3, #4
 800539a:	2102      	movs	r1, #2
 800539c:	4618      	mov	r0, r3
 800539e:	f001 fff9 	bl	8007394 <RCCEx_PLL2_Config>
 80053a2:	4603      	mov	r3, r0
 80053a4:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80053a6:	e00c      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3324      	adds	r3, #36	; 0x24
 80053ac:	2102      	movs	r1, #2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f002 f8a2 	bl	80074f8 <RCCEx_PLL3_Config>
 80053b4:	4603      	mov	r3, r0
 80053b6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80053b8:	e003      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	75fb      	strb	r3, [r7, #23]
      break;
 80053be:	e000      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80053c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d109      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80053c8:	4b93      	ldr	r3, [pc, #588]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053d4:	4990      	ldr	r1, [pc, #576]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	650b      	str	r3, [r1, #80]	; 0x50
 80053da:	e001      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
 80053de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d03d      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f0:	2b04      	cmp	r3, #4
 80053f2:	d826      	bhi.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80053f4:	a201      	add	r2, pc, #4	; (adr r2, 80053fc <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80053f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fa:	bf00      	nop
 80053fc:	08005411 	.word	0x08005411
 8005400:	0800541f 	.word	0x0800541f
 8005404:	08005431 	.word	0x08005431
 8005408:	08005449 	.word	0x08005449
 800540c:	08005449 	.word	0x08005449
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005410:	4b81      	ldr	r3, [pc, #516]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005414:	4a80      	ldr	r2, [pc, #512]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800541a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800541c:	e015      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	3304      	adds	r3, #4
 8005422:	2100      	movs	r1, #0
 8005424:	4618      	mov	r0, r3
 8005426:	f001 ffb5 	bl	8007394 <RCCEx_PLL2_Config>
 800542a:	4603      	mov	r3, r0
 800542c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800542e:	e00c      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	3324      	adds	r3, #36	; 0x24
 8005434:	2100      	movs	r1, #0
 8005436:	4618      	mov	r0, r3
 8005438:	f002 f85e 	bl	80074f8 <RCCEx_PLL3_Config>
 800543c:	4603      	mov	r3, r0
 800543e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005440:	e003      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	75fb      	strb	r3, [r7, #23]
      break;
 8005446:	e000      	b.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005448:	bf00      	nop
    }

    if(ret == HAL_OK)
 800544a:	7dfb      	ldrb	r3, [r7, #23]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d109      	bne.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005450:	4b71      	ldr	r3, [pc, #452]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005454:	f023 0207 	bic.w	r2, r3, #7
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545c:	496e      	ldr	r1, [pc, #440]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800545e:	4313      	orrs	r3, r2
 8005460:	650b      	str	r3, [r1, #80]	; 0x50
 8005462:	e001      	b.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005464:	7dfb      	ldrb	r3, [r7, #23]
 8005466:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005470:	2b00      	cmp	r3, #0
 8005472:	d042      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005478:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800547c:	d02b      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800547e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005482:	d825      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005484:	2bc0      	cmp	r3, #192	; 0xc0
 8005486:	d028      	beq.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005488:	2bc0      	cmp	r3, #192	; 0xc0
 800548a:	d821      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800548c:	2b80      	cmp	r3, #128	; 0x80
 800548e:	d016      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005490:	2b80      	cmp	r3, #128	; 0x80
 8005492:	d81d      	bhi.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005494:	2b00      	cmp	r3, #0
 8005496:	d002      	beq.n	800549e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005498:	2b40      	cmp	r3, #64	; 0x40
 800549a:	d007      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x168>
 800549c:	e018      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800549e:	4b5e      	ldr	r3, [pc, #376]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054a2:	4a5d      	ldr	r2, [pc, #372]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80054aa:	e017      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	3304      	adds	r3, #4
 80054b0:	2100      	movs	r1, #0
 80054b2:	4618      	mov	r0, r3
 80054b4:	f001 ff6e 	bl	8007394 <RCCEx_PLL2_Config>
 80054b8:	4603      	mov	r3, r0
 80054ba:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80054bc:	e00e      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	3324      	adds	r3, #36	; 0x24
 80054c2:	2100      	movs	r1, #0
 80054c4:	4618      	mov	r0, r3
 80054c6:	f002 f817 	bl	80074f8 <RCCEx_PLL3_Config>
 80054ca:	4603      	mov	r3, r0
 80054cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80054ce:	e005      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	75fb      	strb	r3, [r7, #23]
      break;
 80054d4:	e002      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80054d6:	bf00      	nop
 80054d8:	e000      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80054da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054dc:	7dfb      	ldrb	r3, [r7, #23]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d109      	bne.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80054e2:	4b4d      	ldr	r3, [pc, #308]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ee:	494a      	ldr	r1, [pc, #296]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	650b      	str	r3, [r1, #80]	; 0x50
 80054f4:	e001      	b.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054f6:	7dfb      	ldrb	r3, [r7, #23]
 80054f8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005502:	2b00      	cmp	r3, #0
 8005504:	d049      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800550c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005510:	d030      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005512:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005516:	d82a      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005518:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800551c:	d02c      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800551e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005522:	d824      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005524:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005528:	d018      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x218>
 800552a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800552e:	d81e      	bhi.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005530:	2b00      	cmp	r3, #0
 8005532:	d003      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005534:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005538:	d007      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800553a:	e018      	b.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800553c:	4b36      	ldr	r3, [pc, #216]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	4a35      	ldr	r2, [pc, #212]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005542:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005546:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005548:	e017      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3304      	adds	r3, #4
 800554e:	2100      	movs	r1, #0
 8005550:	4618      	mov	r0, r3
 8005552:	f001 ff1f 	bl	8007394 <RCCEx_PLL2_Config>
 8005556:	4603      	mov	r3, r0
 8005558:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800555a:	e00e      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	3324      	adds	r3, #36	; 0x24
 8005560:	2100      	movs	r1, #0
 8005562:	4618      	mov	r0, r3
 8005564:	f001 ffc8 	bl	80074f8 <RCCEx_PLL3_Config>
 8005568:	4603      	mov	r3, r0
 800556a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800556c:	e005      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	75fb      	strb	r3, [r7, #23]
      break;
 8005572:	e002      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005574:	bf00      	nop
 8005576:	e000      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005578:	bf00      	nop
    }

    if(ret == HAL_OK)
 800557a:	7dfb      	ldrb	r3, [r7, #23]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10a      	bne.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005580:	4b25      	ldr	r3, [pc, #148]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005584:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800558e:	4922      	ldr	r1, [pc, #136]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005590:	4313      	orrs	r3, r2
 8005592:	658b      	str	r3, [r1, #88]	; 0x58
 8005594:	e001      	b.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005596:	7dfb      	ldrb	r3, [r7, #23]
 8005598:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d04b      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80055ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055b0:	d030      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80055b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055b6:	d82a      	bhi.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80055b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055bc:	d02e      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80055be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055c2:	d824      	bhi.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80055c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055c8:	d018      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80055ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055ce:	d81e      	bhi.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80055d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055d8:	d007      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80055da:	e018      	b.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055dc:	4b0e      	ldr	r3, [pc, #56]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	4a0d      	ldr	r2, [pc, #52]	; (8005618 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80055e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80055e8:	e019      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	3304      	adds	r3, #4
 80055ee:	2100      	movs	r1, #0
 80055f0:	4618      	mov	r0, r3
 80055f2:	f001 fecf 	bl	8007394 <RCCEx_PLL2_Config>
 80055f6:	4603      	mov	r3, r0
 80055f8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80055fa:	e010      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3324      	adds	r3, #36	; 0x24
 8005600:	2100      	movs	r1, #0
 8005602:	4618      	mov	r0, r3
 8005604:	f001 ff78 	bl	80074f8 <RCCEx_PLL3_Config>
 8005608:	4603      	mov	r3, r0
 800560a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800560c:	e007      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	75fb      	strb	r3, [r7, #23]
      break;
 8005612:	e004      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005614:	bf00      	nop
 8005616:	e002      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005618:	58024400 	.word	0x58024400
      break;
 800561c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800561e:	7dfb      	ldrb	r3, [r7, #23]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d10a      	bne.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005624:	4b99      	ldr	r3, [pc, #612]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005628:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005632:	4996      	ldr	r1, [pc, #600]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005634:	4313      	orrs	r3, r2
 8005636:	658b      	str	r3, [r1, #88]	; 0x58
 8005638:	e001      	b.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563a:	7dfb      	ldrb	r3, [r7, #23]
 800563c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d032      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800564e:	2b30      	cmp	r3, #48	; 0x30
 8005650:	d01c      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005652:	2b30      	cmp	r3, #48	; 0x30
 8005654:	d817      	bhi.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005656:	2b20      	cmp	r3, #32
 8005658:	d00c      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800565a:	2b20      	cmp	r3, #32
 800565c:	d813      	bhi.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800565e:	2b00      	cmp	r3, #0
 8005660:	d016      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005662:	2b10      	cmp	r3, #16
 8005664:	d10f      	bne.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005666:	4b89      	ldr	r3, [pc, #548]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800566a:	4a88      	ldr	r2, [pc, #544]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800566c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005670:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005672:	e00e      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3304      	adds	r3, #4
 8005678:	2102      	movs	r1, #2
 800567a:	4618      	mov	r0, r3
 800567c:	f001 fe8a 	bl	8007394 <RCCEx_PLL2_Config>
 8005680:	4603      	mov	r3, r0
 8005682:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005684:	e005      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	75fb      	strb	r3, [r7, #23]
      break;
 800568a:	e002      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800568c:	bf00      	nop
 800568e:	e000      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005692:	7dfb      	ldrb	r3, [r7, #23]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d109      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005698:	4b7c      	ldr	r3, [pc, #496]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800569a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800569c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056a4:	4979      	ldr	r1, [pc, #484]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80056aa:	e001      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ac:	7dfb      	ldrb	r3, [r7, #23]
 80056ae:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d047      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056c4:	d030      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80056c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056ca:	d82a      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80056cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056d0:	d02c      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80056d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80056d6:	d824      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80056d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056dc:	d018      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80056de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e2:	d81e      	bhi.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d003      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80056e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ec:	d007      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80056ee:	e018      	b.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056f0:	4b66      	ldr	r3, [pc, #408]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	4a65      	ldr	r2, [pc, #404]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80056f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80056fc:	e017      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	3304      	adds	r3, #4
 8005702:	2100      	movs	r1, #0
 8005704:	4618      	mov	r0, r3
 8005706:	f001 fe45 	bl	8007394 <RCCEx_PLL2_Config>
 800570a:	4603      	mov	r3, r0
 800570c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800570e:	e00e      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	3324      	adds	r3, #36	; 0x24
 8005714:	2100      	movs	r1, #0
 8005716:	4618      	mov	r0, r3
 8005718:	f001 feee 	bl	80074f8 <RCCEx_PLL3_Config>
 800571c:	4603      	mov	r3, r0
 800571e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005720:	e005      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	75fb      	strb	r3, [r7, #23]
      break;
 8005726:	e002      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005728:	bf00      	nop
 800572a:	e000      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800572c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800572e:	7dfb      	ldrb	r3, [r7, #23]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d109      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005734:	4b55      	ldr	r3, [pc, #340]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005738:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005740:	4952      	ldr	r1, [pc, #328]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005742:	4313      	orrs	r3, r2
 8005744:	650b      	str	r3, [r1, #80]	; 0x50
 8005746:	e001      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005748:	7dfb      	ldrb	r3, [r7, #23]
 800574a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d049      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005760:	d02e      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005762:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005766:	d828      	bhi.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005768:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800576c:	d02a      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800576e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005772:	d822      	bhi.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005774:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005778:	d026      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800577a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800577e:	d81c      	bhi.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005780:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005784:	d010      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005786:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800578a:	d816      	bhi.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x476>
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01d      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005794:	d111      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3304      	adds	r3, #4
 800579a:	2101      	movs	r1, #1
 800579c:	4618      	mov	r0, r3
 800579e:	f001 fdf9 	bl	8007394 <RCCEx_PLL2_Config>
 80057a2:	4603      	mov	r3, r0
 80057a4:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80057a6:	e012      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3324      	adds	r3, #36	; 0x24
 80057ac:	2101      	movs	r1, #1
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 fea2 	bl	80074f8 <RCCEx_PLL3_Config>
 80057b4:	4603      	mov	r3, r0
 80057b6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80057b8:	e009      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	75fb      	strb	r3, [r7, #23]
      break;
 80057be:	e006      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80057c0:	bf00      	nop
 80057c2:	e004      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80057c4:	bf00      	nop
 80057c6:	e002      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80057c8:	bf00      	nop
 80057ca:	e000      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80057cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057ce:	7dfb      	ldrb	r3, [r7, #23]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d109      	bne.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80057d4:	4b2d      	ldr	r3, [pc, #180]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057e0:	492a      	ldr	r1, [pc, #168]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	650b      	str	r3, [r1, #80]	; 0x50
 80057e6:	e001      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e8:	7dfb      	ldrb	r3, [r7, #23]
 80057ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d04d      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80057fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005802:	d02e      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005804:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005808:	d828      	bhi.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800580a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580e:	d02a      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005814:	d822      	bhi.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005816:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800581a:	d026      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x526>
 800581c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005820:	d81c      	bhi.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005822:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005826:	d010      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005828:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800582c:	d816      	bhi.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x518>
 800582e:	2b00      	cmp	r3, #0
 8005830:	d01d      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005832:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005836:	d111      	bne.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3304      	adds	r3, #4
 800583c:	2101      	movs	r1, #1
 800583e:	4618      	mov	r0, r3
 8005840:	f001 fda8 	bl	8007394 <RCCEx_PLL2_Config>
 8005844:	4603      	mov	r3, r0
 8005846:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8005848:	e012      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3324      	adds	r3, #36	; 0x24
 800584e:	2101      	movs	r1, #1
 8005850:	4618      	mov	r0, r3
 8005852:	f001 fe51 	bl	80074f8 <RCCEx_PLL3_Config>
 8005856:	4603      	mov	r3, r0
 8005858:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800585a:	e009      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	75fb      	strb	r3, [r7, #23]
      break;
 8005860:	e006      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005862:	bf00      	nop
 8005864:	e004      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8005866:	bf00      	nop
 8005868:	e002      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800586a:	bf00      	nop
 800586c:	e000      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800586e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005870:	7dfb      	ldrb	r3, [r7, #23]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10c      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005876:	4b05      	ldr	r3, [pc, #20]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005884:	4901      	ldr	r1, [pc, #4]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005886:	4313      	orrs	r3, r2
 8005888:	658b      	str	r3, [r1, #88]	; 0x58
 800588a:	e003      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800588c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005890:	7dfb      	ldrb	r3, [r7, #23]
 8005892:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d02f      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058a8:	d00e      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
 80058aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ae:	d814      	bhi.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x596>
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d015      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 80058b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058b8:	d10f      	bne.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ba:	4baf      	ldr	r3, [pc, #700]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058be:	4aae      	ldr	r2, [pc, #696]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80058c6:	e00c      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3304      	adds	r3, #4
 80058cc:	2101      	movs	r1, #1
 80058ce:	4618      	mov	r0, r3
 80058d0:	f001 fd60 	bl	8007394 <RCCEx_PLL2_Config>
 80058d4:	4603      	mov	r3, r0
 80058d6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80058d8:	e003      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	75fb      	strb	r3, [r7, #23]
      break;
 80058de:	e000      	b.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 80058e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058e2:	7dfb      	ldrb	r3, [r7, #23]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d109      	bne.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80058e8:	4ba3      	ldr	r3, [pc, #652]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058f4:	49a0      	ldr	r1, [pc, #640]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	650b      	str	r3, [r1, #80]	; 0x50
 80058fa:	e001      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058fc:	7dfb      	ldrb	r3, [r7, #23]
 80058fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d032      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005910:	2b03      	cmp	r3, #3
 8005912:	d81b      	bhi.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005914:	a201      	add	r2, pc, #4	; (adr r2, 800591c <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8005916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800591a:	bf00      	nop
 800591c:	08005953 	.word	0x08005953
 8005920:	0800592d 	.word	0x0800592d
 8005924:	0800593b 	.word	0x0800593b
 8005928:	08005953 	.word	0x08005953
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800592c:	4b92      	ldr	r3, [pc, #584]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800592e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005930:	4a91      	ldr	r2, [pc, #580]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005936:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005938:	e00c      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3304      	adds	r3, #4
 800593e:	2102      	movs	r1, #2
 8005940:	4618      	mov	r0, r3
 8005942:	f001 fd27 	bl	8007394 <RCCEx_PLL2_Config>
 8005946:	4603      	mov	r3, r0
 8005948:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800594a:	e003      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	75fb      	strb	r3, [r7, #23]
      break;
 8005950:	e000      	b.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8005952:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005954:	7dfb      	ldrb	r3, [r7, #23]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d109      	bne.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800595a:	4b87      	ldr	r3, [pc, #540]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800595c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800595e:	f023 0203 	bic.w	r2, r3, #3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005966:	4984      	ldr	r1, [pc, #528]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005968:	4313      	orrs	r3, r2
 800596a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800596c:	e001      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800596e:	7dfb      	ldrb	r3, [r7, #23]
 8005970:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800597a:	2b00      	cmp	r3, #0
 800597c:	f000 8086 	beq.w	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005980:	4b7e      	ldr	r3, [pc, #504]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a7d      	ldr	r2, [pc, #500]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8005986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800598a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800598c:	f7fb ffb0 	bl	80018f0 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005992:	e009      	b.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005994:	f7fb ffac 	bl	80018f0 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b64      	cmp	r3, #100	; 0x64
 80059a0:	d902      	bls.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	75fb      	strb	r3, [r7, #23]
        break;
 80059a6:	e005      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059a8:	4b74      	ldr	r3, [pc, #464]	; (8005b7c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0ef      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80059b4:	7dfb      	ldrb	r3, [r7, #23]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d166      	bne.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80059ba:	4b6f      	ldr	r3, [pc, #444]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059bc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059c4:	4053      	eors	r3, r2
 80059c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d013      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059ce:	4b6a      	ldr	r3, [pc, #424]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059d6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059d8:	4b67      	ldr	r3, [pc, #412]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059dc:	4a66      	ldr	r2, [pc, #408]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80059e4:	4b64      	ldr	r3, [pc, #400]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059e8:	4a63      	ldr	r2, [pc, #396]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ee:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80059f0:	4a61      	ldr	r2, [pc, #388]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80059fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a00:	d115      	bne.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a02:	f7fb ff75 	bl	80018f0 <HAL_GetTick>
 8005a06:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a08:	e00b      	b.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a0a:	f7fb ff71 	bl	80018f0 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d902      	bls.n	8005a22 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	75fb      	strb	r3, [r7, #23]
            break;
 8005a20:	e005      	b.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005a22:	4b55      	ldr	r3, [pc, #340]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0ed      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8005a2e:	7dfb      	ldrb	r3, [r7, #23]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d126      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a42:	d10d      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8005a44:	4b4c      	ldr	r3, [pc, #304]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a46:	691b      	ldr	r3, [r3, #16]
 8005a48:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a52:	0919      	lsrs	r1, r3, #4
 8005a54:	4b4a      	ldr	r3, [pc, #296]	; (8005b80 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8005a56:	400b      	ands	r3, r1
 8005a58:	4947      	ldr	r1, [pc, #284]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	610b      	str	r3, [r1, #16]
 8005a5e:	e005      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8005a60:	4b45      	ldr	r3, [pc, #276]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	4a44      	ldr	r2, [pc, #272]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a66:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a6a:	6113      	str	r3, [r2, #16]
 8005a6c:	4b42      	ldr	r3, [pc, #264]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a6e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a7a:	493f      	ldr	r1, [pc, #252]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	670b      	str	r3, [r1, #112]	; 0x70
 8005a80:	e004      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
 8005a84:	75bb      	strb	r3, [r7, #22]
 8005a86:	e001      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a88:	7dfb      	ldrb	r3, [r7, #23]
 8005a8a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0301 	and.w	r3, r3, #1
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 8085 	beq.w	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a9e:	2b28      	cmp	r3, #40	; 0x28
 8005aa0:	d866      	bhi.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8005aa2:	a201      	add	r2, pc, #4	; (adr r2, 8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8005aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aa8:	08005b85 	.word	0x08005b85
 8005aac:	08005b71 	.word	0x08005b71
 8005ab0:	08005b71 	.word	0x08005b71
 8005ab4:	08005b71 	.word	0x08005b71
 8005ab8:	08005b71 	.word	0x08005b71
 8005abc:	08005b71 	.word	0x08005b71
 8005ac0:	08005b71 	.word	0x08005b71
 8005ac4:	08005b71 	.word	0x08005b71
 8005ac8:	08005b4d 	.word	0x08005b4d
 8005acc:	08005b71 	.word	0x08005b71
 8005ad0:	08005b71 	.word	0x08005b71
 8005ad4:	08005b71 	.word	0x08005b71
 8005ad8:	08005b71 	.word	0x08005b71
 8005adc:	08005b71 	.word	0x08005b71
 8005ae0:	08005b71 	.word	0x08005b71
 8005ae4:	08005b71 	.word	0x08005b71
 8005ae8:	08005b5f 	.word	0x08005b5f
 8005aec:	08005b71 	.word	0x08005b71
 8005af0:	08005b71 	.word	0x08005b71
 8005af4:	08005b71 	.word	0x08005b71
 8005af8:	08005b71 	.word	0x08005b71
 8005afc:	08005b71 	.word	0x08005b71
 8005b00:	08005b71 	.word	0x08005b71
 8005b04:	08005b71 	.word	0x08005b71
 8005b08:	08005b85 	.word	0x08005b85
 8005b0c:	08005b71 	.word	0x08005b71
 8005b10:	08005b71 	.word	0x08005b71
 8005b14:	08005b71 	.word	0x08005b71
 8005b18:	08005b71 	.word	0x08005b71
 8005b1c:	08005b71 	.word	0x08005b71
 8005b20:	08005b71 	.word	0x08005b71
 8005b24:	08005b71 	.word	0x08005b71
 8005b28:	08005b85 	.word	0x08005b85
 8005b2c:	08005b71 	.word	0x08005b71
 8005b30:	08005b71 	.word	0x08005b71
 8005b34:	08005b71 	.word	0x08005b71
 8005b38:	08005b71 	.word	0x08005b71
 8005b3c:	08005b71 	.word	0x08005b71
 8005b40:	08005b71 	.word	0x08005b71
 8005b44:	08005b71 	.word	0x08005b71
 8005b48:	08005b85 	.word	0x08005b85
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3304      	adds	r3, #4
 8005b50:	2101      	movs	r1, #1
 8005b52:	4618      	mov	r0, r3
 8005b54:	f001 fc1e 	bl	8007394 <RCCEx_PLL2_Config>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005b5c:	e013      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	3324      	adds	r3, #36	; 0x24
 8005b62:	2101      	movs	r1, #1
 8005b64:	4618      	mov	r0, r3
 8005b66:	f001 fcc7 	bl	80074f8 <RCCEx_PLL3_Config>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005b6e:	e00a      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	75fb      	strb	r3, [r7, #23]
      break;
 8005b74:	e007      	b.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005b76:	bf00      	nop
 8005b78:	58024400 	.word	0x58024400
 8005b7c:	58024800 	.word	0x58024800
 8005b80:	00ffffcf 	.word	0x00ffffcf
      break;
 8005b84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b86:	7dfb      	ldrb	r3, [r7, #23]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d109      	bne.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005b8c:	4b96      	ldr	r3, [pc, #600]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b90:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b98:	4993      	ldr	r1, [pc, #588]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	654b      	str	r3, [r1, #84]	; 0x54
 8005b9e:	e001      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ba0:	7dfb      	ldrb	r3, [r7, #23]
 8005ba2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0302 	and.w	r3, r3, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d038      	beq.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bb4:	2b05      	cmp	r3, #5
 8005bb6:	d821      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8005bb8:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8005bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbe:	bf00      	nop
 8005bc0:	08005c03 	.word	0x08005c03
 8005bc4:	08005bd9 	.word	0x08005bd9
 8005bc8:	08005beb 	.word	0x08005beb
 8005bcc:	08005c03 	.word	0x08005c03
 8005bd0:	08005c03 	.word	0x08005c03
 8005bd4:	08005c03 	.word	0x08005c03
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3304      	adds	r3, #4
 8005bdc:	2101      	movs	r1, #1
 8005bde:	4618      	mov	r0, r3
 8005be0:	f001 fbd8 	bl	8007394 <RCCEx_PLL2_Config>
 8005be4:	4603      	mov	r3, r0
 8005be6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005be8:	e00c      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	3324      	adds	r3, #36	; 0x24
 8005bee:	2101      	movs	r1, #1
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f001 fc81 	bl	80074f8 <RCCEx_PLL3_Config>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005bfa:	e003      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	75fb      	strb	r3, [r7, #23]
      break;
 8005c00:	e000      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8005c02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c04:	7dfb      	ldrb	r3, [r7, #23]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d109      	bne.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005c0a:	4b77      	ldr	r3, [pc, #476]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0e:	f023 0207 	bic.w	r2, r3, #7
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c16:	4974      	ldr	r1, [pc, #464]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	654b      	str	r3, [r1, #84]	; 0x54
 8005c1c:	e001      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
 8005c20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 0304 	and.w	r3, r3, #4
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d03a      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c34:	2b05      	cmp	r3, #5
 8005c36:	d821      	bhi.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8005c38:	a201      	add	r2, pc, #4	; (adr r2, 8005c40 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8005c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c3e:	bf00      	nop
 8005c40:	08005c83 	.word	0x08005c83
 8005c44:	08005c59 	.word	0x08005c59
 8005c48:	08005c6b 	.word	0x08005c6b
 8005c4c:	08005c83 	.word	0x08005c83
 8005c50:	08005c83 	.word	0x08005c83
 8005c54:	08005c83 	.word	0x08005c83
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	2101      	movs	r1, #1
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f001 fb98 	bl	8007394 <RCCEx_PLL2_Config>
 8005c64:	4603      	mov	r3, r0
 8005c66:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c68:	e00c      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3324      	adds	r3, #36	; 0x24
 8005c6e:	2101      	movs	r1, #1
 8005c70:	4618      	mov	r0, r3
 8005c72:	f001 fc41 	bl	80074f8 <RCCEx_PLL3_Config>
 8005c76:	4603      	mov	r3, r0
 8005c78:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005c7a:	e003      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c80:	e000      	b.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8005c82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c84:	7dfb      	ldrb	r3, [r7, #23]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c8a:	4b57      	ldr	r3, [pc, #348]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8e:	f023 0207 	bic.w	r2, r3, #7
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c98:	4953      	ldr	r1, [pc, #332]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	658b      	str	r3, [r1, #88]	; 0x58
 8005c9e:	e001      	b.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ca0:	7dfb      	ldrb	r3, [r7, #23]
 8005ca2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0320 	and.w	r3, r3, #32
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d04b      	beq.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cba:	d02e      	beq.n	8005d1a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8005cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cc0:	d828      	bhi.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc6:	d02a      	beq.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8005cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ccc:	d822      	bhi.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005cce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005cd2:	d026      	beq.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8005cd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005cd8:	d81c      	bhi.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005cda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cde:	d010      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8005ce0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ce4:	d816      	bhi.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d01d      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8005cea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cee:	d111      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	3304      	adds	r3, #4
 8005cf4:	2100      	movs	r1, #0
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 fb4c 	bl	8007394 <RCCEx_PLL2_Config>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005d00:	e012      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3324      	adds	r3, #36	; 0x24
 8005d06:	2102      	movs	r1, #2
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f001 fbf5 	bl	80074f8 <RCCEx_PLL3_Config>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005d12:	e009      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	75fb      	strb	r3, [r7, #23]
      break;
 8005d18:	e006      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005d1a:	bf00      	nop
 8005d1c:	e004      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005d1e:	bf00      	nop
 8005d20:	e002      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005d22:	bf00      	nop
 8005d24:	e000      	b.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8005d26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d28:	7dfb      	ldrb	r3, [r7, #23]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10a      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d2e:	4b2e      	ldr	r3, [pc, #184]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d32:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d3c:	492a      	ldr	r1, [pc, #168]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	654b      	str	r3, [r1, #84]	; 0x54
 8005d42:	e001      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d44:	7dfb      	ldrb	r3, [r7, #23]
 8005d46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d04d      	beq.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005d5a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d5e:	d02e      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8005d60:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005d64:	d828      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d6a:	d02a      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005d6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d70:	d822      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d76:	d026      	beq.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8005d78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d7c:	d81c      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d82:	d010      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8005d84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d88:	d816      	bhi.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d01d      	beq.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8005d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d92:	d111      	bne.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	3304      	adds	r3, #4
 8005d98:	2100      	movs	r1, #0
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f001 fafa 	bl	8007394 <RCCEx_PLL2_Config>
 8005da0:	4603      	mov	r3, r0
 8005da2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005da4:	e012      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3324      	adds	r3, #36	; 0x24
 8005daa:	2102      	movs	r1, #2
 8005dac:	4618      	mov	r0, r3
 8005dae:	f001 fba3 	bl	80074f8 <RCCEx_PLL3_Config>
 8005db2:	4603      	mov	r3, r0
 8005db4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005db6:	e009      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	75fb      	strb	r3, [r7, #23]
      break;
 8005dbc:	e006      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005dbe:	bf00      	nop
 8005dc0:	e004      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005dc2:	bf00      	nop
 8005dc4:	e002      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005dc6:	bf00      	nop
 8005dc8:	e000      	b.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8005dca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dcc:	7dfb      	ldrb	r3, [r7, #23]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10c      	bne.n	8005dec <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005dd2:	4b05      	ldr	r3, [pc, #20]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dd6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005de0:	4901      	ldr	r1, [pc, #4]	; (8005de8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8005de2:	4313      	orrs	r3, r2
 8005de4:	658b      	str	r3, [r1, #88]	; 0x58
 8005de6:	e003      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8005de8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dec:	7dfb      	ldrb	r3, [r7, #23]
 8005dee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d04b      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e02:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e06:	d02e      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8005e08:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005e0c:	d828      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005e0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e12:	d02a      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8005e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e18:	d822      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005e1a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e1e:	d026      	beq.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8005e20:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005e24:	d81c      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005e26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e2a:	d010      	beq.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8005e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e30:	d816      	bhi.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d01d      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8005e36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e3a:	d111      	bne.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	3304      	adds	r3, #4
 8005e40:	2100      	movs	r1, #0
 8005e42:	4618      	mov	r0, r3
 8005e44:	f001 faa6 	bl	8007394 <RCCEx_PLL2_Config>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005e4c:	e012      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	3324      	adds	r3, #36	; 0x24
 8005e52:	2102      	movs	r1, #2
 8005e54:	4618      	mov	r0, r3
 8005e56:	f001 fb4f 	bl	80074f8 <RCCEx_PLL3_Config>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8005e5e:	e009      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	75fb      	strb	r3, [r7, #23]
      break;
 8005e64:	e006      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e66:	bf00      	nop
 8005e68:	e004      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e6a:	bf00      	nop
 8005e6c:	e002      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e6e:	bf00      	nop
 8005e70:	e000      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8005e72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e74:	7dfb      	ldrb	r3, [r7, #23]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10a      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e7a:	4b9d      	ldr	r3, [pc, #628]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e88:	4999      	ldr	r1, [pc, #612]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	658b      	str	r3, [r1, #88]	; 0x58
 8005e8e:	e001      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
 8005e92:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d01a      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eaa:	d10a      	bne.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3324      	adds	r3, #36	; 0x24
 8005eb0:	2102      	movs	r1, #2
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f001 fb20 	bl	80074f8 <RCCEx_PLL3_Config>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005ec2:	4b8b      	ldr	r3, [pc, #556]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ed0:	4987      	ldr	r1, [pc, #540]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0310 	and.w	r3, r3, #16
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d01a      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005eec:	d10a      	bne.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3324      	adds	r3, #36	; 0x24
 8005ef2:	2102      	movs	r1, #2
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f001 faff 	bl	80074f8 <RCCEx_PLL3_Config>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d001      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f04:	4b7a      	ldr	r3, [pc, #488]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f12:	4977      	ldr	r1, [pc, #476]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f14:	4313      	orrs	r3, r2
 8005f16:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d034      	beq.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f2e:	d01d      	beq.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8005f30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f34:	d817      	bhi.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d003      	beq.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f3e:	d009      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8005f40:	e011      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	3304      	adds	r3, #4
 8005f46:	2100      	movs	r1, #0
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f001 fa23 	bl	8007394 <RCCEx_PLL2_Config>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005f52:	e00c      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3324      	adds	r3, #36	; 0x24
 8005f58:	2102      	movs	r1, #2
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f001 facc 	bl	80074f8 <RCCEx_PLL3_Config>
 8005f60:	4603      	mov	r3, r0
 8005f62:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005f64:	e003      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	75fb      	strb	r3, [r7, #23]
      break;
 8005f6a:	e000      	b.n	8005f6e <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8005f6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f6e:	7dfb      	ldrb	r3, [r7, #23]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f74:	4b5e      	ldr	r3, [pc, #376]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f82:	495b      	ldr	r1, [pc, #364]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	658b      	str	r3, [r1, #88]	; 0x58
 8005f88:	e001      	b.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f8a:	7dfb      	ldrb	r3, [r7, #23]
 8005f8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d033      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fa0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005fa4:	d01c      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8005fa6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005faa:	d816      	bhi.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8005fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fb0:	d003      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8005fb2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005fb6:	d007      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8005fb8:	e00f      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fba:	4b4d      	ldr	r3, [pc, #308]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbe:	4a4c      	ldr	r2, [pc, #304]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005fc4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005fc6:	e00c      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3324      	adds	r3, #36	; 0x24
 8005fcc:	2101      	movs	r1, #1
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f001 fa92 	bl	80074f8 <RCCEx_PLL3_Config>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005fd8:	e003      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	75fb      	strb	r3, [r7, #23]
      break;
 8005fde:	e000      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8005fe0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005fe2:	7dfb      	ldrb	r3, [r7, #23]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10a      	bne.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fe8:	4b41      	ldr	r3, [pc, #260]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ff6:	493e      	ldr	r1, [pc, #248]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	654b      	str	r3, [r1, #84]	; 0x54
 8005ffc:	e001      	b.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ffe:	7dfb      	ldrb	r3, [r7, #23]
 8006000:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800600a:	2b00      	cmp	r3, #0
 800600c:	d029      	beq.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8006016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800601a:	d007      	beq.n	800602c <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800601c:	e00f      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800601e:	4b34      	ldr	r3, [pc, #208]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006022:	4a33      	ldr	r2, [pc, #204]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006028:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800602a:	e00b      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3304      	adds	r3, #4
 8006030:	2102      	movs	r1, #2
 8006032:	4618      	mov	r0, r3
 8006034:	f001 f9ae 	bl	8007394 <RCCEx_PLL2_Config>
 8006038:	4603      	mov	r3, r0
 800603a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800603c:	e002      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800603e:	2301      	movs	r3, #1
 8006040:	75fb      	strb	r3, [r7, #23]
      break;
 8006042:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006044:	7dfb      	ldrb	r3, [r7, #23]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d109      	bne.n	800605e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800604a:	4b29      	ldr	r3, [pc, #164]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800604c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006056:	4926      	ldr	r1, [pc, #152]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006058:	4313      	orrs	r3, r2
 800605a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800605c:	e001      	b.n	8006062 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800605e:	7dfb      	ldrb	r3, [r7, #23]
 8006060:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	3324      	adds	r3, #36	; 0x24
 8006072:	2102      	movs	r1, #2
 8006074:	4618      	mov	r0, r3
 8006076:	f001 fa3f 	bl	80074f8 <RCCEx_PLL3_Config>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d001      	beq.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d033      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006094:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006098:	d017      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800609a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800609e:	d811      	bhi.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80060a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060a4:	d013      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80060a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060aa:	d80b      	bhi.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d010      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80060b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060b4:	d106      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060b6:	4b0e      	ldr	r3, [pc, #56]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ba:	4a0d      	ldr	r2, [pc, #52]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80060c2:	e007      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	75fb      	strb	r3, [r7, #23]
      break;
 80060c8:	e004      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80060ca:	bf00      	nop
 80060cc:	e002      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80060ce:	bf00      	nop
 80060d0:	e000      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80060d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10c      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060da:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060e6:	4902      	ldr	r1, [pc, #8]	; (80060f0 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	654b      	str	r3, [r1, #84]	; 0x54
 80060ec:	e004      	b.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80060ee:	bf00      	nop
 80060f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060f4:	7dfb      	ldrb	r3, [r7, #23]
 80060f6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d008      	beq.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006104:	4b31      	ldr	r3, [pc, #196]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006108:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006110:	492e      	ldr	r1, [pc, #184]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006112:	4313      	orrs	r3, r2
 8006114:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800611e:	2b00      	cmp	r3, #0
 8006120:	d009      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006122:	4b2a      	ldr	r3, [pc, #168]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006130:	4926      	ldr	r1, [pc, #152]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006132:	4313      	orrs	r3, r2
 8006134:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d008      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006142:	4b22      	ldr	r3, [pc, #136]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006146:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800614e:	491f      	ldr	r1, [pc, #124]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006150:	4313      	orrs	r3, r2
 8006152:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00d      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006160:	4b1a      	ldr	r3, [pc, #104]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	4a19      	ldr	r2, [pc, #100]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006166:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800616a:	6113      	str	r3, [r2, #16]
 800616c:	4b17      	ldr	r3, [pc, #92]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800616e:	691a      	ldr	r2, [r3, #16]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006176:	4915      	ldr	r1, [pc, #84]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006178:	4313      	orrs	r3, r2
 800617a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	2b00      	cmp	r3, #0
 8006182:	da08      	bge.n	8006196 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006184:	4b11      	ldr	r3, [pc, #68]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006188:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006190:	490e      	ldr	r1, [pc, #56]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006192:	4313      	orrs	r3, r2
 8006194:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d009      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80061a2:	4b0a      	ldr	r3, [pc, #40]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80061a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b0:	4906      	ldr	r1, [pc, #24]	; (80061cc <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80061b2:	4313      	orrs	r3, r2
 80061b4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80061b6:	7dbb      	ldrb	r3, [r7, #22]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d101      	bne.n	80061c0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	e000      	b.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	58024400 	.word	0x58024400

080061d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b090      	sub	sp, #64	; 0x40
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061de:	f040 8095 	bne.w	800630c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80061e2:	4b97      	ldr	r3, [pc, #604]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80061e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e6:	f003 0307 	and.w	r3, r3, #7
 80061ea:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80061ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	f200 8088 	bhi.w	8006304 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80061f4:	a201      	add	r2, pc, #4	; (adr r2, 80061fc <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80061f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061fa:	bf00      	nop
 80061fc:	08006211 	.word	0x08006211
 8006200:	08006239 	.word	0x08006239
 8006204:	08006261 	.word	0x08006261
 8006208:	080062fd 	.word	0x080062fd
 800620c:	08006289 	.word	0x08006289
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006210:	4b8b      	ldr	r3, [pc, #556]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006218:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800621c:	d108      	bne.n	8006230 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800621e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006222:	4618      	mov	r0, r3
 8006224:	f000 ff64 	bl	80070f0 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8006228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800622a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800622c:	f000 bc94 	b.w	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006230:	2300      	movs	r3, #0
 8006232:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006234:	f000 bc90 	b.w	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006238:	4b81      	ldr	r3, [pc, #516]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006244:	d108      	bne.n	8006258 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006246:	f107 0318 	add.w	r3, r7, #24
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fca8 	bl	8006ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006254:	f000 bc80 	b.w	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006258:	2300      	movs	r3, #0
 800625a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800625c:	f000 bc7c 	b.w	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006260:	4b77      	ldr	r3, [pc, #476]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800626c:	d108      	bne.n	8006280 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800626e:	f107 030c 	add.w	r3, r7, #12
 8006272:	4618      	mov	r0, r3
 8006274:	f000 fde8 	bl	8006e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800627c:	f000 bc6c 	b.w	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006280:	2300      	movs	r3, #0
 8006282:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006284:	f000 bc68 	b.w	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006288:	4b6d      	ldr	r3, [pc, #436]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800628a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800628c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006290:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006292:	4b6b      	ldr	r3, [pc, #428]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0304 	and.w	r3, r3, #4
 800629a:	2b04      	cmp	r3, #4
 800629c:	d10c      	bne.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 800629e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d109      	bne.n	80062b8 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062a4:	4b66      	ldr	r3, [pc, #408]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	08db      	lsrs	r3, r3, #3
 80062aa:	f003 0303 	and.w	r3, r3, #3
 80062ae:	4a65      	ldr	r2, [pc, #404]	; (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80062b0:	fa22 f303 	lsr.w	r3, r2, r3
 80062b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062b6:	e01f      	b.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80062b8:	4b61      	ldr	r3, [pc, #388]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062c4:	d106      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80062c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062cc:	d102      	bne.n	80062d4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80062ce:	4b5e      	ldr	r3, [pc, #376]	; (8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80062d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062d2:	e011      	b.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80062d4:	4b5a      	ldr	r3, [pc, #360]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062e0:	d106      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80062e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062e8:	d102      	bne.n	80062f0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80062ea:	4b58      	ldr	r3, [pc, #352]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80062ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062ee:	e003      	b.n	80062f8 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80062f0:	2300      	movs	r3, #0
 80062f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80062f4:	f000 bc30 	b.w	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80062f8:	f000 bc2e 	b.w	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80062fc:	4b54      	ldr	r3, [pc, #336]	; (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80062fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006300:	f000 bc2a 	b.w	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006304:	2300      	movs	r3, #0
 8006306:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006308:	f000 bc26 	b.w	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006312:	f040 809f 	bne.w	8006454 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006316:	4b4a      	ldr	r3, [pc, #296]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800631a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800631e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006326:	d04d      	beq.n	80063c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800632e:	f200 8084 	bhi.w	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8006332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006334:	2bc0      	cmp	r3, #192	; 0xc0
 8006336:	d07d      	beq.n	8006434 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	2bc0      	cmp	r3, #192	; 0xc0
 800633c:	d87d      	bhi.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800633e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006340:	2b80      	cmp	r3, #128	; 0x80
 8006342:	d02d      	beq.n	80063a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006346:	2b80      	cmp	r3, #128	; 0x80
 8006348:	d877      	bhi.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800634a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8006350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006352:	2b40      	cmp	r3, #64	; 0x40
 8006354:	d012      	beq.n	800637c <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8006356:	e070      	b.n	800643a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006358:	4b39      	ldr	r3, [pc, #228]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006360:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006364:	d107      	bne.n	8006376 <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800636a:	4618      	mov	r0, r3
 800636c:	f000 fec0 	bl	80070f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006372:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006374:	e3f0      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006376:	2300      	movs	r3, #0
 8006378:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800637a:	e3ed      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800637c:	4b30      	ldr	r3, [pc, #192]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006384:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006388:	d107      	bne.n	800639a <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800638a:	f107 0318 	add.w	r3, r7, #24
 800638e:	4618      	mov	r0, r3
 8006390:	f000 fc06 	bl	8006ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006398:	e3de      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800639a:	2300      	movs	r3, #0
 800639c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800639e:	e3db      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80063a0:	4b27      	ldr	r3, [pc, #156]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80063ac:	d107      	bne.n	80063be <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063ae:	f107 030c 	add.w	r3, r7, #12
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fd48 	bl	8006e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80063bc:	e3cc      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80063be:	2300      	movs	r3, #0
 80063c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80063c2:	e3c9      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80063c4:	4b1e      	ldr	r3, [pc, #120]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80063c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80063ce:	4b1c      	ldr	r3, [pc, #112]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0304 	and.w	r3, r3, #4
 80063d6:	2b04      	cmp	r3, #4
 80063d8:	d10c      	bne.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80063da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d109      	bne.n	80063f4 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80063e0:	4b17      	ldr	r3, [pc, #92]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	08db      	lsrs	r3, r3, #3
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	4a16      	ldr	r2, [pc, #88]	; (8006444 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80063ec:	fa22 f303 	lsr.w	r3, r2, r3
 80063f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063f2:	e01e      	b.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80063f4:	4b12      	ldr	r3, [pc, #72]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006400:	d106      	bne.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006404:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006408:	d102      	bne.n	8006410 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800640a:	4b0f      	ldr	r3, [pc, #60]	; (8006448 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800640c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800640e:	e010      	b.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006410:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006418:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800641c:	d106      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800641e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006420:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006424:	d102      	bne.n	800642c <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006426:	4b09      	ldr	r3, [pc, #36]	; (800644c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006428:	63fb      	str	r3, [r7, #60]	; 0x3c
 800642a:	e002      	b.n	8006432 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800642c:	2300      	movs	r3, #0
 800642e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006430:	e392      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006432:	e391      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006436:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006438:	e38e      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800643a:	2300      	movs	r3, #0
 800643c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800643e:	e38b      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006440:	58024400 	.word	0x58024400
 8006444:	03d09000 	.word	0x03d09000
 8006448:	003d0900 	.word	0x003d0900
 800644c:	007a1200 	.word	0x007a1200
 8006450:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800645a:	f040 809c 	bne.w	8006596 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800645e:	4b9d      	ldr	r3, [pc, #628]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006462:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006466:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800646e:	d054      	beq.n	800651a <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8006470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006472:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006476:	f200 808b 	bhi.w	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006480:	f000 8083 	beq.w	800658a <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800648a:	f200 8081 	bhi.w	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006494:	d02f      	beq.n	80064f6 <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800649c:	d878      	bhi.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800649e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d004      	beq.n	80064ae <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80064a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064aa:	d012      	beq.n	80064d2 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80064ac:	e070      	b.n	8006590 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80064ae:	4b89      	ldr	r3, [pc, #548]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064ba:	d107      	bne.n	80064cc <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80064bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 fe15 	bl	80070f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80064ca:	e345      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80064cc:	2300      	movs	r3, #0
 80064ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064d0:	e342      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80064d2:	4b80      	ldr	r3, [pc, #512]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80064de:	d107      	bne.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064e0:	f107 0318 	add.w	r3, r7, #24
 80064e4:	4618      	mov	r0, r3
 80064e6:	f000 fb5b 	bl	8006ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80064ee:	e333      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80064f0:	2300      	movs	r3, #0
 80064f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80064f4:	e330      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80064f6:	4b77      	ldr	r3, [pc, #476]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006502:	d107      	bne.n	8006514 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006504:	f107 030c 	add.w	r3, r7, #12
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fc9d 	bl	8006e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006512:	e321      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006514:	2300      	movs	r3, #0
 8006516:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006518:	e31e      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800651a:	4b6e      	ldr	r3, [pc, #440]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800651c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800651e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006522:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006524:	4b6b      	ldr	r3, [pc, #428]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0304 	and.w	r3, r3, #4
 800652c:	2b04      	cmp	r3, #4
 800652e:	d10c      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8006530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006532:	2b00      	cmp	r3, #0
 8006534:	d109      	bne.n	800654a <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006536:	4b67      	ldr	r3, [pc, #412]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	08db      	lsrs	r3, r3, #3
 800653c:	f003 0303 	and.w	r3, r3, #3
 8006540:	4a65      	ldr	r2, [pc, #404]	; (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006542:	fa22 f303 	lsr.w	r3, r2, r3
 8006546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006548:	e01e      	b.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800654a:	4b62      	ldr	r3, [pc, #392]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006556:	d106      	bne.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 8006558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800655a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800655e:	d102      	bne.n	8006566 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8006560:	4b5e      	ldr	r3, [pc, #376]	; (80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8006562:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006564:	e010      	b.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006566:	4b5b      	ldr	r3, [pc, #364]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800656e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006572:	d106      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8006574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800657a:	d102      	bne.n	8006582 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800657c:	4b58      	ldr	r3, [pc, #352]	; (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 800657e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006580:	e002      	b.n	8006588 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006582:	2300      	movs	r3, #0
 8006584:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006586:	e2e7      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006588:	e2e6      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800658a:	4b56      	ldr	r3, [pc, #344]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800658c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800658e:	e2e3      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8006590:	2300      	movs	r3, #0
 8006592:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006594:	e2e0      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800659c:	f040 80a7 	bne.w	80066ee <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80065a0:	4b4c      	ldr	r3, [pc, #304]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80065a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80065a8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065b0:	d055      	beq.n	800665e <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80065b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80065b8:	f200 8096 	bhi.w	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80065c2:	f000 8084 	beq.w	80066ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80065cc:	f200 808c 	bhi.w	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80065d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065d6:	d030      	beq.n	800663a <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065de:	f200 8083 	bhi.w	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80065e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d004      	beq.n	80065f2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065ee:	d012      	beq.n	8006616 <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80065f0:	e07a      	b.n	80066e8 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80065f2:	4b38      	ldr	r3, [pc, #224]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065fe:	d107      	bne.n	8006610 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006600:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006604:	4618      	mov	r0, r3
 8006606:	f000 fd73 	bl	80070f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800660e:	e2a3      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006610:	2300      	movs	r3, #0
 8006612:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006614:	e2a0      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006616:	4b2f      	ldr	r3, [pc, #188]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800661e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006622:	d107      	bne.n	8006634 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006624:	f107 0318 	add.w	r3, r7, #24
 8006628:	4618      	mov	r0, r3
 800662a:	f000 fab9 	bl	8006ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8006632:	e291      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006638:	e28e      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800663a:	4b26      	ldr	r3, [pc, #152]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006646:	d107      	bne.n	8006658 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006648:	f107 030c 	add.w	r3, r7, #12
 800664c:	4618      	mov	r0, r3
 800664e:	f000 fbfb 	bl	8006e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006656:	e27f      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006658:	2300      	movs	r3, #0
 800665a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800665c:	e27c      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800665e:	4b1d      	ldr	r3, [pc, #116]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006662:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006666:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8006668:	4b1a      	ldr	r3, [pc, #104]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f003 0304 	and.w	r3, r3, #4
 8006670:	2b04      	cmp	r3, #4
 8006672:	d10c      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8006674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006676:	2b00      	cmp	r3, #0
 8006678:	d109      	bne.n	800668e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800667a:	4b16      	ldr	r3, [pc, #88]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	08db      	lsrs	r3, r3, #3
 8006680:	f003 0303 	and.w	r3, r3, #3
 8006684:	4a14      	ldr	r2, [pc, #80]	; (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8006686:	fa22 f303 	lsr.w	r3, r2, r3
 800668a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800668c:	e01e      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800668e:	4b11      	ldr	r3, [pc, #68]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800669a:	d106      	bne.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 800669c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800669e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066a2:	d102      	bne.n	80066aa <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80066a4:	4b0d      	ldr	r3, [pc, #52]	; (80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 80066a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066a8:	e010      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80066aa:	4b0a      	ldr	r3, [pc, #40]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066b6:	d106      	bne.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 80066b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80066be:	d102      	bne.n	80066c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80066c0:	4b07      	ldr	r3, [pc, #28]	; (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 80066c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c4:	e002      	b.n	80066cc <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80066c6:	2300      	movs	r3, #0
 80066c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80066ca:	e245      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80066cc:	e244      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80066ce:	4b05      	ldr	r3, [pc, #20]	; (80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80066d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066d2:	e241      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80066d4:	58024400 	.word	0x58024400
 80066d8:	03d09000 	.word	0x03d09000
 80066dc:	003d0900 	.word	0x003d0900
 80066e0:	007a1200 	.word	0x007a1200
 80066e4:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 80066e8:	2300      	movs	r3, #0
 80066ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80066ec:	e234      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066f4:	f040 809c 	bne.w	8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80066f8:	4b9b      	ldr	r3, [pc, #620]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80066fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fc:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8006700:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006704:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006708:	d054      	beq.n	80067b4 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 800670a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800670c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006710:	f200 808b 	bhi.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006716:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800671a:	f000 8083 	beq.w	8006824 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 800671e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006720:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006724:	f200 8081 	bhi.w	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800672a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800672e:	d02f      	beq.n	8006790 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8006730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006736:	d878      	bhi.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8006738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006744:	d012      	beq.n	800676c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8006746:	e070      	b.n	800682a <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006748:	4b87      	ldr	r3, [pc, #540]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006750:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006754:	d107      	bne.n	8006766 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800675a:	4618      	mov	r0, r3
 800675c:	f000 fcc8 	bl	80070f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006764:	e1f8      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006766:	2300      	movs	r3, #0
 8006768:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800676a:	e1f5      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800676c:	4b7e      	ldr	r3, [pc, #504]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006774:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006778:	d107      	bne.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800677a:	f107 0318 	add.w	r3, r7, #24
 800677e:	4618      	mov	r0, r3
 8006780:	f000 fa0e 	bl	8006ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006788:	e1e6      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800678a:	2300      	movs	r3, #0
 800678c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800678e:	e1e3      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006790:	4b75      	ldr	r3, [pc, #468]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800679c:	d107      	bne.n	80067ae <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800679e:	f107 030c 	add.w	r3, r7, #12
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 fb50 	bl	8006e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80067ac:	e1d4      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80067ae:	2300      	movs	r3, #0
 80067b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80067b2:	e1d1      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80067b4:	4b6c      	ldr	r3, [pc, #432]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80067b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067bc:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80067be:	4b6a      	ldr	r3, [pc, #424]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0304 	and.w	r3, r3, #4
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d10c      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80067ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d109      	bne.n	80067e4 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80067d0:	4b65      	ldr	r3, [pc, #404]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	08db      	lsrs	r3, r3, #3
 80067d6:	f003 0303 	and.w	r3, r3, #3
 80067da:	4a64      	ldr	r2, [pc, #400]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80067dc:	fa22 f303 	lsr.w	r3, r2, r3
 80067e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067e2:	e01e      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80067e4:	4b60      	ldr	r3, [pc, #384]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067f0:	d106      	bne.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 80067f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80067f8:	d102      	bne.n	8006800 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80067fa:	4b5d      	ldr	r3, [pc, #372]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80067fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067fe:	e010      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8006800:	4b59      	ldr	r3, [pc, #356]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006808:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800680c:	d106      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800680e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006814:	d102      	bne.n	800681c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8006816:	4b57      	ldr	r3, [pc, #348]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8006818:	63fb      	str	r3, [r7, #60]	; 0x3c
 800681a:	e002      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 800681c:	2300      	movs	r3, #0
 800681e:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006820:	e19a      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006822:	e199      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006824:	4b54      	ldr	r3, [pc, #336]	; (8006978 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8006826:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006828:	e196      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800682a:	2300      	movs	r3, #0
 800682c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800682e:	e193      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006836:	d173      	bne.n	8006920 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8006838:	4b4b      	ldr	r3, [pc, #300]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800683a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800683c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006840:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006842:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006848:	d02f      	beq.n	80068aa <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 800684a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800684c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006850:	d863      	bhi.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8006852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006854:	2b00      	cmp	r3, #0
 8006856:	d004      	beq.n	8006862 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8006858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800685e:	d012      	beq.n	8006886 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8006860:	e05b      	b.n	800691a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006862:	4b41      	ldr	r3, [pc, #260]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800686a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800686e:	d107      	bne.n	8006880 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006870:	f107 0318 	add.w	r3, r7, #24
 8006874:	4618      	mov	r0, r3
 8006876:	f000 f993 	bl	8006ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800687e:	e16b      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006880:	2300      	movs	r3, #0
 8006882:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006884:	e168      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006886:	4b38      	ldr	r3, [pc, #224]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800688e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006892:	d107      	bne.n	80068a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006894:	f107 030c 	add.w	r3, r7, #12
 8006898:	4618      	mov	r0, r3
 800689a:	f000 fad5 	bl	8006e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80068a2:	e159      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80068a8:	e156      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80068aa:	4b2f      	ldr	r3, [pc, #188]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80068ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068ae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80068b2:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80068b4:	4b2c      	ldr	r3, [pc, #176]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b04      	cmp	r3, #4
 80068be:	d10c      	bne.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 80068c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d109      	bne.n	80068da <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80068c6:	4b28      	ldr	r3, [pc, #160]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	08db      	lsrs	r3, r3, #3
 80068cc:	f003 0303 	and.w	r3, r3, #3
 80068d0:	4a26      	ldr	r2, [pc, #152]	; (800696c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 80068d2:	fa22 f303 	lsr.w	r3, r2, r3
 80068d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068d8:	e01e      	b.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80068da:	4b23      	ldr	r3, [pc, #140]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068e6:	d106      	bne.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 80068e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068ee:	d102      	bne.n	80068f6 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80068f0:	4b1f      	ldr	r3, [pc, #124]	; (8006970 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 80068f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068f4:	e010      	b.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80068f6:	4b1c      	ldr	r3, [pc, #112]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006902:	d106      	bne.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8006904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006906:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800690a:	d102      	bne.n	8006912 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800690c:	4b19      	ldr	r3, [pc, #100]	; (8006974 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 800690e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006910:	e002      	b.n	8006918 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8006916:	e11f      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006918:	e11e      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 800691a:	2300      	movs	r3, #0
 800691c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800691e:	e11b      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006926:	d13e      	bne.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8006928:	4b0f      	ldr	r3, [pc, #60]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 800692a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800692c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006930:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8006938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800693e:	d01d      	beq.n	800697c <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8006940:	e02e      	b.n	80069a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006942:	4b09      	ldr	r3, [pc, #36]	; (8006968 <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800694a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800694e:	d107      	bne.n	8006960 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006950:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006954:	4618      	mov	r0, r3
 8006956:	f000 fbcb 	bl	80070f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800695a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 800695e:	e0fb      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006964:	e0f8      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006966:	bf00      	nop
 8006968:	58024400 	.word	0x58024400
 800696c:	03d09000 	.word	0x03d09000
 8006970:	003d0900 	.word	0x003d0900
 8006974:	007a1200 	.word	0x007a1200
 8006978:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800697c:	4b79      	ldr	r3, [pc, #484]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006988:	d107      	bne.n	800699a <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800698a:	f107 0318 	add.w	r3, r7, #24
 800698e:	4618      	mov	r0, r3
 8006990:	f000 f906 	bl	8006ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006998:	e0de      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800699e:	e0db      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 80069a0:	2300      	movs	r3, #0
 80069a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80069a4:	e0d8      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80069ac:	f040 8085 	bne.w	8006aba <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80069b0:	4b6c      	ldr	r3, [pc, #432]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 80069b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069b4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80069b8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80069ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069c0:	d06b      	beq.n	8006a9a <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80069c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069c8:	d874      	bhi.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80069ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d0:	d056      	beq.n	8006a80 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80069d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069d8:	d86c      	bhi.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80069da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069e0:	d03b      	beq.n	8006a5a <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80069e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80069e8:	d864      	bhi.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80069ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069f0:	d021      	beq.n	8006a36 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80069f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069f8:	d85c      	bhi.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80069fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d004      	beq.n	8006a0a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8006a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a06:	d004      	beq.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8006a08:	e054      	b.n	8006ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8006a0a:	f000 f8b3 	bl	8006b74 <HAL_RCCEx_GetD3PCLK1Freq>
 8006a0e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8006a10:	e0a2      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006a12:	4b54      	ldr	r3, [pc, #336]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a1e:	d107      	bne.n	8006a30 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006a20:	f107 0318 	add.w	r3, r7, #24
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 f8bb 	bl	8006ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006a2a:	69fb      	ldr	r3, [r7, #28]
 8006a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a2e:	e093      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006a30:	2300      	movs	r3, #0
 8006a32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a34:	e090      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8006a36:	4b4b      	ldr	r3, [pc, #300]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a42:	d107      	bne.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006a44:	f107 030c 	add.w	r3, r7, #12
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 f9fd 	bl	8006e48 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a52:	e081      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006a54:	2300      	movs	r3, #0
 8006a56:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a58:	e07e      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006a5a:	4b42      	ldr	r3, [pc, #264]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 0304 	and.w	r3, r3, #4
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	d109      	bne.n	8006a7a <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a66:	4b3f      	ldr	r3, [pc, #252]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	08db      	lsrs	r3, r3, #3
 8006a6c:	f003 0303 	and.w	r3, r3, #3
 8006a70:	4a3d      	ldr	r2, [pc, #244]	; (8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8006a72:	fa22 f303 	lsr.w	r3, r2, r3
 8006a76:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006a78:	e06e      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a7e:	e06b      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8006a80:	4b38      	ldr	r3, [pc, #224]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a8c:	d102      	bne.n	8006a94 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8006a8e:	4b37      	ldr	r3, [pc, #220]	; (8006b6c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8006a90:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8006a92:	e061      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8006a94:	2300      	movs	r3, #0
 8006a96:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006a98:	e05e      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006a9a:	4b32      	ldr	r3, [pc, #200]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aa6:	d102      	bne.n	8006aae <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8006aa8:	4b31      	ldr	r3, [pc, #196]	; (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006aac:	e054      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ab2:	e051      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ab8:	e04e      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ac0:	d148      	bne.n	8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8006ac2:	4b28      	ldr	r3, [pc, #160]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ac6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006aca:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ad2:	d02a      	beq.n	8006b2a <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ada:	d838      	bhi.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8006adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d004      	beq.n	8006aec <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8006ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ae8:	d00d      	beq.n	8006b06 <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8006aea:	e030      	b.n	8006b4e <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006aec:	4b1d      	ldr	r3, [pc, #116]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006af4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006af8:	d102      	bne.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8006afa:	4b1d      	ldr	r3, [pc, #116]	; (8006b70 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8006afc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006afe:	e02b      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006b00:	2300      	movs	r3, #0
 8006b02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b04:	e028      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006b06:	4b17      	ldr	r3, [pc, #92]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b0e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b12:	d107      	bne.n	8006b24 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f000 fae9 	bl	80070f0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b20:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b22:	e019      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006b24:	2300      	movs	r3, #0
 8006b26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b28:	e016      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8006b2a:	4b0e      	ldr	r3, [pc, #56]	; (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b36:	d107      	bne.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b38:	f107 0318 	add.w	r3, r7, #24
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 f82f 	bl	8006ba0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8006b46:	e007      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b4c:	e004      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006b52:	e001      	b.n	8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8006b54:	2300      	movs	r3, #0
 8006b56:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8006b58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3740      	adds	r7, #64	; 0x40
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	58024400 	.word	0x58024400
 8006b68:	03d09000 	.word	0x03d09000
 8006b6c:	003d0900 	.word	0x003d0900
 8006b70:	007a1200 	.word	0x007a1200

08006b74 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006b78:	f7fe fb88 	bl	800528c <HAL_RCC_GetHCLKFreq>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	091b      	lsrs	r3, r3, #4
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	4904      	ldr	r1, [pc, #16]	; (8006b9c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006b8a:	5ccb      	ldrb	r3, [r1, r3]
 8006b8c:	f003 031f 	and.w	r3, r3, #31
 8006b90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	58024400 	.word	0x58024400
 8006b9c:	0800c3c8 	.word	0x0800c3c8

08006ba0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b089      	sub	sp, #36	; 0x24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006ba8:	4ba1      	ldr	r3, [pc, #644]	; (8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	f003 0303 	and.w	r3, r3, #3
 8006bb0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8006bb2:	4b9f      	ldr	r3, [pc, #636]	; (8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	0b1b      	lsrs	r3, r3, #12
 8006bb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bbc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006bbe:	4b9c      	ldr	r3, [pc, #624]	; (8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	091b      	lsrs	r3, r3, #4
 8006bc4:	f003 0301 	and.w	r3, r3, #1
 8006bc8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8006bca:	4b99      	ldr	r3, [pc, #612]	; (8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bce:	08db      	lsrs	r3, r3, #3
 8006bd0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006bd4:	693a      	ldr	r2, [r7, #16]
 8006bd6:	fb02 f303 	mul.w	r3, r2, r3
 8006bda:	ee07 3a90 	vmov	s15, r3
 8006bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006be2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	f000 8111 	beq.w	8006e10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	f000 8083 	beq.w	8006cfc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	f200 80a1 	bhi.w	8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d003      	beq.n	8006c0c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d056      	beq.n	8006cb8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006c0a:	e099      	b.n	8006d40 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c0c:	4b88      	ldr	r3, [pc, #544]	; (8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0320 	and.w	r3, r3, #32
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d02d      	beq.n	8006c74 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006c18:	4b85      	ldr	r3, [pc, #532]	; (8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	08db      	lsrs	r3, r3, #3
 8006c1e:	f003 0303 	and.w	r3, r3, #3
 8006c22:	4a84      	ldr	r2, [pc, #528]	; (8006e34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006c24:	fa22 f303 	lsr.w	r3, r2, r3
 8006c28:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	ee07 3a90 	vmov	s15, r3
 8006c30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	ee07 3a90 	vmov	s15, r3
 8006c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c42:	4b7b      	ldr	r3, [pc, #492]	; (8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4a:	ee07 3a90 	vmov	s15, r3
 8006c4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006c72:	e087      	b.n	8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	ee07 3a90 	vmov	s15, r3
 8006c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006e3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c86:	4b6a      	ldr	r3, [pc, #424]	; (8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cb6:	e065      	b.n	8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cca:	4b59      	ldr	r3, [pc, #356]	; (8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cde:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006cfa:	e043      	b.n	8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006e44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0e:	4b48      	ldr	r3, [pc, #288]	; (8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d3e:	e021      	b.n	8006d84 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006e40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d52:	4b37      	ldr	r3, [pc, #220]	; (8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006e38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d82:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006d84:	4b2a      	ldr	r3, [pc, #168]	; (8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d88:	0a5b      	lsrs	r3, r3, #9
 8006d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d8e:	ee07 3a90 	vmov	s15, r3
 8006d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006d9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006da2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006da6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006daa:	ee17 2a90 	vmov	r2, s15
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006db2:	4b1f      	ldr	r3, [pc, #124]	; (8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db6:	0c1b      	lsrs	r3, r3, #16
 8006db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dbc:	ee07 3a90 	vmov	s15, r3
 8006dc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006dc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dd8:	ee17 2a90 	vmov	r2, s15
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006de0:	4b13      	ldr	r3, [pc, #76]	; (8006e30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006de4:	0e1b      	lsrs	r3, r3, #24
 8006de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dea:	ee07 3a90 	vmov	s15, r3
 8006dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006df6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8006dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e06:	ee17 2a90 	vmov	r2, s15
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006e0e:	e008      	b.n	8006e22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	609a      	str	r2, [r3, #8]
}
 8006e22:	bf00      	nop
 8006e24:	3724      	adds	r7, #36	; 0x24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	58024400 	.word	0x58024400
 8006e34:	03d09000 	.word	0x03d09000
 8006e38:	46000000 	.word	0x46000000
 8006e3c:	4c742400 	.word	0x4c742400
 8006e40:	4a742400 	.word	0x4a742400
 8006e44:	4af42400 	.word	0x4af42400

08006e48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b089      	sub	sp, #36	; 0x24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006e50:	4ba1      	ldr	r3, [pc, #644]	; (80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e54:	f003 0303 	and.w	r3, r3, #3
 8006e58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006e5a:	4b9f      	ldr	r3, [pc, #636]	; (80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e5e:	0d1b      	lsrs	r3, r3, #20
 8006e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006e66:	4b9c      	ldr	r3, [pc, #624]	; (80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e6a:	0a1b      	lsrs	r3, r3, #8
 8006e6c:	f003 0301 	and.w	r3, r3, #1
 8006e70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006e72:	4b99      	ldr	r3, [pc, #612]	; (80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e76:	08db      	lsrs	r3, r3, #3
 8006e78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e7c:	693a      	ldr	r2, [r7, #16]
 8006e7e:	fb02 f303 	mul.w	r3, r2, r3
 8006e82:	ee07 3a90 	vmov	s15, r3
 8006e86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 8111 	beq.w	80070b8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	2b02      	cmp	r3, #2
 8006e9a:	f000 8083 	beq.w	8006fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	f200 80a1 	bhi.w	8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d056      	beq.n	8006f60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006eb2:	e099      	b.n	8006fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006eb4:	4b88      	ldr	r3, [pc, #544]	; (80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0320 	and.w	r3, r3, #32
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d02d      	beq.n	8006f1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006ec0:	4b85      	ldr	r3, [pc, #532]	; (80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	08db      	lsrs	r3, r3, #3
 8006ec6:	f003 0303 	and.w	r3, r3, #3
 8006eca:	4a84      	ldr	r2, [pc, #528]	; (80070dc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8006ed0:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	ee07 3a90 	vmov	s15, r3
 8006ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	ee07 3a90 	vmov	s15, r3
 8006ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ee6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006eea:	4b7b      	ldr	r3, [pc, #492]	; (80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006efa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006efe:	eddf 5a78 	vldr	s11, [pc, #480]	; 80070e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f16:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006f1a:	e087      	b.n	800702c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	ee07 3a90 	vmov	s15, r3
 8006f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80070e4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006f2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f2e:	4b6a      	ldr	r3, [pc, #424]	; (80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f36:	ee07 3a90 	vmov	s15, r3
 8006f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f42:	eddf 5a67 	vldr	s11, [pc, #412]	; 80070e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006f5e:	e065      	b.n	800702c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	ee07 3a90 	vmov	s15, r3
 8006f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006f6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f72:	4b59      	ldr	r3, [pc, #356]	; (80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f7a:	ee07 3a90 	vmov	s15, r3
 8006f7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f82:	ed97 6a03 	vldr	s12, [r7, #12]
 8006f86:	eddf 5a56 	vldr	s11, [pc, #344]	; 80070e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006f8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fa2:	e043      	b.n	800702c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	ee07 3a90 	vmov	s15, r3
 8006faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80070ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006fb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fb6:	4b48      	ldr	r3, [pc, #288]	; (80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fbe:	ee07 3a90 	vmov	s15, r3
 8006fc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006fca:	eddf 5a45 	vldr	s11, [pc, #276]	; 80070e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006fce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006fe6:	e021      	b.n	800702c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	ee07 3a90 	vmov	s15, r3
 8006fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ff2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80070e8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ffa:	4b37      	ldr	r3, [pc, #220]	; (80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007002:	ee07 3a90 	vmov	s15, r3
 8007006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800700a:	ed97 6a03 	vldr	s12, [r7, #12]
 800700e:	eddf 5a34 	vldr	s11, [pc, #208]	; 80070e0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800701a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800701e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007026:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800702a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800702c:	4b2a      	ldr	r3, [pc, #168]	; (80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800702e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007030:	0a5b      	lsrs	r3, r3, #9
 8007032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007036:	ee07 3a90 	vmov	s15, r3
 800703a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800703e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007042:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007046:	edd7 6a07 	vldr	s13, [r7, #28]
 800704a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800704e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007052:	ee17 2a90 	vmov	r2, s15
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800705a:	4b1f      	ldr	r3, [pc, #124]	; (80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800705c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705e:	0c1b      	lsrs	r3, r3, #16
 8007060:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007064:	ee07 3a90 	vmov	s15, r3
 8007068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007070:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007074:	edd7 6a07 	vldr	s13, [r7, #28]
 8007078:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800707c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007080:	ee17 2a90 	vmov	r2, s15
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007088:	4b13      	ldr	r3, [pc, #76]	; (80070d8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800708a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708c:	0e1b      	lsrs	r3, r3, #24
 800708e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007092:	ee07 3a90 	vmov	s15, r3
 8007096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800709e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80070a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070ae:	ee17 2a90 	vmov	r2, s15
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80070b6:	e008      	b.n	80070ca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2200      	movs	r2, #0
 80070c8:	609a      	str	r2, [r3, #8]
}
 80070ca:	bf00      	nop
 80070cc:	3724      	adds	r7, #36	; 0x24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	58024400 	.word	0x58024400
 80070dc:	03d09000 	.word	0x03d09000
 80070e0:	46000000 	.word	0x46000000
 80070e4:	4c742400 	.word	0x4c742400
 80070e8:	4a742400 	.word	0x4a742400
 80070ec:	4af42400 	.word	0x4af42400

080070f0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b089      	sub	sp, #36	; 0x24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80070f8:	4ba0      	ldr	r3, [pc, #640]	; (800737c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80070fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070fc:	f003 0303 	and.w	r3, r3, #3
 8007100:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007102:	4b9e      	ldr	r3, [pc, #632]	; (800737c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007106:	091b      	lsrs	r3, r3, #4
 8007108:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800710c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800710e:	4b9b      	ldr	r3, [pc, #620]	; (800737c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007112:	f003 0301 	and.w	r3, r3, #1
 8007116:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007118:	4b98      	ldr	r3, [pc, #608]	; (800737c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800711a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800711c:	08db      	lsrs	r3, r3, #3
 800711e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007122:	693a      	ldr	r2, [r7, #16]
 8007124:	fb02 f303 	mul.w	r3, r2, r3
 8007128:	ee07 3a90 	vmov	s15, r3
 800712c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007130:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 8111 	beq.w	800735e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	2b02      	cmp	r3, #2
 8007140:	f000 8083 	beq.w	800724a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	2b02      	cmp	r3, #2
 8007148:	f200 80a1 	bhi.w	800728e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d056      	beq.n	8007206 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8007158:	e099      	b.n	800728e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800715a:	4b88      	ldr	r3, [pc, #544]	; (800737c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 0320 	and.w	r3, r3, #32
 8007162:	2b00      	cmp	r3, #0
 8007164:	d02d      	beq.n	80071c2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007166:	4b85      	ldr	r3, [pc, #532]	; (800737c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	08db      	lsrs	r3, r3, #3
 800716c:	f003 0303 	and.w	r3, r3, #3
 8007170:	4a83      	ldr	r2, [pc, #524]	; (8007380 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8007172:	fa22 f303 	lsr.w	r3, r2, r3
 8007176:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	ee07 3a90 	vmov	s15, r3
 8007188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007190:	4b7a      	ldr	r3, [pc, #488]	; (800737c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007198:	ee07 3a90 	vmov	s15, r3
 800719c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80071a4:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071bc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80071c0:	e087      	b.n	80072d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	ee07 3a90 	vmov	s15, r3
 80071c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071cc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80071d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071d4:	4b69      	ldr	r3, [pc, #420]	; (800737c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80071d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071dc:	ee07 3a90 	vmov	s15, r3
 80071e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80071e8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80071ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007200:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007204:	e065      	b.n	80072d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	ee07 3a90 	vmov	s15, r3
 800720c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007210:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800738c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8007214:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007218:	4b58      	ldr	r3, [pc, #352]	; (800737c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800721a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007220:	ee07 3a90 	vmov	s15, r3
 8007224:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007228:	ed97 6a03 	vldr	s12, [r7, #12]
 800722c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007230:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007234:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007238:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800723c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007244:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007248:	e043      	b.n	80072d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	ee07 3a90 	vmov	s15, r3
 8007250:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007254:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007390 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8007258:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800725c:	4b47      	ldr	r3, [pc, #284]	; (800737c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800725e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007264:	ee07 3a90 	vmov	s15, r3
 8007268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800726c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007270:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007274:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007278:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800727c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007280:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007284:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007288:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800728c:	e021      	b.n	80072d2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007298:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007388 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800729c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072a0:	4b36      	ldr	r3, [pc, #216]	; (800737c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072a8:	ee07 3a90 	vmov	s15, r3
 80072ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072b0:	ed97 6a03 	vldr	s12, [r7, #12]
 80072b4:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007384 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80072b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072cc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80072d0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80072d2:	4b2a      	ldr	r3, [pc, #168]	; (800737c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80072d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d6:	0a5b      	lsrs	r3, r3, #9
 80072d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072dc:	ee07 3a90 	vmov	s15, r3
 80072e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80072ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80072f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072f8:	ee17 2a90 	vmov	r2, s15
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007300:	4b1e      	ldr	r3, [pc, #120]	; (800737c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007304:	0c1b      	lsrs	r3, r3, #16
 8007306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800730a:	ee07 3a90 	vmov	s15, r3
 800730e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007312:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007316:	ee37 7a87 	vadd.f32	s14, s15, s14
 800731a:	edd7 6a07 	vldr	s13, [r7, #28]
 800731e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007326:	ee17 2a90 	vmov	r2, s15
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800732e:	4b13      	ldr	r3, [pc, #76]	; (800737c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8007330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007332:	0e1b      	lsrs	r3, r3, #24
 8007334:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007338:	ee07 3a90 	vmov	s15, r3
 800733c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007340:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007344:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007348:	edd7 6a07 	vldr	s13, [r7, #28]
 800734c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007350:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007354:	ee17 2a90 	vmov	r2, s15
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800735c:	e008      	b.n	8007370 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2200      	movs	r2, #0
 8007362:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	609a      	str	r2, [r3, #8]
}
 8007370:	bf00      	nop
 8007372:	3724      	adds	r7, #36	; 0x24
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr
 800737c:	58024400 	.word	0x58024400
 8007380:	03d09000 	.word	0x03d09000
 8007384:	46000000 	.word	0x46000000
 8007388:	4c742400 	.word	0x4c742400
 800738c:	4a742400 	.word	0x4a742400
 8007390:	4af42400 	.word	0x4af42400

08007394 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800739e:	2300      	movs	r3, #0
 80073a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80073a2:	4b53      	ldr	r3, [pc, #332]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80073a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073a6:	f003 0303 	and.w	r3, r3, #3
 80073aa:	2b03      	cmp	r3, #3
 80073ac:	d101      	bne.n	80073b2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e099      	b.n	80074e6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80073b2:	4b4f      	ldr	r3, [pc, #316]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a4e      	ldr	r2, [pc, #312]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80073b8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80073bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073be:	f7fa fa97 	bl	80018f0 <HAL_GetTick>
 80073c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073c4:	e008      	b.n	80073d8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80073c6:	f7fa fa93 	bl	80018f0 <HAL_GetTick>
 80073ca:	4602      	mov	r2, r0
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	1ad3      	subs	r3, r2, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d901      	bls.n	80073d8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e086      	b.n	80074e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80073d8:	4b45      	ldr	r3, [pc, #276]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1f0      	bne.n	80073c6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80073e4:	4b42      	ldr	r3, [pc, #264]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80073e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	031b      	lsls	r3, r3, #12
 80073f2:	493f      	ldr	r1, [pc, #252]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80073f4:	4313      	orrs	r3, r2
 80073f6:	628b      	str	r3, [r1, #40]	; 0x28
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	3b01      	subs	r3, #1
 80073fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	3b01      	subs	r3, #1
 8007408:	025b      	lsls	r3, r3, #9
 800740a:	b29b      	uxth	r3, r3
 800740c:	431a      	orrs	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	3b01      	subs	r3, #1
 8007414:	041b      	lsls	r3, r3, #16
 8007416:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	3b01      	subs	r3, #1
 8007422:	061b      	lsls	r3, r3, #24
 8007424:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007428:	4931      	ldr	r1, [pc, #196]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 800742a:	4313      	orrs	r3, r2
 800742c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800742e:	4b30      	ldr	r3, [pc, #192]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 8007430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007432:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	695b      	ldr	r3, [r3, #20]
 800743a:	492d      	ldr	r1, [pc, #180]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 800743c:	4313      	orrs	r3, r2
 800743e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007440:	4b2b      	ldr	r3, [pc, #172]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	f023 0220 	bic.w	r2, r3, #32
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	4928      	ldr	r1, [pc, #160]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 800744e:	4313      	orrs	r3, r2
 8007450:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007452:	4b27      	ldr	r3, [pc, #156]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 8007454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007456:	4a26      	ldr	r2, [pc, #152]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 8007458:	f023 0310 	bic.w	r3, r3, #16
 800745c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800745e:	4b24      	ldr	r3, [pc, #144]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 8007460:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007462:	4b24      	ldr	r3, [pc, #144]	; (80074f4 <RCCEx_PLL2_Config+0x160>)
 8007464:	4013      	ands	r3, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	69d2      	ldr	r2, [r2, #28]
 800746a:	00d2      	lsls	r2, r2, #3
 800746c:	4920      	ldr	r1, [pc, #128]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 800746e:	4313      	orrs	r3, r2
 8007470:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007472:	4b1f      	ldr	r3, [pc, #124]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 8007474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007476:	4a1e      	ldr	r2, [pc, #120]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 8007478:	f043 0310 	orr.w	r3, r3, #16
 800747c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d106      	bne.n	8007492 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007484:	4b1a      	ldr	r3, [pc, #104]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 8007486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007488:	4a19      	ldr	r2, [pc, #100]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 800748a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800748e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007490:	e00f      	b.n	80074b2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d106      	bne.n	80074a6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007498:	4b15      	ldr	r3, [pc, #84]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 800749a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800749c:	4a14      	ldr	r2, [pc, #80]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 800749e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074a4:	e005      	b.n	80074b2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80074a6:	4b12      	ldr	r3, [pc, #72]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80074a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074aa:	4a11      	ldr	r2, [pc, #68]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80074ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80074b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80074b2:	4b0f      	ldr	r3, [pc, #60]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a0e      	ldr	r2, [pc, #56]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80074b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074be:	f7fa fa17 	bl	80018f0 <HAL_GetTick>
 80074c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074c4:	e008      	b.n	80074d8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80074c6:	f7fa fa13 	bl	80018f0 <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d901      	bls.n	80074d8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80074d4:	2303      	movs	r3, #3
 80074d6:	e006      	b.n	80074e6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80074d8:	4b05      	ldr	r3, [pc, #20]	; (80074f0 <RCCEx_PLL2_Config+0x15c>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0f0      	beq.n	80074c6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	58024400 	.word	0x58024400
 80074f4:	ffff0007 	.word	0xffff0007

080074f8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007506:	4b53      	ldr	r3, [pc, #332]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 8007508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800750a:	f003 0303 	and.w	r3, r3, #3
 800750e:	2b03      	cmp	r3, #3
 8007510:	d101      	bne.n	8007516 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e099      	b.n	800764a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007516:	4b4f      	ldr	r3, [pc, #316]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a4e      	ldr	r2, [pc, #312]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 800751c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007520:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007522:	f7fa f9e5 	bl	80018f0 <HAL_GetTick>
 8007526:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007528:	e008      	b.n	800753c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800752a:	f7fa f9e1 	bl	80018f0 <HAL_GetTick>
 800752e:	4602      	mov	r2, r0
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	1ad3      	subs	r3, r2, r3
 8007534:	2b02      	cmp	r3, #2
 8007536:	d901      	bls.n	800753c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007538:	2303      	movs	r3, #3
 800753a:	e086      	b.n	800764a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800753c:	4b45      	ldr	r3, [pc, #276]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d1f0      	bne.n	800752a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007548:	4b42      	ldr	r3, [pc, #264]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 800754a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	051b      	lsls	r3, r3, #20
 8007556:	493f      	ldr	r1, [pc, #252]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 8007558:	4313      	orrs	r3, r2
 800755a:	628b      	str	r3, [r1, #40]	; 0x28
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	3b01      	subs	r3, #1
 8007562:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	3b01      	subs	r3, #1
 800756c:	025b      	lsls	r3, r3, #9
 800756e:	b29b      	uxth	r3, r3
 8007570:	431a      	orrs	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	3b01      	subs	r3, #1
 8007578:	041b      	lsls	r3, r3, #16
 800757a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800757e:	431a      	orrs	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	691b      	ldr	r3, [r3, #16]
 8007584:	3b01      	subs	r3, #1
 8007586:	061b      	lsls	r3, r3, #24
 8007588:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800758c:	4931      	ldr	r1, [pc, #196]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 800758e:	4313      	orrs	r3, r2
 8007590:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007592:	4b30      	ldr	r3, [pc, #192]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 8007594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007596:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	492d      	ldr	r1, [pc, #180]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80075a4:	4b2b      	ldr	r3, [pc, #172]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	699b      	ldr	r3, [r3, #24]
 80075b0:	4928      	ldr	r1, [pc, #160]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80075b6:	4b27      	ldr	r3, [pc, #156]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ba:	4a26      	ldr	r2, [pc, #152]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80075c2:	4b24      	ldr	r3, [pc, #144]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80075c6:	4b24      	ldr	r3, [pc, #144]	; (8007658 <RCCEx_PLL3_Config+0x160>)
 80075c8:	4013      	ands	r3, r2
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	69d2      	ldr	r2, [r2, #28]
 80075ce:	00d2      	lsls	r2, r2, #3
 80075d0:	4920      	ldr	r1, [pc, #128]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80075d6:	4b1f      	ldr	r3, [pc, #124]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075da:	4a1e      	ldr	r2, [pc, #120]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d106      	bne.n	80075f6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80075e8:	4b1a      	ldr	r3, [pc, #104]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ec:	4a19      	ldr	r2, [pc, #100]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80075f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80075f4:	e00f      	b.n	8007616 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d106      	bne.n	800760a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80075fc:	4b15      	ldr	r3, [pc, #84]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 80075fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007600:	4a14      	ldr	r2, [pc, #80]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 8007602:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007606:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007608:	e005      	b.n	8007616 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800760a:	4b12      	ldr	r3, [pc, #72]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 800760c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760e:	4a11      	ldr	r2, [pc, #68]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 8007610:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007614:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007616:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a0e      	ldr	r2, [pc, #56]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 800761c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007620:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007622:	f7fa f965 	bl	80018f0 <HAL_GetTick>
 8007626:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007628:	e008      	b.n	800763c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800762a:	f7fa f961 	bl	80018f0 <HAL_GetTick>
 800762e:	4602      	mov	r2, r0
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	1ad3      	subs	r3, r2, r3
 8007634:	2b02      	cmp	r3, #2
 8007636:	d901      	bls.n	800763c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e006      	b.n	800764a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800763c:	4b05      	ldr	r3, [pc, #20]	; (8007654 <RCCEx_PLL3_Config+0x15c>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007644:	2b00      	cmp	r3, #0
 8007646:	d0f0      	beq.n	800762a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007648:	7bfb      	ldrb	r3, [r7, #15]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	58024400 	.word	0x58024400
 8007658:	ffff0007 	.word	0xffff0007

0800765c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b082      	sub	sp, #8
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d101      	bne.n	800766e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	e049      	b.n	8007702 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7f9 fef4 	bl	8001470 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2202      	movs	r2, #2
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681a      	ldr	r2, [r3, #0]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	3304      	adds	r3, #4
 8007698:	4619      	mov	r1, r3
 800769a:	4610      	mov	r0, r2
 800769c:	f000 fbb0 	bl	8007e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2201      	movs	r2, #1
 80076ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2201      	movs	r2, #1
 80076b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2201      	movs	r2, #1
 80076dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2201      	movs	r2, #1
 80076ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3708      	adds	r7, #8
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b082      	sub	sp, #8
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d101      	bne.n	800771c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007718:	2301      	movs	r3, #1
 800771a:	e049      	b.n	80077b0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007722:	b2db      	uxtb	r3, r3
 8007724:	2b00      	cmp	r3, #0
 8007726:	d106      	bne.n	8007736 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 f841 	bl	80077b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2202      	movs	r2, #2
 800773a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	3304      	adds	r3, #4
 8007746:	4619      	mov	r1, r3
 8007748:	4610      	mov	r0, r2
 800774a:	f000 fb59 	bl	8007e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2201      	movs	r2, #1
 800775a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2201      	movs	r2, #1
 8007772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2201      	movs	r2, #1
 800777a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2201      	movs	r2, #1
 8007782:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2201      	movs	r2, #1
 8007792:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	2201      	movs	r2, #1
 800779a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2201      	movs	r2, #1
 80077aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3708      	adds	r7, #8
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80077b8:	b480      	push	{r7}
 80077ba:	b083      	sub	sp, #12
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80077c0:	bf00      	nop
 80077c2:	370c      	adds	r7, #12
 80077c4:	46bd      	mov	sp, r7
 80077c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ca:	4770      	bx	lr

080077cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d109      	bne.n	80077f0 <HAL_TIM_PWM_Start+0x24>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	bf14      	ite	ne
 80077e8:	2301      	movne	r3, #1
 80077ea:	2300      	moveq	r3, #0
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	e03c      	b.n	800786a <HAL_TIM_PWM_Start+0x9e>
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d109      	bne.n	800780a <HAL_TIM_PWM_Start+0x3e>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b01      	cmp	r3, #1
 8007800:	bf14      	ite	ne
 8007802:	2301      	movne	r3, #1
 8007804:	2300      	moveq	r3, #0
 8007806:	b2db      	uxtb	r3, r3
 8007808:	e02f      	b.n	800786a <HAL_TIM_PWM_Start+0x9e>
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	2b08      	cmp	r3, #8
 800780e:	d109      	bne.n	8007824 <HAL_TIM_PWM_Start+0x58>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007816:	b2db      	uxtb	r3, r3
 8007818:	2b01      	cmp	r3, #1
 800781a:	bf14      	ite	ne
 800781c:	2301      	movne	r3, #1
 800781e:	2300      	moveq	r3, #0
 8007820:	b2db      	uxtb	r3, r3
 8007822:	e022      	b.n	800786a <HAL_TIM_PWM_Start+0x9e>
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b0c      	cmp	r3, #12
 8007828:	d109      	bne.n	800783e <HAL_TIM_PWM_Start+0x72>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b01      	cmp	r3, #1
 8007834:	bf14      	ite	ne
 8007836:	2301      	movne	r3, #1
 8007838:	2300      	moveq	r3, #0
 800783a:	b2db      	uxtb	r3, r3
 800783c:	e015      	b.n	800786a <HAL_TIM_PWM_Start+0x9e>
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	2b10      	cmp	r3, #16
 8007842:	d109      	bne.n	8007858 <HAL_TIM_PWM_Start+0x8c>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b01      	cmp	r3, #1
 800784e:	bf14      	ite	ne
 8007850:	2301      	movne	r3, #1
 8007852:	2300      	moveq	r3, #0
 8007854:	b2db      	uxtb	r3, r3
 8007856:	e008      	b.n	800786a <HAL_TIM_PWM_Start+0x9e>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800785e:	b2db      	uxtb	r3, r3
 8007860:	2b01      	cmp	r3, #1
 8007862:	bf14      	ite	ne
 8007864:	2301      	movne	r3, #1
 8007866:	2300      	moveq	r3, #0
 8007868:	b2db      	uxtb	r3, r3
 800786a:	2b00      	cmp	r3, #0
 800786c:	d001      	beq.n	8007872 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e0a1      	b.n	80079b6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d104      	bne.n	8007882 <HAL_TIM_PWM_Start+0xb6>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007880:	e023      	b.n	80078ca <HAL_TIM_PWM_Start+0xfe>
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	2b04      	cmp	r3, #4
 8007886:	d104      	bne.n	8007892 <HAL_TIM_PWM_Start+0xc6>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2202      	movs	r2, #2
 800788c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007890:	e01b      	b.n	80078ca <HAL_TIM_PWM_Start+0xfe>
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	2b08      	cmp	r3, #8
 8007896:	d104      	bne.n	80078a2 <HAL_TIM_PWM_Start+0xd6>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2202      	movs	r2, #2
 800789c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078a0:	e013      	b.n	80078ca <HAL_TIM_PWM_Start+0xfe>
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b0c      	cmp	r3, #12
 80078a6:	d104      	bne.n	80078b2 <HAL_TIM_PWM_Start+0xe6>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2202      	movs	r2, #2
 80078ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078b0:	e00b      	b.n	80078ca <HAL_TIM_PWM_Start+0xfe>
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	2b10      	cmp	r3, #16
 80078b6:	d104      	bne.n	80078c2 <HAL_TIM_PWM_Start+0xf6>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2202      	movs	r2, #2
 80078bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078c0:	e003      	b.n	80078ca <HAL_TIM_PWM_Start+0xfe>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2202      	movs	r2, #2
 80078c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2201      	movs	r2, #1
 80078d0:	6839      	ldr	r1, [r7, #0]
 80078d2:	4618      	mov	r0, r3
 80078d4:	f000 fea2 	bl	800861c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a38      	ldr	r2, [pc, #224]	; (80079c0 <HAL_TIM_PWM_Start+0x1f4>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d013      	beq.n	800790a <HAL_TIM_PWM_Start+0x13e>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a37      	ldr	r2, [pc, #220]	; (80079c4 <HAL_TIM_PWM_Start+0x1f8>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d00e      	beq.n	800790a <HAL_TIM_PWM_Start+0x13e>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a35      	ldr	r2, [pc, #212]	; (80079c8 <HAL_TIM_PWM_Start+0x1fc>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d009      	beq.n	800790a <HAL_TIM_PWM_Start+0x13e>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a34      	ldr	r2, [pc, #208]	; (80079cc <HAL_TIM_PWM_Start+0x200>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d004      	beq.n	800790a <HAL_TIM_PWM_Start+0x13e>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a32      	ldr	r2, [pc, #200]	; (80079d0 <HAL_TIM_PWM_Start+0x204>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d101      	bne.n	800790e <HAL_TIM_PWM_Start+0x142>
 800790a:	2301      	movs	r3, #1
 800790c:	e000      	b.n	8007910 <HAL_TIM_PWM_Start+0x144>
 800790e:	2300      	movs	r3, #0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d007      	beq.n	8007924 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007922:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	4a25      	ldr	r2, [pc, #148]	; (80079c0 <HAL_TIM_PWM_Start+0x1f4>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d022      	beq.n	8007974 <HAL_TIM_PWM_Start+0x1a8>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007936:	d01d      	beq.n	8007974 <HAL_TIM_PWM_Start+0x1a8>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a25      	ldr	r2, [pc, #148]	; (80079d4 <HAL_TIM_PWM_Start+0x208>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d018      	beq.n	8007974 <HAL_TIM_PWM_Start+0x1a8>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a24      	ldr	r2, [pc, #144]	; (80079d8 <HAL_TIM_PWM_Start+0x20c>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d013      	beq.n	8007974 <HAL_TIM_PWM_Start+0x1a8>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a22      	ldr	r2, [pc, #136]	; (80079dc <HAL_TIM_PWM_Start+0x210>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d00e      	beq.n	8007974 <HAL_TIM_PWM_Start+0x1a8>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4a1a      	ldr	r2, [pc, #104]	; (80079c4 <HAL_TIM_PWM_Start+0x1f8>)
 800795c:	4293      	cmp	r3, r2
 800795e:	d009      	beq.n	8007974 <HAL_TIM_PWM_Start+0x1a8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a1e      	ldr	r2, [pc, #120]	; (80079e0 <HAL_TIM_PWM_Start+0x214>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d004      	beq.n	8007974 <HAL_TIM_PWM_Start+0x1a8>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a16      	ldr	r2, [pc, #88]	; (80079c8 <HAL_TIM_PWM_Start+0x1fc>)
 8007970:	4293      	cmp	r3, r2
 8007972:	d115      	bne.n	80079a0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689a      	ldr	r2, [r3, #8]
 800797a:	4b1a      	ldr	r3, [pc, #104]	; (80079e4 <HAL_TIM_PWM_Start+0x218>)
 800797c:	4013      	ands	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2b06      	cmp	r3, #6
 8007984:	d015      	beq.n	80079b2 <HAL_TIM_PWM_Start+0x1e6>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800798c:	d011      	beq.n	80079b2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f042 0201 	orr.w	r2, r2, #1
 800799c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800799e:	e008      	b.n	80079b2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f042 0201 	orr.w	r2, r2, #1
 80079ae:	601a      	str	r2, [r3, #0]
 80079b0:	e000      	b.n	80079b4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	40010000 	.word	0x40010000
 80079c4:	40010400 	.word	0x40010400
 80079c8:	40014000 	.word	0x40014000
 80079cc:	40014400 	.word	0x40014400
 80079d0:	40014800 	.word	0x40014800
 80079d4:	40000400 	.word	0x40000400
 80079d8:	40000800 	.word	0x40000800
 80079dc:	40000c00 	.word	0x40000c00
 80079e0:	40001800 	.word	0x40001800
 80079e4:	00010007 	.word	0x00010007

080079e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	60b9      	str	r1, [r7, #8]
 80079f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079f4:	2300      	movs	r3, #0
 80079f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d101      	bne.n	8007a06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007a02:	2302      	movs	r3, #2
 8007a04:	e0ff      	b.n	8007c06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b14      	cmp	r3, #20
 8007a12:	f200 80f0 	bhi.w	8007bf6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007a16:	a201      	add	r2, pc, #4	; (adr r2, 8007a1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a1c:	08007a71 	.word	0x08007a71
 8007a20:	08007bf7 	.word	0x08007bf7
 8007a24:	08007bf7 	.word	0x08007bf7
 8007a28:	08007bf7 	.word	0x08007bf7
 8007a2c:	08007ab1 	.word	0x08007ab1
 8007a30:	08007bf7 	.word	0x08007bf7
 8007a34:	08007bf7 	.word	0x08007bf7
 8007a38:	08007bf7 	.word	0x08007bf7
 8007a3c:	08007af3 	.word	0x08007af3
 8007a40:	08007bf7 	.word	0x08007bf7
 8007a44:	08007bf7 	.word	0x08007bf7
 8007a48:	08007bf7 	.word	0x08007bf7
 8007a4c:	08007b33 	.word	0x08007b33
 8007a50:	08007bf7 	.word	0x08007bf7
 8007a54:	08007bf7 	.word	0x08007bf7
 8007a58:	08007bf7 	.word	0x08007bf7
 8007a5c:	08007b75 	.word	0x08007b75
 8007a60:	08007bf7 	.word	0x08007bf7
 8007a64:	08007bf7 	.word	0x08007bf7
 8007a68:	08007bf7 	.word	0x08007bf7
 8007a6c:	08007bb5 	.word	0x08007bb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	68b9      	ldr	r1, [r7, #8]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f000 fa5c 	bl	8007f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	699a      	ldr	r2, [r3, #24]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0208 	orr.w	r2, r2, #8
 8007a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699a      	ldr	r2, [r3, #24]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 0204 	bic.w	r2, r2, #4
 8007a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6999      	ldr	r1, [r3, #24]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	691a      	ldr	r2, [r3, #16]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	430a      	orrs	r2, r1
 8007aac:	619a      	str	r2, [r3, #24]
      break;
 8007aae:	e0a5      	b.n	8007bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68b9      	ldr	r1, [r7, #8]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 facc 	bl	8008054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	699a      	ldr	r2, [r3, #24]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	699a      	ldr	r2, [r3, #24]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6999      	ldr	r1, [r3, #24]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	021a      	lsls	r2, r3, #8
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	430a      	orrs	r2, r1
 8007aee:	619a      	str	r2, [r3, #24]
      break;
 8007af0:	e084      	b.n	8007bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68b9      	ldr	r1, [r7, #8]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 fb35 	bl	8008168 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	69da      	ldr	r2, [r3, #28]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f042 0208 	orr.w	r2, r2, #8
 8007b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	69da      	ldr	r2, [r3, #28]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f022 0204 	bic.w	r2, r2, #4
 8007b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69d9      	ldr	r1, [r3, #28]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	691a      	ldr	r2, [r3, #16]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	61da      	str	r2, [r3, #28]
      break;
 8007b30:	e064      	b.n	8007bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68b9      	ldr	r1, [r7, #8]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 fb9d 	bl	8008278 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	69da      	ldr	r2, [r3, #28]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69da      	ldr	r2, [r3, #28]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	69d9      	ldr	r1, [r3, #28]
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	021a      	lsls	r2, r3, #8
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	61da      	str	r2, [r3, #28]
      break;
 8007b72:	e043      	b.n	8007bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	68b9      	ldr	r1, [r7, #8]
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f000 fbe6 	bl	800834c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f042 0208 	orr.w	r2, r2, #8
 8007b8e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f022 0204 	bic.w	r2, r2, #4
 8007b9e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	691a      	ldr	r2, [r3, #16]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007bb2:	e023      	b.n	8007bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	68b9      	ldr	r1, [r7, #8]
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f000 fc2a 	bl	8008414 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007bce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	021a      	lsls	r2, r3, #8
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007bf4:	e002      	b.n	8007bfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c06:	4618      	mov	r0, r3
 8007c08:	3718      	adds	r7, #24
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	bd80      	pop	{r7, pc}
 8007c0e:	bf00      	nop

08007c10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b084      	sub	sp, #16
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d101      	bne.n	8007c2c <HAL_TIM_ConfigClockSource+0x1c>
 8007c28:	2302      	movs	r3, #2
 8007c2a:	e0dc      	b.n	8007de6 <HAL_TIM_ConfigClockSource+0x1d6>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2202      	movs	r2, #2
 8007c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	4b6a      	ldr	r3, [pc, #424]	; (8007df0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8007c48:	4013      	ands	r3, r2
 8007c4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c52:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a64      	ldr	r2, [pc, #400]	; (8007df4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	f000 80a9 	beq.w	8007dba <HAL_TIM_ConfigClockSource+0x1aa>
 8007c68:	4a62      	ldr	r2, [pc, #392]	; (8007df4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	f200 80ae 	bhi.w	8007dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8007c70:	4a61      	ldr	r2, [pc, #388]	; (8007df8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	f000 80a1 	beq.w	8007dba <HAL_TIM_ConfigClockSource+0x1aa>
 8007c78:	4a5f      	ldr	r2, [pc, #380]	; (8007df8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	f200 80a6 	bhi.w	8007dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8007c80:	4a5e      	ldr	r2, [pc, #376]	; (8007dfc <HAL_TIM_ConfigClockSource+0x1ec>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	f000 8099 	beq.w	8007dba <HAL_TIM_ConfigClockSource+0x1aa>
 8007c88:	4a5c      	ldr	r2, [pc, #368]	; (8007dfc <HAL_TIM_ConfigClockSource+0x1ec>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	f200 809e 	bhi.w	8007dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8007c90:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007c94:	f000 8091 	beq.w	8007dba <HAL_TIM_ConfigClockSource+0x1aa>
 8007c98:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007c9c:	f200 8096 	bhi.w	8007dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8007ca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ca4:	f000 8089 	beq.w	8007dba <HAL_TIM_ConfigClockSource+0x1aa>
 8007ca8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cac:	f200 808e 	bhi.w	8007dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8007cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cb4:	d03e      	beq.n	8007d34 <HAL_TIM_ConfigClockSource+0x124>
 8007cb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007cba:	f200 8087 	bhi.w	8007dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8007cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cc2:	f000 8086 	beq.w	8007dd2 <HAL_TIM_ConfigClockSource+0x1c2>
 8007cc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cca:	d87f      	bhi.n	8007dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8007ccc:	2b70      	cmp	r3, #112	; 0x70
 8007cce:	d01a      	beq.n	8007d06 <HAL_TIM_ConfigClockSource+0xf6>
 8007cd0:	2b70      	cmp	r3, #112	; 0x70
 8007cd2:	d87b      	bhi.n	8007dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8007cd4:	2b60      	cmp	r3, #96	; 0x60
 8007cd6:	d050      	beq.n	8007d7a <HAL_TIM_ConfigClockSource+0x16a>
 8007cd8:	2b60      	cmp	r3, #96	; 0x60
 8007cda:	d877      	bhi.n	8007dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8007cdc:	2b50      	cmp	r3, #80	; 0x50
 8007cde:	d03c      	beq.n	8007d5a <HAL_TIM_ConfigClockSource+0x14a>
 8007ce0:	2b50      	cmp	r3, #80	; 0x50
 8007ce2:	d873      	bhi.n	8007dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8007ce4:	2b40      	cmp	r3, #64	; 0x40
 8007ce6:	d058      	beq.n	8007d9a <HAL_TIM_ConfigClockSource+0x18a>
 8007ce8:	2b40      	cmp	r3, #64	; 0x40
 8007cea:	d86f      	bhi.n	8007dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8007cec:	2b30      	cmp	r3, #48	; 0x30
 8007cee:	d064      	beq.n	8007dba <HAL_TIM_ConfigClockSource+0x1aa>
 8007cf0:	2b30      	cmp	r3, #48	; 0x30
 8007cf2:	d86b      	bhi.n	8007dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8007cf4:	2b20      	cmp	r3, #32
 8007cf6:	d060      	beq.n	8007dba <HAL_TIM_ConfigClockSource+0x1aa>
 8007cf8:	2b20      	cmp	r3, #32
 8007cfa:	d867      	bhi.n	8007dcc <HAL_TIM_ConfigClockSource+0x1bc>
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d05c      	beq.n	8007dba <HAL_TIM_ConfigClockSource+0x1aa>
 8007d00:	2b10      	cmp	r3, #16
 8007d02:	d05a      	beq.n	8007dba <HAL_TIM_ConfigClockSource+0x1aa>
 8007d04:	e062      	b.n	8007dcc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6818      	ldr	r0, [r3, #0]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	6899      	ldr	r1, [r3, #8]
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	685a      	ldr	r2, [r3, #4]
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f000 fc61 	bl	80085dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007d28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68ba      	ldr	r2, [r7, #8]
 8007d30:	609a      	str	r2, [r3, #8]
      break;
 8007d32:	e04f      	b.n	8007dd4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6818      	ldr	r0, [r3, #0]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	6899      	ldr	r1, [r3, #8]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	685a      	ldr	r2, [r3, #4]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	f000 fc4a 	bl	80085dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689a      	ldr	r2, [r3, #8]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007d56:	609a      	str	r2, [r3, #8]
      break;
 8007d58:	e03c      	b.n	8007dd4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	6859      	ldr	r1, [r3, #4]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	461a      	mov	r2, r3
 8007d68:	f000 fbba 	bl	80084e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2150      	movs	r1, #80	; 0x50
 8007d72:	4618      	mov	r0, r3
 8007d74:	f000 fc14 	bl	80085a0 <TIM_ITRx_SetConfig>
      break;
 8007d78:	e02c      	b.n	8007dd4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6818      	ldr	r0, [r3, #0]
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	6859      	ldr	r1, [r3, #4]
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	461a      	mov	r2, r3
 8007d88:	f000 fbd9 	bl	800853e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2160      	movs	r1, #96	; 0x60
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 fc04 	bl	80085a0 <TIM_ITRx_SetConfig>
      break;
 8007d98:	e01c      	b.n	8007dd4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6818      	ldr	r0, [r3, #0]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	6859      	ldr	r1, [r3, #4]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	461a      	mov	r2, r3
 8007da8:	f000 fb9a 	bl	80084e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2140      	movs	r1, #64	; 0x40
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 fbf4 	bl	80085a0 <TIM_ITRx_SetConfig>
      break;
 8007db8:	e00c      	b.n	8007dd4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	f000 fbeb 	bl	80085a0 <TIM_ITRx_SetConfig>
      break;
 8007dca:	e003      	b.n	8007dd4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	73fb      	strb	r3, [r7, #15]
      break;
 8007dd0:	e000      	b.n	8007dd4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8007dd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	ffceff88 	.word	0xffceff88
 8007df4:	00100040 	.word	0x00100040
 8007df8:	00100030 	.word	0x00100030
 8007dfc:	00100020 	.word	0x00100020

08007e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b085      	sub	sp, #20
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a40      	ldr	r2, [pc, #256]	; (8007f14 <TIM_Base_SetConfig+0x114>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d013      	beq.n	8007e40 <TIM_Base_SetConfig+0x40>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e1e:	d00f      	beq.n	8007e40 <TIM_Base_SetConfig+0x40>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	4a3d      	ldr	r2, [pc, #244]	; (8007f18 <TIM_Base_SetConfig+0x118>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d00b      	beq.n	8007e40 <TIM_Base_SetConfig+0x40>
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	4a3c      	ldr	r2, [pc, #240]	; (8007f1c <TIM_Base_SetConfig+0x11c>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d007      	beq.n	8007e40 <TIM_Base_SetConfig+0x40>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	4a3b      	ldr	r2, [pc, #236]	; (8007f20 <TIM_Base_SetConfig+0x120>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d003      	beq.n	8007e40 <TIM_Base_SetConfig+0x40>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a3a      	ldr	r2, [pc, #232]	; (8007f24 <TIM_Base_SetConfig+0x124>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d108      	bne.n	8007e52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	4313      	orrs	r3, r2
 8007e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a2f      	ldr	r2, [pc, #188]	; (8007f14 <TIM_Base_SetConfig+0x114>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d01f      	beq.n	8007e9a <TIM_Base_SetConfig+0x9a>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e60:	d01b      	beq.n	8007e9a <TIM_Base_SetConfig+0x9a>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a2c      	ldr	r2, [pc, #176]	; (8007f18 <TIM_Base_SetConfig+0x118>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d017      	beq.n	8007e9a <TIM_Base_SetConfig+0x9a>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a2b      	ldr	r2, [pc, #172]	; (8007f1c <TIM_Base_SetConfig+0x11c>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d013      	beq.n	8007e9a <TIM_Base_SetConfig+0x9a>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a2a      	ldr	r2, [pc, #168]	; (8007f20 <TIM_Base_SetConfig+0x120>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d00f      	beq.n	8007e9a <TIM_Base_SetConfig+0x9a>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a29      	ldr	r2, [pc, #164]	; (8007f24 <TIM_Base_SetConfig+0x124>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d00b      	beq.n	8007e9a <TIM_Base_SetConfig+0x9a>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a28      	ldr	r2, [pc, #160]	; (8007f28 <TIM_Base_SetConfig+0x128>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d007      	beq.n	8007e9a <TIM_Base_SetConfig+0x9a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a27      	ldr	r2, [pc, #156]	; (8007f2c <TIM_Base_SetConfig+0x12c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d003      	beq.n	8007e9a <TIM_Base_SetConfig+0x9a>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a26      	ldr	r2, [pc, #152]	; (8007f30 <TIM_Base_SetConfig+0x130>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d108      	bne.n	8007eac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	68fa      	ldr	r2, [r7, #12]
 8007ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ec0:	683b      	ldr	r3, [r7, #0]
 8007ec2:	689a      	ldr	r2, [r3, #8]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	4a10      	ldr	r2, [pc, #64]	; (8007f14 <TIM_Base_SetConfig+0x114>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d00f      	beq.n	8007ef8 <TIM_Base_SetConfig+0xf8>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	4a12      	ldr	r2, [pc, #72]	; (8007f24 <TIM_Base_SetConfig+0x124>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d00b      	beq.n	8007ef8 <TIM_Base_SetConfig+0xf8>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a11      	ldr	r2, [pc, #68]	; (8007f28 <TIM_Base_SetConfig+0x128>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d007      	beq.n	8007ef8 <TIM_Base_SetConfig+0xf8>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	4a10      	ldr	r2, [pc, #64]	; (8007f2c <TIM_Base_SetConfig+0x12c>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d003      	beq.n	8007ef8 <TIM_Base_SetConfig+0xf8>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a0f      	ldr	r2, [pc, #60]	; (8007f30 <TIM_Base_SetConfig+0x130>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d103      	bne.n	8007f00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	691a      	ldr	r2, [r3, #16]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2201      	movs	r2, #1
 8007f04:	615a      	str	r2, [r3, #20]
}
 8007f06:	bf00      	nop
 8007f08:	3714      	adds	r7, #20
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop
 8007f14:	40010000 	.word	0x40010000
 8007f18:	40000400 	.word	0x40000400
 8007f1c:	40000800 	.word	0x40000800
 8007f20:	40000c00 	.word	0x40000c00
 8007f24:	40010400 	.word	0x40010400
 8007f28:	40014000 	.word	0x40014000
 8007f2c:	40014400 	.word	0x40014400
 8007f30:	40014800 	.word	0x40014800

08007f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b087      	sub	sp, #28
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
 8007f42:	f023 0201 	bic.w	r2, r3, #1
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a1b      	ldr	r3, [r3, #32]
 8007f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	699b      	ldr	r3, [r3, #24]
 8007f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f5c:	68fa      	ldr	r2, [r7, #12]
 8007f5e:	4b37      	ldr	r3, [pc, #220]	; (800803c <TIM_OC1_SetConfig+0x108>)
 8007f60:	4013      	ands	r3, r2
 8007f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 0303 	bic.w	r3, r3, #3
 8007f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	4313      	orrs	r3, r2
 8007f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	f023 0302 	bic.w	r3, r3, #2
 8007f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a2d      	ldr	r2, [pc, #180]	; (8008040 <TIM_OC1_SetConfig+0x10c>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d00f      	beq.n	8007fb0 <TIM_OC1_SetConfig+0x7c>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a2c      	ldr	r2, [pc, #176]	; (8008044 <TIM_OC1_SetConfig+0x110>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d00b      	beq.n	8007fb0 <TIM_OC1_SetConfig+0x7c>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a2b      	ldr	r2, [pc, #172]	; (8008048 <TIM_OC1_SetConfig+0x114>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d007      	beq.n	8007fb0 <TIM_OC1_SetConfig+0x7c>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a2a      	ldr	r2, [pc, #168]	; (800804c <TIM_OC1_SetConfig+0x118>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d003      	beq.n	8007fb0 <TIM_OC1_SetConfig+0x7c>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a29      	ldr	r2, [pc, #164]	; (8008050 <TIM_OC1_SetConfig+0x11c>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d10c      	bne.n	8007fca <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	f023 0308 	bic.w	r3, r3, #8
 8007fb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	697a      	ldr	r2, [r7, #20]
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	f023 0304 	bic.w	r3, r3, #4
 8007fc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a1c      	ldr	r2, [pc, #112]	; (8008040 <TIM_OC1_SetConfig+0x10c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d00f      	beq.n	8007ff2 <TIM_OC1_SetConfig+0xbe>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a1b      	ldr	r2, [pc, #108]	; (8008044 <TIM_OC1_SetConfig+0x110>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d00b      	beq.n	8007ff2 <TIM_OC1_SetConfig+0xbe>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a1a      	ldr	r2, [pc, #104]	; (8008048 <TIM_OC1_SetConfig+0x114>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d007      	beq.n	8007ff2 <TIM_OC1_SetConfig+0xbe>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a19      	ldr	r2, [pc, #100]	; (800804c <TIM_OC1_SetConfig+0x118>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d003      	beq.n	8007ff2 <TIM_OC1_SetConfig+0xbe>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a18      	ldr	r2, [pc, #96]	; (8008050 <TIM_OC1_SetConfig+0x11c>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d111      	bne.n	8008016 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ff8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008000:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	695b      	ldr	r3, [r3, #20]
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	4313      	orrs	r3, r2
 800800a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	4313      	orrs	r3, r2
 8008014:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	693a      	ldr	r2, [r7, #16]
 800801a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	685a      	ldr	r2, [r3, #4]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	697a      	ldr	r2, [r7, #20]
 800802e:	621a      	str	r2, [r3, #32]
}
 8008030:	bf00      	nop
 8008032:	371c      	adds	r7, #28
 8008034:	46bd      	mov	sp, r7
 8008036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803a:	4770      	bx	lr
 800803c:	fffeff8f 	.word	0xfffeff8f
 8008040:	40010000 	.word	0x40010000
 8008044:	40010400 	.word	0x40010400
 8008048:	40014000 	.word	0x40014000
 800804c:	40014400 	.word	0x40014400
 8008050:	40014800 	.word	0x40014800

08008054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008054:	b480      	push	{r7}
 8008056:	b087      	sub	sp, #28
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6a1b      	ldr	r3, [r3, #32]
 8008062:	f023 0210 	bic.w	r2, r3, #16
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	699b      	ldr	r3, [r3, #24]
 800807a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800807c:	68fa      	ldr	r2, [r7, #12]
 800807e:	4b34      	ldr	r3, [pc, #208]	; (8008150 <TIM_OC2_SetConfig+0xfc>)
 8008080:	4013      	ands	r3, r2
 8008082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800808a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	021b      	lsls	r3, r3, #8
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	f023 0320 	bic.w	r3, r3, #32
 800809e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	689b      	ldr	r3, [r3, #8]
 80080a4:	011b      	lsls	r3, r3, #4
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a29      	ldr	r2, [pc, #164]	; (8008154 <TIM_OC2_SetConfig+0x100>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d003      	beq.n	80080bc <TIM_OC2_SetConfig+0x68>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a28      	ldr	r2, [pc, #160]	; (8008158 <TIM_OC2_SetConfig+0x104>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d10d      	bne.n	80080d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	011b      	lsls	r3, r3, #4
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	4a1e      	ldr	r2, [pc, #120]	; (8008154 <TIM_OC2_SetConfig+0x100>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d00f      	beq.n	8008100 <TIM_OC2_SetConfig+0xac>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	4a1d      	ldr	r2, [pc, #116]	; (8008158 <TIM_OC2_SetConfig+0x104>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d00b      	beq.n	8008100 <TIM_OC2_SetConfig+0xac>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	4a1c      	ldr	r2, [pc, #112]	; (800815c <TIM_OC2_SetConfig+0x108>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d007      	beq.n	8008100 <TIM_OC2_SetConfig+0xac>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	4a1b      	ldr	r2, [pc, #108]	; (8008160 <TIM_OC2_SetConfig+0x10c>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d003      	beq.n	8008100 <TIM_OC2_SetConfig+0xac>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	4a1a      	ldr	r2, [pc, #104]	; (8008164 <TIM_OC2_SetConfig+0x110>)
 80080fc:	4293      	cmp	r3, r2
 80080fe:	d113      	bne.n	8008128 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008106:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800810e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	695b      	ldr	r3, [r3, #20]
 8008114:	009b      	lsls	r3, r3, #2
 8008116:	693a      	ldr	r2, [r7, #16]
 8008118:	4313      	orrs	r3, r2
 800811a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	693a      	ldr	r2, [r7, #16]
 8008124:	4313      	orrs	r3, r2
 8008126:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	621a      	str	r2, [r3, #32]
}
 8008142:	bf00      	nop
 8008144:	371c      	adds	r7, #28
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr
 800814e:	bf00      	nop
 8008150:	feff8fff 	.word	0xfeff8fff
 8008154:	40010000 	.word	0x40010000
 8008158:	40010400 	.word	0x40010400
 800815c:	40014000 	.word	0x40014000
 8008160:	40014400 	.word	0x40014400
 8008164:	40014800 	.word	0x40014800

08008168 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008168:	b480      	push	{r7}
 800816a:	b087      	sub	sp, #28
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a1b      	ldr	r3, [r3, #32]
 8008176:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	69db      	ldr	r3, [r3, #28]
 800818e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008190:	68fa      	ldr	r2, [r7, #12]
 8008192:	4b33      	ldr	r3, [pc, #204]	; (8008260 <TIM_OC3_SetConfig+0xf8>)
 8008194:	4013      	ands	r3, r2
 8008196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f023 0303 	bic.w	r3, r3, #3
 800819e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	021b      	lsls	r3, r3, #8
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	4a28      	ldr	r2, [pc, #160]	; (8008264 <TIM_OC3_SetConfig+0xfc>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d003      	beq.n	80081ce <TIM_OC3_SetConfig+0x66>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4a27      	ldr	r2, [pc, #156]	; (8008268 <TIM_OC3_SetConfig+0x100>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d10d      	bne.n	80081ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	021b      	lsls	r3, r3, #8
 80081dc:	697a      	ldr	r2, [r7, #20]
 80081de:	4313      	orrs	r3, r2
 80081e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a1d      	ldr	r2, [pc, #116]	; (8008264 <TIM_OC3_SetConfig+0xfc>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d00f      	beq.n	8008212 <TIM_OC3_SetConfig+0xaa>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a1c      	ldr	r2, [pc, #112]	; (8008268 <TIM_OC3_SetConfig+0x100>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d00b      	beq.n	8008212 <TIM_OC3_SetConfig+0xaa>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a1b      	ldr	r2, [pc, #108]	; (800826c <TIM_OC3_SetConfig+0x104>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d007      	beq.n	8008212 <TIM_OC3_SetConfig+0xaa>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	4a1a      	ldr	r2, [pc, #104]	; (8008270 <TIM_OC3_SetConfig+0x108>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d003      	beq.n	8008212 <TIM_OC3_SetConfig+0xaa>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4a19      	ldr	r2, [pc, #100]	; (8008274 <TIM_OC3_SetConfig+0x10c>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d113      	bne.n	800823a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	695b      	ldr	r3, [r3, #20]
 8008226:	011b      	lsls	r3, r3, #4
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	4313      	orrs	r3, r2
 800822c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	011b      	lsls	r3, r3, #4
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	4313      	orrs	r3, r2
 8008238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	68fa      	ldr	r2, [r7, #12]
 8008244:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	685a      	ldr	r2, [r3, #4]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	697a      	ldr	r2, [r7, #20]
 8008252:	621a      	str	r2, [r3, #32]
}
 8008254:	bf00      	nop
 8008256:	371c      	adds	r7, #28
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr
 8008260:	fffeff8f 	.word	0xfffeff8f
 8008264:	40010000 	.word	0x40010000
 8008268:	40010400 	.word	0x40010400
 800826c:	40014000 	.word	0x40014000
 8008270:	40014400 	.word	0x40014400
 8008274:	40014800 	.word	0x40014800

08008278 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	69db      	ldr	r3, [r3, #28]
 800829e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4b24      	ldr	r3, [pc, #144]	; (8008334 <TIM_OC4_SetConfig+0xbc>)
 80082a4:	4013      	ands	r3, r2
 80082a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	021b      	lsls	r3, r3, #8
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	4313      	orrs	r3, r2
 80082ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	031b      	lsls	r3, r3, #12
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	4a19      	ldr	r2, [pc, #100]	; (8008338 <TIM_OC4_SetConfig+0xc0>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d00f      	beq.n	80082f8 <TIM_OC4_SetConfig+0x80>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	4a18      	ldr	r2, [pc, #96]	; (800833c <TIM_OC4_SetConfig+0xc4>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d00b      	beq.n	80082f8 <TIM_OC4_SetConfig+0x80>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4a17      	ldr	r2, [pc, #92]	; (8008340 <TIM_OC4_SetConfig+0xc8>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d007      	beq.n	80082f8 <TIM_OC4_SetConfig+0x80>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	4a16      	ldr	r2, [pc, #88]	; (8008344 <TIM_OC4_SetConfig+0xcc>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d003      	beq.n	80082f8 <TIM_OC4_SetConfig+0x80>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	4a15      	ldr	r2, [pc, #84]	; (8008348 <TIM_OC4_SetConfig+0xd0>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d109      	bne.n	800830c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	019b      	lsls	r3, r3, #6
 8008306:	697a      	ldr	r2, [r7, #20]
 8008308:	4313      	orrs	r3, r2
 800830a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	68fa      	ldr	r2, [r7, #12]
 8008316:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	693a      	ldr	r2, [r7, #16]
 8008324:	621a      	str	r2, [r3, #32]
}
 8008326:	bf00      	nop
 8008328:	371c      	adds	r7, #28
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr
 8008332:	bf00      	nop
 8008334:	feff8fff 	.word	0xfeff8fff
 8008338:	40010000 	.word	0x40010000
 800833c:	40010400 	.word	0x40010400
 8008340:	40014000 	.word	0x40014000
 8008344:	40014400 	.word	0x40014400
 8008348:	40014800 	.word	0x40014800

0800834c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008374:	68fa      	ldr	r2, [r7, #12]
 8008376:	4b21      	ldr	r3, [pc, #132]	; (80083fc <TIM_OC5_SetConfig+0xb0>)
 8008378:	4013      	ands	r3, r2
 800837a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	68fa      	ldr	r2, [r7, #12]
 8008382:	4313      	orrs	r3, r2
 8008384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800838c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	041b      	lsls	r3, r3, #16
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	4313      	orrs	r3, r2
 8008398:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a18      	ldr	r2, [pc, #96]	; (8008400 <TIM_OC5_SetConfig+0xb4>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d00f      	beq.n	80083c2 <TIM_OC5_SetConfig+0x76>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	4a17      	ldr	r2, [pc, #92]	; (8008404 <TIM_OC5_SetConfig+0xb8>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d00b      	beq.n	80083c2 <TIM_OC5_SetConfig+0x76>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a16      	ldr	r2, [pc, #88]	; (8008408 <TIM_OC5_SetConfig+0xbc>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d007      	beq.n	80083c2 <TIM_OC5_SetConfig+0x76>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a15      	ldr	r2, [pc, #84]	; (800840c <TIM_OC5_SetConfig+0xc0>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d003      	beq.n	80083c2 <TIM_OC5_SetConfig+0x76>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a14      	ldr	r2, [pc, #80]	; (8008410 <TIM_OC5_SetConfig+0xc4>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d109      	bne.n	80083d6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083c8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	021b      	lsls	r3, r3, #8
 80083d0:	697a      	ldr	r2, [r7, #20]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	697a      	ldr	r2, [r7, #20]
 80083da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	68fa      	ldr	r2, [r7, #12]
 80083e0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	685a      	ldr	r2, [r3, #4]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	621a      	str	r2, [r3, #32]
}
 80083f0:	bf00      	nop
 80083f2:	371c      	adds	r7, #28
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	fffeff8f 	.word	0xfffeff8f
 8008400:	40010000 	.word	0x40010000
 8008404:	40010400 	.word	0x40010400
 8008408:	40014000 	.word	0x40014000
 800840c:	40014400 	.word	0x40014400
 8008410:	40014800 	.word	0x40014800

08008414 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008414:	b480      	push	{r7}
 8008416:	b087      	sub	sp, #28
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a1b      	ldr	r3, [r3, #32]
 8008422:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a1b      	ldr	r3, [r3, #32]
 800842e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	4b22      	ldr	r3, [pc, #136]	; (80084c8 <TIM_OC6_SetConfig+0xb4>)
 8008440:	4013      	ands	r3, r2
 8008442:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	021b      	lsls	r3, r3, #8
 800844a:	68fa      	ldr	r2, [r7, #12]
 800844c:	4313      	orrs	r3, r2
 800844e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	051b      	lsls	r3, r3, #20
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	4313      	orrs	r3, r2
 8008462:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4a19      	ldr	r2, [pc, #100]	; (80084cc <TIM_OC6_SetConfig+0xb8>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d00f      	beq.n	800848c <TIM_OC6_SetConfig+0x78>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	4a18      	ldr	r2, [pc, #96]	; (80084d0 <TIM_OC6_SetConfig+0xbc>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d00b      	beq.n	800848c <TIM_OC6_SetConfig+0x78>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	4a17      	ldr	r2, [pc, #92]	; (80084d4 <TIM_OC6_SetConfig+0xc0>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d007      	beq.n	800848c <TIM_OC6_SetConfig+0x78>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4a16      	ldr	r2, [pc, #88]	; (80084d8 <TIM_OC6_SetConfig+0xc4>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d003      	beq.n	800848c <TIM_OC6_SetConfig+0x78>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	4a15      	ldr	r2, [pc, #84]	; (80084dc <TIM_OC6_SetConfig+0xc8>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d109      	bne.n	80084a0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008492:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	695b      	ldr	r3, [r3, #20]
 8008498:	029b      	lsls	r3, r3, #10
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	4313      	orrs	r3, r2
 800849e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	697a      	ldr	r2, [r7, #20]
 80084a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	68fa      	ldr	r2, [r7, #12]
 80084aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	621a      	str	r2, [r3, #32]
}
 80084ba:	bf00      	nop
 80084bc:	371c      	adds	r7, #28
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	feff8fff 	.word	0xfeff8fff
 80084cc:	40010000 	.word	0x40010000
 80084d0:	40010400 	.word	0x40010400
 80084d4:	40014000 	.word	0x40014000
 80084d8:	40014400 	.word	0x40014400
 80084dc:	40014800 	.word	0x40014800

080084e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	f023 0201 	bic.w	r2, r3, #1
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800850a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	4313      	orrs	r3, r2
 8008514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f023 030a 	bic.w	r3, r3, #10
 800851c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	4313      	orrs	r3, r2
 8008524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	621a      	str	r2, [r3, #32]
}
 8008532:	bf00      	nop
 8008534:	371c      	adds	r7, #28
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800853e:	b480      	push	{r7}
 8008540:	b087      	sub	sp, #28
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6a1b      	ldr	r3, [r3, #32]
 800854e:	f023 0210 	bic.w	r2, r3, #16
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	699b      	ldr	r3, [r3, #24]
 800855a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008568:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	031b      	lsls	r3, r3, #12
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	4313      	orrs	r3, r2
 8008572:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800857a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	011b      	lsls	r3, r3, #4
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	4313      	orrs	r3, r2
 8008584:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	697a      	ldr	r2, [r7, #20]
 800858a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	621a      	str	r2, [r3, #32]
}
 8008592:	bf00      	nop
 8008594:	371c      	adds	r7, #28
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr
	...

080085a0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	4b09      	ldr	r3, [pc, #36]	; (80085d8 <TIM_ITRx_SetConfig+0x38>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085b8:	683a      	ldr	r2, [r7, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	4313      	orrs	r3, r2
 80085be:	f043 0307 	orr.w	r3, r3, #7
 80085c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	68fa      	ldr	r2, [r7, #12]
 80085c8:	609a      	str	r2, [r3, #8]
}
 80085ca:	bf00      	nop
 80085cc:	3714      	adds	r7, #20
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	ffcfff8f 	.word	0xffcfff8f

080085dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085dc:	b480      	push	{r7}
 80085de:	b087      	sub	sp, #28
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	60f8      	str	r0, [r7, #12]
 80085e4:	60b9      	str	r1, [r7, #8]
 80085e6:	607a      	str	r2, [r7, #4]
 80085e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	021a      	lsls	r2, r3, #8
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	431a      	orrs	r2, r3
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	4313      	orrs	r3, r2
 8008604:	697a      	ldr	r2, [r7, #20]
 8008606:	4313      	orrs	r3, r2
 8008608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	697a      	ldr	r2, [r7, #20]
 800860e:	609a      	str	r2, [r3, #8]
}
 8008610:	bf00      	nop
 8008612:	371c      	adds	r7, #28
 8008614:	46bd      	mov	sp, r7
 8008616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861a:	4770      	bx	lr

0800861c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800861c:	b480      	push	{r7}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f003 031f 	and.w	r3, r3, #31
 800862e:	2201      	movs	r2, #1
 8008630:	fa02 f303 	lsl.w	r3, r2, r3
 8008634:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6a1a      	ldr	r2, [r3, #32]
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	43db      	mvns	r3, r3
 800863e:	401a      	ands	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6a1a      	ldr	r2, [r3, #32]
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	f003 031f 	and.w	r3, r3, #31
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	fa01 f303 	lsl.w	r3, r1, r3
 8008654:	431a      	orrs	r2, r3
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	621a      	str	r2, [r3, #32]
}
 800865a:	bf00      	nop
 800865c:	371c      	adds	r7, #28
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
	...

08008668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008678:	2b01      	cmp	r3, #1
 800867a:	d101      	bne.n	8008680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800867c:	2302      	movs	r3, #2
 800867e:	e06d      	b.n	800875c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2201      	movs	r2, #1
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2202      	movs	r2, #2
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	689b      	ldr	r3, [r3, #8]
 800869e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a30      	ldr	r2, [pc, #192]	; (8008768 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d004      	beq.n	80086b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a2f      	ldr	r2, [pc, #188]	; (800876c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d108      	bne.n	80086c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80086ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	68fa      	ldr	r2, [r7, #12]
 80086c2:	4313      	orrs	r3, r2
 80086c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	68fa      	ldr	r2, [r7, #12]
 80086de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a20      	ldr	r2, [pc, #128]	; (8008768 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d022      	beq.n	8008730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f2:	d01d      	beq.n	8008730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a1d      	ldr	r2, [pc, #116]	; (8008770 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d018      	beq.n	8008730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a1c      	ldr	r2, [pc, #112]	; (8008774 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d013      	beq.n	8008730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a1a      	ldr	r2, [pc, #104]	; (8008778 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d00e      	beq.n	8008730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a15      	ldr	r2, [pc, #84]	; (800876c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d009      	beq.n	8008730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a16      	ldr	r2, [pc, #88]	; (800877c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d004      	beq.n	8008730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4a15      	ldr	r2, [pc, #84]	; (8008780 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d10c      	bne.n	800874a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008736:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	4313      	orrs	r3, r2
 8008740:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68ba      	ldr	r2, [r7, #8]
 8008748:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	3714      	adds	r7, #20
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	40010000 	.word	0x40010000
 800876c:	40010400 	.word	0x40010400
 8008770:	40000400 	.word	0x40000400
 8008774:	40000800 	.word	0x40000800
 8008778:	40000c00 	.word	0x40000c00
 800877c:	40001800 	.word	0x40001800
 8008780:	40014000 	.word	0x40014000

08008784 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d101      	bne.n	8008796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e042      	b.n	800881c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800879c:	2b00      	cmp	r3, #0
 800879e:	d106      	bne.n	80087ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7f8 feb9 	bl	8001520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2224      	movs	r2, #36	; 0x24
 80087b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f022 0201 	bic.w	r2, r2, #1
 80087c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f8c2 	bl	8008950 <UART_SetConfig>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d101      	bne.n	80087d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e022      	b.n	800881c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d002      	beq.n	80087e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 fe1e 	bl	8009420 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685a      	ldr	r2, [r3, #4]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80087f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689a      	ldr	r2, [r3, #8]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008802:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f042 0201 	orr.w	r2, r2, #1
 8008812:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fea5 	bl	8009564 <UART_CheckIdleState>
 800881a:	4603      	mov	r3, r0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b08a      	sub	sp, #40	; 0x28
 8008828:	af02      	add	r7, sp, #8
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	603b      	str	r3, [r7, #0]
 8008830:	4613      	mov	r3, r2
 8008832:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800883a:	2b20      	cmp	r3, #32
 800883c:	f040 8083 	bne.w	8008946 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8008840:	68bb      	ldr	r3, [r7, #8]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d002      	beq.n	800884c <HAL_UART_Transmit+0x28>
 8008846:	88fb      	ldrh	r3, [r7, #6]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800884c:	2301      	movs	r3, #1
 800884e:	e07b      	b.n	8008948 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008856:	2b01      	cmp	r3, #1
 8008858:	d101      	bne.n	800885e <HAL_UART_Transmit+0x3a>
 800885a:	2302      	movs	r3, #2
 800885c:	e074      	b.n	8008948 <HAL_UART_Transmit+0x124>
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2200      	movs	r2, #0
 800886a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2221      	movs	r2, #33	; 0x21
 8008872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008876:	f7f9 f83b 	bl	80018f0 <HAL_GetTick>
 800887a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	88fa      	ldrh	r2, [r7, #6]
 8008880:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	88fa      	ldrh	r2, [r7, #6]
 8008888:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008894:	d108      	bne.n	80088a8 <HAL_UART_Transmit+0x84>
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d104      	bne.n	80088a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800889e:	2300      	movs	r3, #0
 80088a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80088a2:	68bb      	ldr	r3, [r7, #8]
 80088a4:	61bb      	str	r3, [r7, #24]
 80088a6:	e003      	b.n	80088b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80088ac:	2300      	movs	r3, #0
 80088ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80088b8:	e02c      	b.n	8008914 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	9300      	str	r3, [sp, #0]
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2200      	movs	r2, #0
 80088c2:	2180      	movs	r1, #128	; 0x80
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f000 fe98 	bl	80095fa <UART_WaitOnFlagUntilTimeout>
 80088ca:	4603      	mov	r3, r0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d001      	beq.n	80088d4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e039      	b.n	8008948 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10b      	bne.n	80088f2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	881b      	ldrh	r3, [r3, #0]
 80088de:	461a      	mov	r2, r3
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80088e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	3302      	adds	r3, #2
 80088ee:	61bb      	str	r3, [r7, #24]
 80088f0:	e007      	b.n	8008902 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	781a      	ldrb	r2, [r3, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80088fc:	69fb      	ldr	r3, [r7, #28]
 80088fe:	3301      	adds	r3, #1
 8008900:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008908:	b29b      	uxth	r3, r3
 800890a:	3b01      	subs	r3, #1
 800890c:	b29a      	uxth	r2, r3
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800891a:	b29b      	uxth	r3, r3
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1cc      	bne.n	80088ba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	2200      	movs	r2, #0
 8008928:	2140      	movs	r1, #64	; 0x40
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f000 fe65 	bl	80095fa <UART_WaitOnFlagUntilTimeout>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8008936:	2303      	movs	r3, #3
 8008938:	e006      	b.n	8008948 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2220      	movs	r2, #32
 800893e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8008942:	2300      	movs	r3, #0
 8008944:	e000      	b.n	8008948 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8008946:	2302      	movs	r3, #2
  }
}
 8008948:	4618      	mov	r0, r3
 800894a:	3720      	adds	r7, #32
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008954:	b092      	sub	sp, #72	; 0x48
 8008956:	af00      	add	r7, sp, #0
 8008958:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	431a      	orrs	r2, r3
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	431a      	orrs	r2, r3
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	69db      	ldr	r3, [r3, #28]
 8008974:	4313      	orrs	r3, r2
 8008976:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	4bbe      	ldr	r3, [pc, #760]	; (8008c78 <UART_SetConfig+0x328>)
 8008980:	4013      	ands	r3, r2
 8008982:	697a      	ldr	r2, [r7, #20]
 8008984:	6812      	ldr	r2, [r2, #0]
 8008986:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008988:	430b      	orrs	r3, r1
 800898a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	68da      	ldr	r2, [r3, #12]
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	430a      	orrs	r2, r1
 80089a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	699b      	ldr	r3, [r3, #24]
 80089a6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4ab3      	ldr	r2, [pc, #716]	; (8008c7c <UART_SetConfig+0x32c>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d004      	beq.n	80089bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089b8:	4313      	orrs	r3, r2
 80089ba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689a      	ldr	r2, [r3, #8]
 80089c2:	4baf      	ldr	r3, [pc, #700]	; (8008c80 <UART_SetConfig+0x330>)
 80089c4:	4013      	ands	r3, r2
 80089c6:	697a      	ldr	r2, [r7, #20]
 80089c8:	6812      	ldr	r2, [r2, #0]
 80089ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089cc:	430b      	orrs	r3, r1
 80089ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089d0:	697b      	ldr	r3, [r7, #20]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089d6:	f023 010f 	bic.w	r1, r3, #15
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089de:	697b      	ldr	r3, [r7, #20]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	430a      	orrs	r2, r1
 80089e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4aa6      	ldr	r2, [pc, #664]	; (8008c84 <UART_SetConfig+0x334>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d177      	bne.n	8008ae0 <UART_SetConfig+0x190>
 80089f0:	4ba5      	ldr	r3, [pc, #660]	; (8008c88 <UART_SetConfig+0x338>)
 80089f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80089f8:	2b28      	cmp	r3, #40	; 0x28
 80089fa:	d86d      	bhi.n	8008ad8 <UART_SetConfig+0x188>
 80089fc:	a201      	add	r2, pc, #4	; (adr r2, 8008a04 <UART_SetConfig+0xb4>)
 80089fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a02:	bf00      	nop
 8008a04:	08008aa9 	.word	0x08008aa9
 8008a08:	08008ad9 	.word	0x08008ad9
 8008a0c:	08008ad9 	.word	0x08008ad9
 8008a10:	08008ad9 	.word	0x08008ad9
 8008a14:	08008ad9 	.word	0x08008ad9
 8008a18:	08008ad9 	.word	0x08008ad9
 8008a1c:	08008ad9 	.word	0x08008ad9
 8008a20:	08008ad9 	.word	0x08008ad9
 8008a24:	08008ab1 	.word	0x08008ab1
 8008a28:	08008ad9 	.word	0x08008ad9
 8008a2c:	08008ad9 	.word	0x08008ad9
 8008a30:	08008ad9 	.word	0x08008ad9
 8008a34:	08008ad9 	.word	0x08008ad9
 8008a38:	08008ad9 	.word	0x08008ad9
 8008a3c:	08008ad9 	.word	0x08008ad9
 8008a40:	08008ad9 	.word	0x08008ad9
 8008a44:	08008ab9 	.word	0x08008ab9
 8008a48:	08008ad9 	.word	0x08008ad9
 8008a4c:	08008ad9 	.word	0x08008ad9
 8008a50:	08008ad9 	.word	0x08008ad9
 8008a54:	08008ad9 	.word	0x08008ad9
 8008a58:	08008ad9 	.word	0x08008ad9
 8008a5c:	08008ad9 	.word	0x08008ad9
 8008a60:	08008ad9 	.word	0x08008ad9
 8008a64:	08008ac1 	.word	0x08008ac1
 8008a68:	08008ad9 	.word	0x08008ad9
 8008a6c:	08008ad9 	.word	0x08008ad9
 8008a70:	08008ad9 	.word	0x08008ad9
 8008a74:	08008ad9 	.word	0x08008ad9
 8008a78:	08008ad9 	.word	0x08008ad9
 8008a7c:	08008ad9 	.word	0x08008ad9
 8008a80:	08008ad9 	.word	0x08008ad9
 8008a84:	08008ac9 	.word	0x08008ac9
 8008a88:	08008ad9 	.word	0x08008ad9
 8008a8c:	08008ad9 	.word	0x08008ad9
 8008a90:	08008ad9 	.word	0x08008ad9
 8008a94:	08008ad9 	.word	0x08008ad9
 8008a98:	08008ad9 	.word	0x08008ad9
 8008a9c:	08008ad9 	.word	0x08008ad9
 8008aa0:	08008ad9 	.word	0x08008ad9
 8008aa4:	08008ad1 	.word	0x08008ad1
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008aae:	e222      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008ab0:	2304      	movs	r3, #4
 8008ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ab6:	e21e      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008ab8:	2308      	movs	r3, #8
 8008aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008abe:	e21a      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008ac0:	2310      	movs	r3, #16
 8008ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ac6:	e216      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008ac8:	2320      	movs	r3, #32
 8008aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ace:	e212      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008ad0:	2340      	movs	r3, #64	; 0x40
 8008ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ad6:	e20e      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008ad8:	2380      	movs	r3, #128	; 0x80
 8008ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ade:	e20a      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a69      	ldr	r2, [pc, #420]	; (8008c8c <UART_SetConfig+0x33c>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d130      	bne.n	8008b4c <UART_SetConfig+0x1fc>
 8008aea:	4b67      	ldr	r3, [pc, #412]	; (8008c88 <UART_SetConfig+0x338>)
 8008aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aee:	f003 0307 	and.w	r3, r3, #7
 8008af2:	2b05      	cmp	r3, #5
 8008af4:	d826      	bhi.n	8008b44 <UART_SetConfig+0x1f4>
 8008af6:	a201      	add	r2, pc, #4	; (adr r2, 8008afc <UART_SetConfig+0x1ac>)
 8008af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afc:	08008b15 	.word	0x08008b15
 8008b00:	08008b1d 	.word	0x08008b1d
 8008b04:	08008b25 	.word	0x08008b25
 8008b08:	08008b2d 	.word	0x08008b2d
 8008b0c:	08008b35 	.word	0x08008b35
 8008b10:	08008b3d 	.word	0x08008b3d
 8008b14:	2300      	movs	r3, #0
 8008b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b1a:	e1ec      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008b1c:	2304      	movs	r3, #4
 8008b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b22:	e1e8      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008b24:	2308      	movs	r3, #8
 8008b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b2a:	e1e4      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008b2c:	2310      	movs	r3, #16
 8008b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b32:	e1e0      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008b34:	2320      	movs	r3, #32
 8008b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b3a:	e1dc      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008b3c:	2340      	movs	r3, #64	; 0x40
 8008b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b42:	e1d8      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008b44:	2380      	movs	r3, #128	; 0x80
 8008b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b4a:	e1d4      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a4f      	ldr	r2, [pc, #316]	; (8008c90 <UART_SetConfig+0x340>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d130      	bne.n	8008bb8 <UART_SetConfig+0x268>
 8008b56:	4b4c      	ldr	r3, [pc, #304]	; (8008c88 <UART_SetConfig+0x338>)
 8008b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b5a:	f003 0307 	and.w	r3, r3, #7
 8008b5e:	2b05      	cmp	r3, #5
 8008b60:	d826      	bhi.n	8008bb0 <UART_SetConfig+0x260>
 8008b62:	a201      	add	r2, pc, #4	; (adr r2, 8008b68 <UART_SetConfig+0x218>)
 8008b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b68:	08008b81 	.word	0x08008b81
 8008b6c:	08008b89 	.word	0x08008b89
 8008b70:	08008b91 	.word	0x08008b91
 8008b74:	08008b99 	.word	0x08008b99
 8008b78:	08008ba1 	.word	0x08008ba1
 8008b7c:	08008ba9 	.word	0x08008ba9
 8008b80:	2300      	movs	r3, #0
 8008b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b86:	e1b6      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008b88:	2304      	movs	r3, #4
 8008b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b8e:	e1b2      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008b90:	2308      	movs	r3, #8
 8008b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b96:	e1ae      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008b98:	2310      	movs	r3, #16
 8008b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008b9e:	e1aa      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008ba0:	2320      	movs	r3, #32
 8008ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ba6:	e1a6      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008ba8:	2340      	movs	r3, #64	; 0x40
 8008baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bae:	e1a2      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008bb0:	2380      	movs	r3, #128	; 0x80
 8008bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bb6:	e19e      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008bb8:	697b      	ldr	r3, [r7, #20]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a35      	ldr	r2, [pc, #212]	; (8008c94 <UART_SetConfig+0x344>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d130      	bne.n	8008c24 <UART_SetConfig+0x2d4>
 8008bc2:	4b31      	ldr	r3, [pc, #196]	; (8008c88 <UART_SetConfig+0x338>)
 8008bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	2b05      	cmp	r3, #5
 8008bcc:	d826      	bhi.n	8008c1c <UART_SetConfig+0x2cc>
 8008bce:	a201      	add	r2, pc, #4	; (adr r2, 8008bd4 <UART_SetConfig+0x284>)
 8008bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd4:	08008bed 	.word	0x08008bed
 8008bd8:	08008bf5 	.word	0x08008bf5
 8008bdc:	08008bfd 	.word	0x08008bfd
 8008be0:	08008c05 	.word	0x08008c05
 8008be4:	08008c0d 	.word	0x08008c0d
 8008be8:	08008c15 	.word	0x08008c15
 8008bec:	2300      	movs	r3, #0
 8008bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bf2:	e180      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008bf4:	2304      	movs	r3, #4
 8008bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008bfa:	e17c      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008bfc:	2308      	movs	r3, #8
 8008bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c02:	e178      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008c04:	2310      	movs	r3, #16
 8008c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c0a:	e174      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008c0c:	2320      	movs	r3, #32
 8008c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c12:	e170      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008c14:	2340      	movs	r3, #64	; 0x40
 8008c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c1a:	e16c      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008c1c:	2380      	movs	r3, #128	; 0x80
 8008c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c22:	e168      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a1b      	ldr	r2, [pc, #108]	; (8008c98 <UART_SetConfig+0x348>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d142      	bne.n	8008cb4 <UART_SetConfig+0x364>
 8008c2e:	4b16      	ldr	r3, [pc, #88]	; (8008c88 <UART_SetConfig+0x338>)
 8008c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c32:	f003 0307 	and.w	r3, r3, #7
 8008c36:	2b05      	cmp	r3, #5
 8008c38:	d838      	bhi.n	8008cac <UART_SetConfig+0x35c>
 8008c3a:	a201      	add	r2, pc, #4	; (adr r2, 8008c40 <UART_SetConfig+0x2f0>)
 8008c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c40:	08008c59 	.word	0x08008c59
 8008c44:	08008c61 	.word	0x08008c61
 8008c48:	08008c69 	.word	0x08008c69
 8008c4c:	08008c71 	.word	0x08008c71
 8008c50:	08008c9d 	.word	0x08008c9d
 8008c54:	08008ca5 	.word	0x08008ca5
 8008c58:	2300      	movs	r3, #0
 8008c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c5e:	e14a      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008c60:	2304      	movs	r3, #4
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c66:	e146      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008c68:	2308      	movs	r3, #8
 8008c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c6e:	e142      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008c70:	2310      	movs	r3, #16
 8008c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008c76:	e13e      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008c78:	cfff69f3 	.word	0xcfff69f3
 8008c7c:	58000c00 	.word	0x58000c00
 8008c80:	11fff4ff 	.word	0x11fff4ff
 8008c84:	40011000 	.word	0x40011000
 8008c88:	58024400 	.word	0x58024400
 8008c8c:	40004400 	.word	0x40004400
 8008c90:	40004800 	.word	0x40004800
 8008c94:	40004c00 	.word	0x40004c00
 8008c98:	40005000 	.word	0x40005000
 8008c9c:	2320      	movs	r3, #32
 8008c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ca2:	e128      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008ca4:	2340      	movs	r3, #64	; 0x40
 8008ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008caa:	e124      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008cac:	2380      	movs	r3, #128	; 0x80
 8008cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008cb2:	e120      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4acb      	ldr	r2, [pc, #812]	; (8008fe8 <UART_SetConfig+0x698>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d176      	bne.n	8008dac <UART_SetConfig+0x45c>
 8008cbe:	4bcb      	ldr	r3, [pc, #812]	; (8008fec <UART_SetConfig+0x69c>)
 8008cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008cc6:	2b28      	cmp	r3, #40	; 0x28
 8008cc8:	d86c      	bhi.n	8008da4 <UART_SetConfig+0x454>
 8008cca:	a201      	add	r2, pc, #4	; (adr r2, 8008cd0 <UART_SetConfig+0x380>)
 8008ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd0:	08008d75 	.word	0x08008d75
 8008cd4:	08008da5 	.word	0x08008da5
 8008cd8:	08008da5 	.word	0x08008da5
 8008cdc:	08008da5 	.word	0x08008da5
 8008ce0:	08008da5 	.word	0x08008da5
 8008ce4:	08008da5 	.word	0x08008da5
 8008ce8:	08008da5 	.word	0x08008da5
 8008cec:	08008da5 	.word	0x08008da5
 8008cf0:	08008d7d 	.word	0x08008d7d
 8008cf4:	08008da5 	.word	0x08008da5
 8008cf8:	08008da5 	.word	0x08008da5
 8008cfc:	08008da5 	.word	0x08008da5
 8008d00:	08008da5 	.word	0x08008da5
 8008d04:	08008da5 	.word	0x08008da5
 8008d08:	08008da5 	.word	0x08008da5
 8008d0c:	08008da5 	.word	0x08008da5
 8008d10:	08008d85 	.word	0x08008d85
 8008d14:	08008da5 	.word	0x08008da5
 8008d18:	08008da5 	.word	0x08008da5
 8008d1c:	08008da5 	.word	0x08008da5
 8008d20:	08008da5 	.word	0x08008da5
 8008d24:	08008da5 	.word	0x08008da5
 8008d28:	08008da5 	.word	0x08008da5
 8008d2c:	08008da5 	.word	0x08008da5
 8008d30:	08008d8d 	.word	0x08008d8d
 8008d34:	08008da5 	.word	0x08008da5
 8008d38:	08008da5 	.word	0x08008da5
 8008d3c:	08008da5 	.word	0x08008da5
 8008d40:	08008da5 	.word	0x08008da5
 8008d44:	08008da5 	.word	0x08008da5
 8008d48:	08008da5 	.word	0x08008da5
 8008d4c:	08008da5 	.word	0x08008da5
 8008d50:	08008d95 	.word	0x08008d95
 8008d54:	08008da5 	.word	0x08008da5
 8008d58:	08008da5 	.word	0x08008da5
 8008d5c:	08008da5 	.word	0x08008da5
 8008d60:	08008da5 	.word	0x08008da5
 8008d64:	08008da5 	.word	0x08008da5
 8008d68:	08008da5 	.word	0x08008da5
 8008d6c:	08008da5 	.word	0x08008da5
 8008d70:	08008d9d 	.word	0x08008d9d
 8008d74:	2301      	movs	r3, #1
 8008d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d7a:	e0bc      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008d7c:	2304      	movs	r3, #4
 8008d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d82:	e0b8      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008d84:	2308      	movs	r3, #8
 8008d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d8a:	e0b4      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008d8c:	2310      	movs	r3, #16
 8008d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d92:	e0b0      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008d94:	2320      	movs	r3, #32
 8008d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d9a:	e0ac      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008d9c:	2340      	movs	r3, #64	; 0x40
 8008d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da2:	e0a8      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008da4:	2380      	movs	r3, #128	; 0x80
 8008da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008daa:	e0a4      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a8f      	ldr	r2, [pc, #572]	; (8008ff0 <UART_SetConfig+0x6a0>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d130      	bne.n	8008e18 <UART_SetConfig+0x4c8>
 8008db6:	4b8d      	ldr	r3, [pc, #564]	; (8008fec <UART_SetConfig+0x69c>)
 8008db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008dba:	f003 0307 	and.w	r3, r3, #7
 8008dbe:	2b05      	cmp	r3, #5
 8008dc0:	d826      	bhi.n	8008e10 <UART_SetConfig+0x4c0>
 8008dc2:	a201      	add	r2, pc, #4	; (adr r2, 8008dc8 <UART_SetConfig+0x478>)
 8008dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dc8:	08008de1 	.word	0x08008de1
 8008dcc:	08008de9 	.word	0x08008de9
 8008dd0:	08008df1 	.word	0x08008df1
 8008dd4:	08008df9 	.word	0x08008df9
 8008dd8:	08008e01 	.word	0x08008e01
 8008ddc:	08008e09 	.word	0x08008e09
 8008de0:	2300      	movs	r3, #0
 8008de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008de6:	e086      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008de8:	2304      	movs	r3, #4
 8008dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dee:	e082      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008df0:	2308      	movs	r3, #8
 8008df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008df6:	e07e      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008df8:	2310      	movs	r3, #16
 8008dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dfe:	e07a      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008e00:	2320      	movs	r3, #32
 8008e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e06:	e076      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008e08:	2340      	movs	r3, #64	; 0x40
 8008e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e0e:	e072      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008e10:	2380      	movs	r3, #128	; 0x80
 8008e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e16:	e06e      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a75      	ldr	r2, [pc, #468]	; (8008ff4 <UART_SetConfig+0x6a4>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d130      	bne.n	8008e84 <UART_SetConfig+0x534>
 8008e22:	4b72      	ldr	r3, [pc, #456]	; (8008fec <UART_SetConfig+0x69c>)
 8008e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e26:	f003 0307 	and.w	r3, r3, #7
 8008e2a:	2b05      	cmp	r3, #5
 8008e2c:	d826      	bhi.n	8008e7c <UART_SetConfig+0x52c>
 8008e2e:	a201      	add	r2, pc, #4	; (adr r2, 8008e34 <UART_SetConfig+0x4e4>)
 8008e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e34:	08008e4d 	.word	0x08008e4d
 8008e38:	08008e55 	.word	0x08008e55
 8008e3c:	08008e5d 	.word	0x08008e5d
 8008e40:	08008e65 	.word	0x08008e65
 8008e44:	08008e6d 	.word	0x08008e6d
 8008e48:	08008e75 	.word	0x08008e75
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e52:	e050      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008e54:	2304      	movs	r3, #4
 8008e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e5a:	e04c      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008e5c:	2308      	movs	r3, #8
 8008e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e62:	e048      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008e64:	2310      	movs	r3, #16
 8008e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e6a:	e044      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008e6c:	2320      	movs	r3, #32
 8008e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e72:	e040      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008e74:	2340      	movs	r3, #64	; 0x40
 8008e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e7a:	e03c      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008e7c:	2380      	movs	r3, #128	; 0x80
 8008e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e82:	e038      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a5b      	ldr	r2, [pc, #364]	; (8008ff8 <UART_SetConfig+0x6a8>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d130      	bne.n	8008ef0 <UART_SetConfig+0x5a0>
 8008e8e:	4b57      	ldr	r3, [pc, #348]	; (8008fec <UART_SetConfig+0x69c>)
 8008e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e92:	f003 0307 	and.w	r3, r3, #7
 8008e96:	2b05      	cmp	r3, #5
 8008e98:	d826      	bhi.n	8008ee8 <UART_SetConfig+0x598>
 8008e9a:	a201      	add	r2, pc, #4	; (adr r2, 8008ea0 <UART_SetConfig+0x550>)
 8008e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea0:	08008eb9 	.word	0x08008eb9
 8008ea4:	08008ec1 	.word	0x08008ec1
 8008ea8:	08008ec9 	.word	0x08008ec9
 8008eac:	08008ed1 	.word	0x08008ed1
 8008eb0:	08008ed9 	.word	0x08008ed9
 8008eb4:	08008ee1 	.word	0x08008ee1
 8008eb8:	2302      	movs	r3, #2
 8008eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ebe:	e01a      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008ec0:	2304      	movs	r3, #4
 8008ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ec6:	e016      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008ec8:	2308      	movs	r3, #8
 8008eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ece:	e012      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008ed0:	2310      	movs	r3, #16
 8008ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ed6:	e00e      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008ed8:	2320      	movs	r3, #32
 8008eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ede:	e00a      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008ee0:	2340      	movs	r3, #64	; 0x40
 8008ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ee6:	e006      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008ee8:	2380      	movs	r3, #128	; 0x80
 8008eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eee:	e002      	b.n	8008ef6 <UART_SetConfig+0x5a6>
 8008ef0:	2380      	movs	r3, #128	; 0x80
 8008ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	4a3f      	ldr	r2, [pc, #252]	; (8008ff8 <UART_SetConfig+0x6a8>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	f040 80f8 	bne.w	80090f2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008f06:	2b20      	cmp	r3, #32
 8008f08:	dc46      	bgt.n	8008f98 <UART_SetConfig+0x648>
 8008f0a:	2b02      	cmp	r3, #2
 8008f0c:	f2c0 8082 	blt.w	8009014 <UART_SetConfig+0x6c4>
 8008f10:	3b02      	subs	r3, #2
 8008f12:	2b1e      	cmp	r3, #30
 8008f14:	d87e      	bhi.n	8009014 <UART_SetConfig+0x6c4>
 8008f16:	a201      	add	r2, pc, #4	; (adr r2, 8008f1c <UART_SetConfig+0x5cc>)
 8008f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f1c:	08008f9f 	.word	0x08008f9f
 8008f20:	08009015 	.word	0x08009015
 8008f24:	08008fa7 	.word	0x08008fa7
 8008f28:	08009015 	.word	0x08009015
 8008f2c:	08009015 	.word	0x08009015
 8008f30:	08009015 	.word	0x08009015
 8008f34:	08008fb7 	.word	0x08008fb7
 8008f38:	08009015 	.word	0x08009015
 8008f3c:	08009015 	.word	0x08009015
 8008f40:	08009015 	.word	0x08009015
 8008f44:	08009015 	.word	0x08009015
 8008f48:	08009015 	.word	0x08009015
 8008f4c:	08009015 	.word	0x08009015
 8008f50:	08009015 	.word	0x08009015
 8008f54:	08008fc7 	.word	0x08008fc7
 8008f58:	08009015 	.word	0x08009015
 8008f5c:	08009015 	.word	0x08009015
 8008f60:	08009015 	.word	0x08009015
 8008f64:	08009015 	.word	0x08009015
 8008f68:	08009015 	.word	0x08009015
 8008f6c:	08009015 	.word	0x08009015
 8008f70:	08009015 	.word	0x08009015
 8008f74:	08009015 	.word	0x08009015
 8008f78:	08009015 	.word	0x08009015
 8008f7c:	08009015 	.word	0x08009015
 8008f80:	08009015 	.word	0x08009015
 8008f84:	08009015 	.word	0x08009015
 8008f88:	08009015 	.word	0x08009015
 8008f8c:	08009015 	.word	0x08009015
 8008f90:	08009015 	.word	0x08009015
 8008f94:	08009007 	.word	0x08009007
 8008f98:	2b40      	cmp	r3, #64	; 0x40
 8008f9a:	d037      	beq.n	800900c <UART_SetConfig+0x6bc>
 8008f9c:	e03a      	b.n	8009014 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008f9e:	f7fd fde9 	bl	8006b74 <HAL_RCCEx_GetD3PCLK1Freq>
 8008fa2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008fa4:	e03c      	b.n	8009020 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008faa:	4618      	mov	r0, r3
 8008fac:	f7fd fdf8 	bl	8006ba0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fb4:	e034      	b.n	8009020 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fb6:	f107 0318 	add.w	r3, r7, #24
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fd ff44 	bl	8006e48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008fc0:	69fb      	ldr	r3, [r7, #28]
 8008fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fc4:	e02c      	b.n	8009020 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008fc6:	4b09      	ldr	r3, [pc, #36]	; (8008fec <UART_SetConfig+0x69c>)
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f003 0320 	and.w	r3, r3, #32
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d016      	beq.n	8009000 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008fd2:	4b06      	ldr	r3, [pc, #24]	; (8008fec <UART_SetConfig+0x69c>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	08db      	lsrs	r3, r3, #3
 8008fd8:	f003 0303 	and.w	r3, r3, #3
 8008fdc:	4a07      	ldr	r2, [pc, #28]	; (8008ffc <UART_SetConfig+0x6ac>)
 8008fde:	fa22 f303 	lsr.w	r3, r2, r3
 8008fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008fe4:	e01c      	b.n	8009020 <UART_SetConfig+0x6d0>
 8008fe6:	bf00      	nop
 8008fe8:	40011400 	.word	0x40011400
 8008fec:	58024400 	.word	0x58024400
 8008ff0:	40007800 	.word	0x40007800
 8008ff4:	40007c00 	.word	0x40007c00
 8008ff8:	58000c00 	.word	0x58000c00
 8008ffc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009000:	4b9d      	ldr	r3, [pc, #628]	; (8009278 <UART_SetConfig+0x928>)
 8009002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009004:	e00c      	b.n	8009020 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009006:	4b9d      	ldr	r3, [pc, #628]	; (800927c <UART_SetConfig+0x92c>)
 8009008:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800900a:	e009      	b.n	8009020 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800900c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009010:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009012:	e005      	b.n	8009020 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009014:	2300      	movs	r3, #0
 8009016:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800901e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 81de 	beq.w	80093e4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800902c:	4a94      	ldr	r2, [pc, #592]	; (8009280 <UART_SetConfig+0x930>)
 800902e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009032:	461a      	mov	r2, r3
 8009034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009036:	fbb3 f3f2 	udiv	r3, r3, r2
 800903a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800903c:	697b      	ldr	r3, [r7, #20]
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	4613      	mov	r3, r2
 8009042:	005b      	lsls	r3, r3, #1
 8009044:	4413      	add	r3, r2
 8009046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009048:	429a      	cmp	r2, r3
 800904a:	d305      	bcc.n	8009058 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009054:	429a      	cmp	r2, r3
 8009056:	d903      	bls.n	8009060 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800905e:	e1c1      	b.n	80093e4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009062:	2200      	movs	r2, #0
 8009064:	60bb      	str	r3, [r7, #8]
 8009066:	60fa      	str	r2, [r7, #12]
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906c:	4a84      	ldr	r2, [pc, #528]	; (8009280 <UART_SetConfig+0x930>)
 800906e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009072:	b29b      	uxth	r3, r3
 8009074:	2200      	movs	r2, #0
 8009076:	603b      	str	r3, [r7, #0]
 8009078:	607a      	str	r2, [r7, #4]
 800907a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800907e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009082:	f7f7 f985 	bl	8000390 <__aeabi_uldivmod>
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	4610      	mov	r0, r2
 800908c:	4619      	mov	r1, r3
 800908e:	f04f 0200 	mov.w	r2, #0
 8009092:	f04f 0300 	mov.w	r3, #0
 8009096:	020b      	lsls	r3, r1, #8
 8009098:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800909c:	0202      	lsls	r2, r0, #8
 800909e:	6979      	ldr	r1, [r7, #20]
 80090a0:	6849      	ldr	r1, [r1, #4]
 80090a2:	0849      	lsrs	r1, r1, #1
 80090a4:	2000      	movs	r0, #0
 80090a6:	460c      	mov	r4, r1
 80090a8:	4605      	mov	r5, r0
 80090aa:	eb12 0804 	adds.w	r8, r2, r4
 80090ae:	eb43 0905 	adc.w	r9, r3, r5
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	2200      	movs	r2, #0
 80090b8:	469a      	mov	sl, r3
 80090ba:	4693      	mov	fp, r2
 80090bc:	4652      	mov	r2, sl
 80090be:	465b      	mov	r3, fp
 80090c0:	4640      	mov	r0, r8
 80090c2:	4649      	mov	r1, r9
 80090c4:	f7f7 f964 	bl	8000390 <__aeabi_uldivmod>
 80090c8:	4602      	mov	r2, r0
 80090ca:	460b      	mov	r3, r1
 80090cc:	4613      	mov	r3, r2
 80090ce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80090d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090d6:	d308      	bcc.n	80090ea <UART_SetConfig+0x79a>
 80090d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090de:	d204      	bcs.n	80090ea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80090e6:	60da      	str	r2, [r3, #12]
 80090e8:	e17c      	b.n	80093e4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80090f0:	e178      	b.n	80093e4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	69db      	ldr	r3, [r3, #28]
 80090f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090fa:	f040 80c5 	bne.w	8009288 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80090fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009102:	2b20      	cmp	r3, #32
 8009104:	dc48      	bgt.n	8009198 <UART_SetConfig+0x848>
 8009106:	2b00      	cmp	r3, #0
 8009108:	db7b      	blt.n	8009202 <UART_SetConfig+0x8b2>
 800910a:	2b20      	cmp	r3, #32
 800910c:	d879      	bhi.n	8009202 <UART_SetConfig+0x8b2>
 800910e:	a201      	add	r2, pc, #4	; (adr r2, 8009114 <UART_SetConfig+0x7c4>)
 8009110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009114:	0800919f 	.word	0x0800919f
 8009118:	080091a7 	.word	0x080091a7
 800911c:	08009203 	.word	0x08009203
 8009120:	08009203 	.word	0x08009203
 8009124:	080091af 	.word	0x080091af
 8009128:	08009203 	.word	0x08009203
 800912c:	08009203 	.word	0x08009203
 8009130:	08009203 	.word	0x08009203
 8009134:	080091bf 	.word	0x080091bf
 8009138:	08009203 	.word	0x08009203
 800913c:	08009203 	.word	0x08009203
 8009140:	08009203 	.word	0x08009203
 8009144:	08009203 	.word	0x08009203
 8009148:	08009203 	.word	0x08009203
 800914c:	08009203 	.word	0x08009203
 8009150:	08009203 	.word	0x08009203
 8009154:	080091cf 	.word	0x080091cf
 8009158:	08009203 	.word	0x08009203
 800915c:	08009203 	.word	0x08009203
 8009160:	08009203 	.word	0x08009203
 8009164:	08009203 	.word	0x08009203
 8009168:	08009203 	.word	0x08009203
 800916c:	08009203 	.word	0x08009203
 8009170:	08009203 	.word	0x08009203
 8009174:	08009203 	.word	0x08009203
 8009178:	08009203 	.word	0x08009203
 800917c:	08009203 	.word	0x08009203
 8009180:	08009203 	.word	0x08009203
 8009184:	08009203 	.word	0x08009203
 8009188:	08009203 	.word	0x08009203
 800918c:	08009203 	.word	0x08009203
 8009190:	08009203 	.word	0x08009203
 8009194:	080091f5 	.word	0x080091f5
 8009198:	2b40      	cmp	r3, #64	; 0x40
 800919a:	d02e      	beq.n	80091fa <UART_SetConfig+0x8aa>
 800919c:	e031      	b.n	8009202 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800919e:	f7fc f8a5 	bl	80052ec <HAL_RCC_GetPCLK1Freq>
 80091a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091a4:	e033      	b.n	800920e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80091a6:	f7fc f8b7 	bl	8005318 <HAL_RCC_GetPCLK2Freq>
 80091aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80091ac:	e02f      	b.n	800920e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fd fcf4 	bl	8006ba0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80091b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091bc:	e027      	b.n	800920e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091be:	f107 0318 	add.w	r3, r7, #24
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fd fe40 	bl	8006e48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091cc:	e01f      	b.n	800920e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80091ce:	4b2d      	ldr	r3, [pc, #180]	; (8009284 <UART_SetConfig+0x934>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	f003 0320 	and.w	r3, r3, #32
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d009      	beq.n	80091ee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80091da:	4b2a      	ldr	r3, [pc, #168]	; (8009284 <UART_SetConfig+0x934>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	08db      	lsrs	r3, r3, #3
 80091e0:	f003 0303 	and.w	r3, r3, #3
 80091e4:	4a24      	ldr	r2, [pc, #144]	; (8009278 <UART_SetConfig+0x928>)
 80091e6:	fa22 f303 	lsr.w	r3, r2, r3
 80091ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80091ec:	e00f      	b.n	800920e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80091ee:	4b22      	ldr	r3, [pc, #136]	; (8009278 <UART_SetConfig+0x928>)
 80091f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091f2:	e00c      	b.n	800920e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80091f4:	4b21      	ldr	r3, [pc, #132]	; (800927c <UART_SetConfig+0x92c>)
 80091f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091f8:	e009      	b.n	800920e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009200:	e005      	b.n	800920e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009202:	2300      	movs	r3, #0
 8009204:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009206:	2301      	movs	r3, #1
 8009208:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800920c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800920e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009210:	2b00      	cmp	r3, #0
 8009212:	f000 80e7 	beq.w	80093e4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921a:	4a19      	ldr	r2, [pc, #100]	; (8009280 <UART_SetConfig+0x930>)
 800921c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009220:	461a      	mov	r2, r3
 8009222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009224:	fbb3 f3f2 	udiv	r3, r3, r2
 8009228:	005a      	lsls	r2, r3, #1
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	085b      	lsrs	r3, r3, #1
 8009230:	441a      	add	r2, r3
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	685b      	ldr	r3, [r3, #4]
 8009236:	fbb2 f3f3 	udiv	r3, r2, r3
 800923a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800923c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923e:	2b0f      	cmp	r3, #15
 8009240:	d916      	bls.n	8009270 <UART_SetConfig+0x920>
 8009242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009248:	d212      	bcs.n	8009270 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800924a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924c:	b29b      	uxth	r3, r3
 800924e:	f023 030f 	bic.w	r3, r3, #15
 8009252:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009256:	085b      	lsrs	r3, r3, #1
 8009258:	b29b      	uxth	r3, r3
 800925a:	f003 0307 	and.w	r3, r3, #7
 800925e:	b29a      	uxth	r2, r3
 8009260:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009262:	4313      	orrs	r3, r2
 8009264:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800926c:	60da      	str	r2, [r3, #12]
 800926e:	e0b9      	b.n	80093e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009270:	2301      	movs	r3, #1
 8009272:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009276:	e0b5      	b.n	80093e4 <UART_SetConfig+0xa94>
 8009278:	03d09000 	.word	0x03d09000
 800927c:	003d0900 	.word	0x003d0900
 8009280:	0800c3e8 	.word	0x0800c3e8
 8009284:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009288:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800928c:	2b20      	cmp	r3, #32
 800928e:	dc49      	bgt.n	8009324 <UART_SetConfig+0x9d4>
 8009290:	2b00      	cmp	r3, #0
 8009292:	db7c      	blt.n	800938e <UART_SetConfig+0xa3e>
 8009294:	2b20      	cmp	r3, #32
 8009296:	d87a      	bhi.n	800938e <UART_SetConfig+0xa3e>
 8009298:	a201      	add	r2, pc, #4	; (adr r2, 80092a0 <UART_SetConfig+0x950>)
 800929a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800929e:	bf00      	nop
 80092a0:	0800932b 	.word	0x0800932b
 80092a4:	08009333 	.word	0x08009333
 80092a8:	0800938f 	.word	0x0800938f
 80092ac:	0800938f 	.word	0x0800938f
 80092b0:	0800933b 	.word	0x0800933b
 80092b4:	0800938f 	.word	0x0800938f
 80092b8:	0800938f 	.word	0x0800938f
 80092bc:	0800938f 	.word	0x0800938f
 80092c0:	0800934b 	.word	0x0800934b
 80092c4:	0800938f 	.word	0x0800938f
 80092c8:	0800938f 	.word	0x0800938f
 80092cc:	0800938f 	.word	0x0800938f
 80092d0:	0800938f 	.word	0x0800938f
 80092d4:	0800938f 	.word	0x0800938f
 80092d8:	0800938f 	.word	0x0800938f
 80092dc:	0800938f 	.word	0x0800938f
 80092e0:	0800935b 	.word	0x0800935b
 80092e4:	0800938f 	.word	0x0800938f
 80092e8:	0800938f 	.word	0x0800938f
 80092ec:	0800938f 	.word	0x0800938f
 80092f0:	0800938f 	.word	0x0800938f
 80092f4:	0800938f 	.word	0x0800938f
 80092f8:	0800938f 	.word	0x0800938f
 80092fc:	0800938f 	.word	0x0800938f
 8009300:	0800938f 	.word	0x0800938f
 8009304:	0800938f 	.word	0x0800938f
 8009308:	0800938f 	.word	0x0800938f
 800930c:	0800938f 	.word	0x0800938f
 8009310:	0800938f 	.word	0x0800938f
 8009314:	0800938f 	.word	0x0800938f
 8009318:	0800938f 	.word	0x0800938f
 800931c:	0800938f 	.word	0x0800938f
 8009320:	08009381 	.word	0x08009381
 8009324:	2b40      	cmp	r3, #64	; 0x40
 8009326:	d02e      	beq.n	8009386 <UART_SetConfig+0xa36>
 8009328:	e031      	b.n	800938e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800932a:	f7fb ffdf 	bl	80052ec <HAL_RCC_GetPCLK1Freq>
 800932e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009330:	e033      	b.n	800939a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009332:	f7fb fff1 	bl	8005318 <HAL_RCC_GetPCLK2Freq>
 8009336:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009338:	e02f      	b.n	800939a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800933a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800933e:	4618      	mov	r0, r3
 8009340:	f7fd fc2e 	bl	8006ba0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009348:	e027      	b.n	800939a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800934a:	f107 0318 	add.w	r3, r7, #24
 800934e:	4618      	mov	r0, r3
 8009350:	f7fd fd7a 	bl	8006e48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009354:	69fb      	ldr	r3, [r7, #28]
 8009356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009358:	e01f      	b.n	800939a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800935a:	4b2d      	ldr	r3, [pc, #180]	; (8009410 <UART_SetConfig+0xac0>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f003 0320 	and.w	r3, r3, #32
 8009362:	2b00      	cmp	r3, #0
 8009364:	d009      	beq.n	800937a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009366:	4b2a      	ldr	r3, [pc, #168]	; (8009410 <UART_SetConfig+0xac0>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	08db      	lsrs	r3, r3, #3
 800936c:	f003 0303 	and.w	r3, r3, #3
 8009370:	4a28      	ldr	r2, [pc, #160]	; (8009414 <UART_SetConfig+0xac4>)
 8009372:	fa22 f303 	lsr.w	r3, r2, r3
 8009376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009378:	e00f      	b.n	800939a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800937a:	4b26      	ldr	r3, [pc, #152]	; (8009414 <UART_SetConfig+0xac4>)
 800937c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800937e:	e00c      	b.n	800939a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009380:	4b25      	ldr	r3, [pc, #148]	; (8009418 <UART_SetConfig+0xac8>)
 8009382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009384:	e009      	b.n	800939a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800938a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800938c:	e005      	b.n	800939a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800938e:	2300      	movs	r3, #0
 8009390:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009392:	2301      	movs	r3, #1
 8009394:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009398:	bf00      	nop
    }

    if (pclk != 0U)
 800939a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800939c:	2b00      	cmp	r3, #0
 800939e:	d021      	beq.n	80093e4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a4:	4a1d      	ldr	r2, [pc, #116]	; (800941c <UART_SetConfig+0xacc>)
 80093a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80093aa:	461a      	mov	r2, r3
 80093ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	085b      	lsrs	r3, r3, #1
 80093b8:	441a      	add	r2, r3
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	fbb2 f3f3 	udiv	r3, r2, r3
 80093c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c6:	2b0f      	cmp	r3, #15
 80093c8:	d909      	bls.n	80093de <UART_SetConfig+0xa8e>
 80093ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093d0:	d205      	bcs.n	80093de <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80093d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093d4:	b29a      	uxth	r2, r3
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	60da      	str	r2, [r3, #12]
 80093dc:	e002      	b.n	80093e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80093de:	2301      	movs	r3, #1
 80093e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	2201      	movs	r2, #1
 80093f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	2200      	movs	r2, #0
 80093f8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	2200      	movs	r2, #0
 80093fe:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009400:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009404:	4618      	mov	r0, r3
 8009406:	3748      	adds	r7, #72	; 0x48
 8009408:	46bd      	mov	sp, r7
 800940a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800940e:	bf00      	nop
 8009410:	58024400 	.word	0x58024400
 8009414:	03d09000 	.word	0x03d09000
 8009418:	003d0900 	.word	0x003d0900
 800941c:	0800c3e8 	.word	0x0800c3e8

08009420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009420:	b480      	push	{r7}
 8009422:	b083      	sub	sp, #12
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800942c:	f003 0301 	and.w	r3, r3, #1
 8009430:	2b00      	cmp	r3, #0
 8009432:	d00a      	beq.n	800944a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	430a      	orrs	r2, r1
 8009448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d00a      	beq.n	800946c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	430a      	orrs	r2, r1
 800946a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009470:	f003 0304 	and.w	r3, r3, #4
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00a      	beq.n	800948e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	430a      	orrs	r2, r1
 800948c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009492:	f003 0308 	and.w	r3, r3, #8
 8009496:	2b00      	cmp	r3, #0
 8009498:	d00a      	beq.n	80094b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	685b      	ldr	r3, [r3, #4]
 80094a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	430a      	orrs	r2, r1
 80094ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b4:	f003 0310 	and.w	r3, r3, #16
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d00a      	beq.n	80094d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	430a      	orrs	r2, r1
 80094d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d6:	f003 0320 	and.w	r3, r3, #32
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00a      	beq.n	80094f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	430a      	orrs	r2, r1
 80094f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d01a      	beq.n	8009536 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	430a      	orrs	r2, r1
 8009514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800951a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800951e:	d10a      	bne.n	8009536 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	685b      	ldr	r3, [r3, #4]
 8009526:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	430a      	orrs	r2, r1
 8009534:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00a      	beq.n	8009558 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	430a      	orrs	r2, r1
 8009556:	605a      	str	r2, [r3, #4]
  }
}
 8009558:	bf00      	nop
 800955a:	370c      	adds	r7, #12
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr

08009564 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b086      	sub	sp, #24
 8009568:	af02      	add	r7, sp, #8
 800956a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009574:	f7f8 f9bc 	bl	80018f0 <HAL_GetTick>
 8009578:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f003 0308 	and.w	r3, r3, #8
 8009584:	2b08      	cmp	r3, #8
 8009586:	d10e      	bne.n	80095a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009588:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2200      	movs	r2, #0
 8009592:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 f82f 	bl	80095fa <UART_WaitOnFlagUntilTimeout>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d001      	beq.n	80095a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	e025      	b.n	80095f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f003 0304 	and.w	r3, r3, #4
 80095b0:	2b04      	cmp	r3, #4
 80095b2:	d10e      	bne.n	80095d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80095b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80095b8:	9300      	str	r3, [sp, #0]
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	f000 f819 	bl	80095fa <UART_WaitOnFlagUntilTimeout>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d001      	beq.n	80095d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80095ce:	2303      	movs	r3, #3
 80095d0:	e00f      	b.n	80095f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2220      	movs	r2, #32
 80095d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2220      	movs	r2, #32
 80095de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2200      	movs	r2, #0
 80095e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}

080095fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b09c      	sub	sp, #112	; 0x70
 80095fe:	af00      	add	r7, sp, #0
 8009600:	60f8      	str	r0, [r7, #12]
 8009602:	60b9      	str	r1, [r7, #8]
 8009604:	603b      	str	r3, [r7, #0]
 8009606:	4613      	mov	r3, r2
 8009608:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800960a:	e0a9      	b.n	8009760 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800960c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800960e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009612:	f000 80a5 	beq.w	8009760 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009616:	f7f8 f96b 	bl	80018f0 <HAL_GetTick>
 800961a:	4602      	mov	r2, r0
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009622:	429a      	cmp	r2, r3
 8009624:	d302      	bcc.n	800962c <UART_WaitOnFlagUntilTimeout+0x32>
 8009626:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009628:	2b00      	cmp	r3, #0
 800962a:	d140      	bne.n	80096ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009634:	e853 3f00 	ldrex	r3, [r3]
 8009638:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800963a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800963c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009640:	667b      	str	r3, [r7, #100]	; 0x64
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	461a      	mov	r2, r3
 8009648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800964a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800964c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800964e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009650:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009652:	e841 2300 	strex	r3, r2, [r1]
 8009656:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009658:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800965a:	2b00      	cmp	r3, #0
 800965c:	d1e6      	bne.n	800962c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	3308      	adds	r3, #8
 8009664:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009668:	e853 3f00 	ldrex	r3, [r3]
 800966c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800966e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009670:	f023 0301 	bic.w	r3, r3, #1
 8009674:	663b      	str	r3, [r7, #96]	; 0x60
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	3308      	adds	r3, #8
 800967c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800967e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009680:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009682:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009684:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009686:	e841 2300 	strex	r3, r2, [r1]
 800968a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800968c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800968e:	2b00      	cmp	r3, #0
 8009690:	d1e5      	bne.n	800965e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	2220      	movs	r2, #32
 8009696:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2220      	movs	r2, #32
 800969e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80096aa:	2303      	movs	r3, #3
 80096ac:	e069      	b.n	8009782 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f003 0304 	and.w	r3, r3, #4
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d051      	beq.n	8009760 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096ca:	d149      	bne.n	8009760 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	e853 3f00 	ldrex	r3, [r3]
 80096e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80096ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	461a      	mov	r2, r3
 80096f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80096f4:	637b      	str	r3, [r7, #52]	; 0x34
 80096f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80096fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096fc:	e841 2300 	strex	r3, r2, [r1]
 8009700:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1e6      	bne.n	80096d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	3308      	adds	r3, #8
 800970e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	e853 3f00 	ldrex	r3, [r3]
 8009716:	613b      	str	r3, [r7, #16]
   return(result);
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	f023 0301 	bic.w	r3, r3, #1
 800971e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	3308      	adds	r3, #8
 8009726:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009728:	623a      	str	r2, [r7, #32]
 800972a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800972c:	69f9      	ldr	r1, [r7, #28]
 800972e:	6a3a      	ldr	r2, [r7, #32]
 8009730:	e841 2300 	strex	r3, r2, [r1]
 8009734:	61bb      	str	r3, [r7, #24]
   return(result);
 8009736:	69bb      	ldr	r3, [r7, #24]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d1e5      	bne.n	8009708 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2220      	movs	r2, #32
 8009740:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2220      	movs	r2, #32
 8009748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2220      	movs	r2, #32
 8009750:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	e010      	b.n	8009782 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	69da      	ldr	r2, [r3, #28]
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	4013      	ands	r3, r2
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	429a      	cmp	r2, r3
 800976e:	bf0c      	ite	eq
 8009770:	2301      	moveq	r3, #1
 8009772:	2300      	movne	r3, #0
 8009774:	b2db      	uxtb	r3, r3
 8009776:	461a      	mov	r2, r3
 8009778:	79fb      	ldrb	r3, [r7, #7]
 800977a:	429a      	cmp	r2, r3
 800977c:	f43f af46 	beq.w	800960c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009780:	2300      	movs	r3, #0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3770      	adds	r7, #112	; 0x70
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800978a:	b480      	push	{r7}
 800978c:	b085      	sub	sp, #20
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009798:	2b01      	cmp	r3, #1
 800979a:	d101      	bne.n	80097a0 <HAL_UARTEx_DisableFifoMode+0x16>
 800979c:	2302      	movs	r3, #2
 800979e:	e027      	b.n	80097f0 <HAL_UARTEx_DisableFifoMode+0x66>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2201      	movs	r2, #1
 80097a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2224      	movs	r2, #36	; 0x24
 80097ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f022 0201 	bic.w	r2, r2, #1
 80097c6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80097ce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2220      	movs	r2, #32
 80097e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80097ee:	2300      	movs	r3, #0
}
 80097f0:	4618      	mov	r0, r3
 80097f2:	3714      	adds	r7, #20
 80097f4:	46bd      	mov	sp, r7
 80097f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fa:	4770      	bx	lr

080097fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800980c:	2b01      	cmp	r3, #1
 800980e:	d101      	bne.n	8009814 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009810:	2302      	movs	r3, #2
 8009812:	e02d      	b.n	8009870 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2201      	movs	r2, #1
 8009818:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2224      	movs	r2, #36	; 0x24
 8009820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f022 0201 	bic.w	r2, r2, #1
 800983a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	430a      	orrs	r2, r1
 800984e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f000 f84f 	bl	80098f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2220      	movs	r2, #32
 8009862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800986e:	2300      	movs	r3, #0
}
 8009870:	4618      	mov	r0, r3
 8009872:	3710      	adds	r7, #16
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009888:	2b01      	cmp	r3, #1
 800988a:	d101      	bne.n	8009890 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800988c:	2302      	movs	r3, #2
 800988e:	e02d      	b.n	80098ec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2224      	movs	r2, #36	; 0x24
 800989c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f022 0201 	bic.w	r2, r2, #1
 80098b6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	430a      	orrs	r2, r1
 80098ca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 f811 	bl	80098f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2220      	movs	r2, #32
 80098de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3710      	adds	r7, #16
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}

080098f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b085      	sub	sp, #20
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009900:	2b00      	cmp	r3, #0
 8009902:	d108      	bne.n	8009916 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2201      	movs	r2, #1
 8009910:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009914:	e031      	b.n	800997a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009916:	2310      	movs	r3, #16
 8009918:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800991a:	2310      	movs	r3, #16
 800991c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	689b      	ldr	r3, [r3, #8]
 8009924:	0e5b      	lsrs	r3, r3, #25
 8009926:	b2db      	uxtb	r3, r3
 8009928:	f003 0307 	and.w	r3, r3, #7
 800992c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	689b      	ldr	r3, [r3, #8]
 8009934:	0f5b      	lsrs	r3, r3, #29
 8009936:	b2db      	uxtb	r3, r3
 8009938:	f003 0307 	and.w	r3, r3, #7
 800993c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800993e:	7bbb      	ldrb	r3, [r7, #14]
 8009940:	7b3a      	ldrb	r2, [r7, #12]
 8009942:	4911      	ldr	r1, [pc, #68]	; (8009988 <UARTEx_SetNbDataToProcess+0x94>)
 8009944:	5c8a      	ldrb	r2, [r1, r2]
 8009946:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800994a:	7b3a      	ldrb	r2, [r7, #12]
 800994c:	490f      	ldr	r1, [pc, #60]	; (800998c <UARTEx_SetNbDataToProcess+0x98>)
 800994e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009950:	fb93 f3f2 	sdiv	r3, r3, r2
 8009954:	b29a      	uxth	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800995c:	7bfb      	ldrb	r3, [r7, #15]
 800995e:	7b7a      	ldrb	r2, [r7, #13]
 8009960:	4909      	ldr	r1, [pc, #36]	; (8009988 <UARTEx_SetNbDataToProcess+0x94>)
 8009962:	5c8a      	ldrb	r2, [r1, r2]
 8009964:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009968:	7b7a      	ldrb	r2, [r7, #13]
 800996a:	4908      	ldr	r1, [pc, #32]	; (800998c <UARTEx_SetNbDataToProcess+0x98>)
 800996c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800996e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009972:	b29a      	uxth	r2, r3
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800997a:	bf00      	nop
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr
 8009986:	bf00      	nop
 8009988:	0800c400 	.word	0x0800c400
 800998c:	0800c408 	.word	0x0800c408

08009990 <__errno>:
 8009990:	4b01      	ldr	r3, [pc, #4]	; (8009998 <__errno+0x8>)
 8009992:	6818      	ldr	r0, [r3, #0]
 8009994:	4770      	bx	lr
 8009996:	bf00      	nop
 8009998:	24000018 	.word	0x24000018

0800999c <__libc_init_array>:
 800999c:	b570      	push	{r4, r5, r6, lr}
 800999e:	4d0d      	ldr	r5, [pc, #52]	; (80099d4 <__libc_init_array+0x38>)
 80099a0:	4c0d      	ldr	r4, [pc, #52]	; (80099d8 <__libc_init_array+0x3c>)
 80099a2:	1b64      	subs	r4, r4, r5
 80099a4:	10a4      	asrs	r4, r4, #2
 80099a6:	2600      	movs	r6, #0
 80099a8:	42a6      	cmp	r6, r4
 80099aa:	d109      	bne.n	80099c0 <__libc_init_array+0x24>
 80099ac:	4d0b      	ldr	r5, [pc, #44]	; (80099dc <__libc_init_array+0x40>)
 80099ae:	4c0c      	ldr	r4, [pc, #48]	; (80099e0 <__libc_init_array+0x44>)
 80099b0:	f002 fca8 	bl	800c304 <_init>
 80099b4:	1b64      	subs	r4, r4, r5
 80099b6:	10a4      	asrs	r4, r4, #2
 80099b8:	2600      	movs	r6, #0
 80099ba:	42a6      	cmp	r6, r4
 80099bc:	d105      	bne.n	80099ca <__libc_init_array+0x2e>
 80099be:	bd70      	pop	{r4, r5, r6, pc}
 80099c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80099c4:	4798      	blx	r3
 80099c6:	3601      	adds	r6, #1
 80099c8:	e7ee      	b.n	80099a8 <__libc_init_array+0xc>
 80099ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ce:	4798      	blx	r3
 80099d0:	3601      	adds	r6, #1
 80099d2:	e7f2      	b.n	80099ba <__libc_init_array+0x1e>
 80099d4:	0800c7f4 	.word	0x0800c7f4
 80099d8:	0800c7f4 	.word	0x0800c7f4
 80099dc:	0800c7f4 	.word	0x0800c7f4
 80099e0:	0800c7f8 	.word	0x0800c7f8

080099e4 <memcpy>:
 80099e4:	440a      	add	r2, r1
 80099e6:	4291      	cmp	r1, r2
 80099e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80099ec:	d100      	bne.n	80099f0 <memcpy+0xc>
 80099ee:	4770      	bx	lr
 80099f0:	b510      	push	{r4, lr}
 80099f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80099f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80099fa:	4291      	cmp	r1, r2
 80099fc:	d1f9      	bne.n	80099f2 <memcpy+0xe>
 80099fe:	bd10      	pop	{r4, pc}

08009a00 <memset>:
 8009a00:	4402      	add	r2, r0
 8009a02:	4603      	mov	r3, r0
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d100      	bne.n	8009a0a <memset+0xa>
 8009a08:	4770      	bx	lr
 8009a0a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a0e:	e7f9      	b.n	8009a04 <memset+0x4>

08009a10 <__cvt>:
 8009a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a12:	ed2d 8b02 	vpush	{d8}
 8009a16:	eeb0 8b40 	vmov.f64	d8, d0
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	4617      	mov	r7, r2
 8009a1e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009a20:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009a22:	ee18 2a90 	vmov	r2, s17
 8009a26:	f025 0520 	bic.w	r5, r5, #32
 8009a2a:	2a00      	cmp	r2, #0
 8009a2c:	bfb6      	itet	lt
 8009a2e:	222d      	movlt	r2, #45	; 0x2d
 8009a30:	2200      	movge	r2, #0
 8009a32:	eeb1 8b40 	vneglt.f64	d8, d0
 8009a36:	2d46      	cmp	r5, #70	; 0x46
 8009a38:	460c      	mov	r4, r1
 8009a3a:	701a      	strb	r2, [r3, #0]
 8009a3c:	d004      	beq.n	8009a48 <__cvt+0x38>
 8009a3e:	2d45      	cmp	r5, #69	; 0x45
 8009a40:	d100      	bne.n	8009a44 <__cvt+0x34>
 8009a42:	3401      	adds	r4, #1
 8009a44:	2102      	movs	r1, #2
 8009a46:	e000      	b.n	8009a4a <__cvt+0x3a>
 8009a48:	2103      	movs	r1, #3
 8009a4a:	ab03      	add	r3, sp, #12
 8009a4c:	9301      	str	r3, [sp, #4]
 8009a4e:	ab02      	add	r3, sp, #8
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	4622      	mov	r2, r4
 8009a54:	4633      	mov	r3, r6
 8009a56:	eeb0 0b48 	vmov.f64	d0, d8
 8009a5a:	f000 fcc1 	bl	800a3e0 <_dtoa_r>
 8009a5e:	2d47      	cmp	r5, #71	; 0x47
 8009a60:	d101      	bne.n	8009a66 <__cvt+0x56>
 8009a62:	07fb      	lsls	r3, r7, #31
 8009a64:	d51a      	bpl.n	8009a9c <__cvt+0x8c>
 8009a66:	2d46      	cmp	r5, #70	; 0x46
 8009a68:	eb00 0204 	add.w	r2, r0, r4
 8009a6c:	d10c      	bne.n	8009a88 <__cvt+0x78>
 8009a6e:	7803      	ldrb	r3, [r0, #0]
 8009a70:	2b30      	cmp	r3, #48	; 0x30
 8009a72:	d107      	bne.n	8009a84 <__cvt+0x74>
 8009a74:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a7c:	bf1c      	itt	ne
 8009a7e:	f1c4 0401 	rsbne	r4, r4, #1
 8009a82:	6034      	strne	r4, [r6, #0]
 8009a84:	6833      	ldr	r3, [r6, #0]
 8009a86:	441a      	add	r2, r3
 8009a88:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a90:	bf08      	it	eq
 8009a92:	9203      	streq	r2, [sp, #12]
 8009a94:	2130      	movs	r1, #48	; 0x30
 8009a96:	9b03      	ldr	r3, [sp, #12]
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d307      	bcc.n	8009aac <__cvt+0x9c>
 8009a9c:	9b03      	ldr	r3, [sp, #12]
 8009a9e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009aa0:	1a1b      	subs	r3, r3, r0
 8009aa2:	6013      	str	r3, [r2, #0]
 8009aa4:	b005      	add	sp, #20
 8009aa6:	ecbd 8b02 	vpop	{d8}
 8009aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009aac:	1c5c      	adds	r4, r3, #1
 8009aae:	9403      	str	r4, [sp, #12]
 8009ab0:	7019      	strb	r1, [r3, #0]
 8009ab2:	e7f0      	b.n	8009a96 <__cvt+0x86>

08009ab4 <__exponent>:
 8009ab4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	2900      	cmp	r1, #0
 8009aba:	bfb8      	it	lt
 8009abc:	4249      	neglt	r1, r1
 8009abe:	f803 2b02 	strb.w	r2, [r3], #2
 8009ac2:	bfb4      	ite	lt
 8009ac4:	222d      	movlt	r2, #45	; 0x2d
 8009ac6:	222b      	movge	r2, #43	; 0x2b
 8009ac8:	2909      	cmp	r1, #9
 8009aca:	7042      	strb	r2, [r0, #1]
 8009acc:	dd2a      	ble.n	8009b24 <__exponent+0x70>
 8009ace:	f10d 0407 	add.w	r4, sp, #7
 8009ad2:	46a4      	mov	ip, r4
 8009ad4:	270a      	movs	r7, #10
 8009ad6:	46a6      	mov	lr, r4
 8009ad8:	460a      	mov	r2, r1
 8009ada:	fb91 f6f7 	sdiv	r6, r1, r7
 8009ade:	fb07 1516 	mls	r5, r7, r6, r1
 8009ae2:	3530      	adds	r5, #48	; 0x30
 8009ae4:	2a63      	cmp	r2, #99	; 0x63
 8009ae6:	f104 34ff 	add.w	r4, r4, #4294967295
 8009aea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009aee:	4631      	mov	r1, r6
 8009af0:	dcf1      	bgt.n	8009ad6 <__exponent+0x22>
 8009af2:	3130      	adds	r1, #48	; 0x30
 8009af4:	f1ae 0502 	sub.w	r5, lr, #2
 8009af8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009afc:	1c44      	adds	r4, r0, #1
 8009afe:	4629      	mov	r1, r5
 8009b00:	4561      	cmp	r1, ip
 8009b02:	d30a      	bcc.n	8009b1a <__exponent+0x66>
 8009b04:	f10d 0209 	add.w	r2, sp, #9
 8009b08:	eba2 020e 	sub.w	r2, r2, lr
 8009b0c:	4565      	cmp	r5, ip
 8009b0e:	bf88      	it	hi
 8009b10:	2200      	movhi	r2, #0
 8009b12:	4413      	add	r3, r2
 8009b14:	1a18      	subs	r0, r3, r0
 8009b16:	b003      	add	sp, #12
 8009b18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b1e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009b22:	e7ed      	b.n	8009b00 <__exponent+0x4c>
 8009b24:	2330      	movs	r3, #48	; 0x30
 8009b26:	3130      	adds	r1, #48	; 0x30
 8009b28:	7083      	strb	r3, [r0, #2]
 8009b2a:	70c1      	strb	r1, [r0, #3]
 8009b2c:	1d03      	adds	r3, r0, #4
 8009b2e:	e7f1      	b.n	8009b14 <__exponent+0x60>

08009b30 <_printf_float>:
 8009b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b34:	b08b      	sub	sp, #44	; 0x2c
 8009b36:	460c      	mov	r4, r1
 8009b38:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009b3c:	4616      	mov	r6, r2
 8009b3e:	461f      	mov	r7, r3
 8009b40:	4605      	mov	r5, r0
 8009b42:	f001 fab1 	bl	800b0a8 <_localeconv_r>
 8009b46:	f8d0 b000 	ldr.w	fp, [r0]
 8009b4a:	4658      	mov	r0, fp
 8009b4c:	f7f6 fbc8 	bl	80002e0 <strlen>
 8009b50:	2300      	movs	r3, #0
 8009b52:	9308      	str	r3, [sp, #32]
 8009b54:	f8d8 3000 	ldr.w	r3, [r8]
 8009b58:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009b5c:	6822      	ldr	r2, [r4, #0]
 8009b5e:	3307      	adds	r3, #7
 8009b60:	f023 0307 	bic.w	r3, r3, #7
 8009b64:	f103 0108 	add.w	r1, r3, #8
 8009b68:	f8c8 1000 	str.w	r1, [r8]
 8009b6c:	4682      	mov	sl, r0
 8009b6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009b72:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009b76:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009dd8 <_printf_float+0x2a8>
 8009b7a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8009b7e:	eeb0 6bc0 	vabs.f64	d6, d0
 8009b82:	eeb4 6b47 	vcmp.f64	d6, d7
 8009b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b8a:	dd24      	ble.n	8009bd6 <_printf_float+0xa6>
 8009b8c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b94:	d502      	bpl.n	8009b9c <_printf_float+0x6c>
 8009b96:	232d      	movs	r3, #45	; 0x2d
 8009b98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b9c:	4b90      	ldr	r3, [pc, #576]	; (8009de0 <_printf_float+0x2b0>)
 8009b9e:	4891      	ldr	r0, [pc, #580]	; (8009de4 <_printf_float+0x2b4>)
 8009ba0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009ba4:	bf94      	ite	ls
 8009ba6:	4698      	movls	r8, r3
 8009ba8:	4680      	movhi	r8, r0
 8009baa:	2303      	movs	r3, #3
 8009bac:	6123      	str	r3, [r4, #16]
 8009bae:	f022 0204 	bic.w	r2, r2, #4
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	6022      	str	r2, [r4, #0]
 8009bb6:	9304      	str	r3, [sp, #16]
 8009bb8:	9700      	str	r7, [sp, #0]
 8009bba:	4633      	mov	r3, r6
 8009bbc:	aa09      	add	r2, sp, #36	; 0x24
 8009bbe:	4621      	mov	r1, r4
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	f000 f9d3 	bl	8009f6c <_printf_common>
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	f040 808a 	bne.w	8009ce0 <_printf_float+0x1b0>
 8009bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd0:	b00b      	add	sp, #44	; 0x2c
 8009bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bd6:	eeb4 0b40 	vcmp.f64	d0, d0
 8009bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bde:	d709      	bvc.n	8009bf4 <_printf_float+0xc4>
 8009be0:	ee10 3a90 	vmov	r3, s1
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	bfbc      	itt	lt
 8009be8:	232d      	movlt	r3, #45	; 0x2d
 8009bea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009bee:	487e      	ldr	r0, [pc, #504]	; (8009de8 <_printf_float+0x2b8>)
 8009bf0:	4b7e      	ldr	r3, [pc, #504]	; (8009dec <_printf_float+0x2bc>)
 8009bf2:	e7d5      	b.n	8009ba0 <_printf_float+0x70>
 8009bf4:	6863      	ldr	r3, [r4, #4]
 8009bf6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009bfa:	9104      	str	r1, [sp, #16]
 8009bfc:	1c59      	adds	r1, r3, #1
 8009bfe:	d13c      	bne.n	8009c7a <_printf_float+0x14a>
 8009c00:	2306      	movs	r3, #6
 8009c02:	6063      	str	r3, [r4, #4]
 8009c04:	2300      	movs	r3, #0
 8009c06:	9303      	str	r3, [sp, #12]
 8009c08:	ab08      	add	r3, sp, #32
 8009c0a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009c0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c12:	ab07      	add	r3, sp, #28
 8009c14:	6861      	ldr	r1, [r4, #4]
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	6022      	str	r2, [r4, #0]
 8009c1a:	f10d 031b 	add.w	r3, sp, #27
 8009c1e:	4628      	mov	r0, r5
 8009c20:	f7ff fef6 	bl	8009a10 <__cvt>
 8009c24:	9b04      	ldr	r3, [sp, #16]
 8009c26:	9907      	ldr	r1, [sp, #28]
 8009c28:	2b47      	cmp	r3, #71	; 0x47
 8009c2a:	4680      	mov	r8, r0
 8009c2c:	d108      	bne.n	8009c40 <_printf_float+0x110>
 8009c2e:	1cc8      	adds	r0, r1, #3
 8009c30:	db02      	blt.n	8009c38 <_printf_float+0x108>
 8009c32:	6863      	ldr	r3, [r4, #4]
 8009c34:	4299      	cmp	r1, r3
 8009c36:	dd41      	ble.n	8009cbc <_printf_float+0x18c>
 8009c38:	f1a9 0902 	sub.w	r9, r9, #2
 8009c3c:	fa5f f989 	uxtb.w	r9, r9
 8009c40:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009c44:	d820      	bhi.n	8009c88 <_printf_float+0x158>
 8009c46:	3901      	subs	r1, #1
 8009c48:	464a      	mov	r2, r9
 8009c4a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009c4e:	9107      	str	r1, [sp, #28]
 8009c50:	f7ff ff30 	bl	8009ab4 <__exponent>
 8009c54:	9a08      	ldr	r2, [sp, #32]
 8009c56:	9004      	str	r0, [sp, #16]
 8009c58:	1813      	adds	r3, r2, r0
 8009c5a:	2a01      	cmp	r2, #1
 8009c5c:	6123      	str	r3, [r4, #16]
 8009c5e:	dc02      	bgt.n	8009c66 <_printf_float+0x136>
 8009c60:	6822      	ldr	r2, [r4, #0]
 8009c62:	07d2      	lsls	r2, r2, #31
 8009c64:	d501      	bpl.n	8009c6a <_printf_float+0x13a>
 8009c66:	3301      	adds	r3, #1
 8009c68:	6123      	str	r3, [r4, #16]
 8009c6a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d0a2      	beq.n	8009bb8 <_printf_float+0x88>
 8009c72:	232d      	movs	r3, #45	; 0x2d
 8009c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c78:	e79e      	b.n	8009bb8 <_printf_float+0x88>
 8009c7a:	9904      	ldr	r1, [sp, #16]
 8009c7c:	2947      	cmp	r1, #71	; 0x47
 8009c7e:	d1c1      	bne.n	8009c04 <_printf_float+0xd4>
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d1bf      	bne.n	8009c04 <_printf_float+0xd4>
 8009c84:	2301      	movs	r3, #1
 8009c86:	e7bc      	b.n	8009c02 <_printf_float+0xd2>
 8009c88:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009c8c:	d118      	bne.n	8009cc0 <_printf_float+0x190>
 8009c8e:	2900      	cmp	r1, #0
 8009c90:	6863      	ldr	r3, [r4, #4]
 8009c92:	dd0b      	ble.n	8009cac <_printf_float+0x17c>
 8009c94:	6121      	str	r1, [r4, #16]
 8009c96:	b913      	cbnz	r3, 8009c9e <_printf_float+0x16e>
 8009c98:	6822      	ldr	r2, [r4, #0]
 8009c9a:	07d0      	lsls	r0, r2, #31
 8009c9c:	d502      	bpl.n	8009ca4 <_printf_float+0x174>
 8009c9e:	3301      	adds	r3, #1
 8009ca0:	440b      	add	r3, r1
 8009ca2:	6123      	str	r3, [r4, #16]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ca8:	9304      	str	r3, [sp, #16]
 8009caa:	e7de      	b.n	8009c6a <_printf_float+0x13a>
 8009cac:	b913      	cbnz	r3, 8009cb4 <_printf_float+0x184>
 8009cae:	6822      	ldr	r2, [r4, #0]
 8009cb0:	07d2      	lsls	r2, r2, #31
 8009cb2:	d501      	bpl.n	8009cb8 <_printf_float+0x188>
 8009cb4:	3302      	adds	r3, #2
 8009cb6:	e7f4      	b.n	8009ca2 <_printf_float+0x172>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e7f2      	b.n	8009ca2 <_printf_float+0x172>
 8009cbc:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009cc0:	9b08      	ldr	r3, [sp, #32]
 8009cc2:	4299      	cmp	r1, r3
 8009cc4:	db05      	blt.n	8009cd2 <_printf_float+0x1a2>
 8009cc6:	6823      	ldr	r3, [r4, #0]
 8009cc8:	6121      	str	r1, [r4, #16]
 8009cca:	07d8      	lsls	r0, r3, #31
 8009ccc:	d5ea      	bpl.n	8009ca4 <_printf_float+0x174>
 8009cce:	1c4b      	adds	r3, r1, #1
 8009cd0:	e7e7      	b.n	8009ca2 <_printf_float+0x172>
 8009cd2:	2900      	cmp	r1, #0
 8009cd4:	bfd4      	ite	le
 8009cd6:	f1c1 0202 	rsble	r2, r1, #2
 8009cda:	2201      	movgt	r2, #1
 8009cdc:	4413      	add	r3, r2
 8009cde:	e7e0      	b.n	8009ca2 <_printf_float+0x172>
 8009ce0:	6823      	ldr	r3, [r4, #0]
 8009ce2:	055a      	lsls	r2, r3, #21
 8009ce4:	d407      	bmi.n	8009cf6 <_printf_float+0x1c6>
 8009ce6:	6923      	ldr	r3, [r4, #16]
 8009ce8:	4642      	mov	r2, r8
 8009cea:	4631      	mov	r1, r6
 8009cec:	4628      	mov	r0, r5
 8009cee:	47b8      	blx	r7
 8009cf0:	3001      	adds	r0, #1
 8009cf2:	d12a      	bne.n	8009d4a <_printf_float+0x21a>
 8009cf4:	e76a      	b.n	8009bcc <_printf_float+0x9c>
 8009cf6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009cfa:	f240 80e2 	bls.w	8009ec2 <_printf_float+0x392>
 8009cfe:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009d02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d0a:	d133      	bne.n	8009d74 <_printf_float+0x244>
 8009d0c:	4a38      	ldr	r2, [pc, #224]	; (8009df0 <_printf_float+0x2c0>)
 8009d0e:	2301      	movs	r3, #1
 8009d10:	4631      	mov	r1, r6
 8009d12:	4628      	mov	r0, r5
 8009d14:	47b8      	blx	r7
 8009d16:	3001      	adds	r0, #1
 8009d18:	f43f af58 	beq.w	8009bcc <_printf_float+0x9c>
 8009d1c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	db02      	blt.n	8009d2a <_printf_float+0x1fa>
 8009d24:	6823      	ldr	r3, [r4, #0]
 8009d26:	07d8      	lsls	r0, r3, #31
 8009d28:	d50f      	bpl.n	8009d4a <_printf_float+0x21a>
 8009d2a:	4653      	mov	r3, sl
 8009d2c:	465a      	mov	r2, fp
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	47b8      	blx	r7
 8009d34:	3001      	adds	r0, #1
 8009d36:	f43f af49 	beq.w	8009bcc <_printf_float+0x9c>
 8009d3a:	f04f 0800 	mov.w	r8, #0
 8009d3e:	f104 091a 	add.w	r9, r4, #26
 8009d42:	9b08      	ldr	r3, [sp, #32]
 8009d44:	3b01      	subs	r3, #1
 8009d46:	4543      	cmp	r3, r8
 8009d48:	dc09      	bgt.n	8009d5e <_printf_float+0x22e>
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	079b      	lsls	r3, r3, #30
 8009d4e:	f100 8108 	bmi.w	8009f62 <_printf_float+0x432>
 8009d52:	68e0      	ldr	r0, [r4, #12]
 8009d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d56:	4298      	cmp	r0, r3
 8009d58:	bfb8      	it	lt
 8009d5a:	4618      	movlt	r0, r3
 8009d5c:	e738      	b.n	8009bd0 <_printf_float+0xa0>
 8009d5e:	2301      	movs	r3, #1
 8009d60:	464a      	mov	r2, r9
 8009d62:	4631      	mov	r1, r6
 8009d64:	4628      	mov	r0, r5
 8009d66:	47b8      	blx	r7
 8009d68:	3001      	adds	r0, #1
 8009d6a:	f43f af2f 	beq.w	8009bcc <_printf_float+0x9c>
 8009d6e:	f108 0801 	add.w	r8, r8, #1
 8009d72:	e7e6      	b.n	8009d42 <_printf_float+0x212>
 8009d74:	9b07      	ldr	r3, [sp, #28]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	dc3c      	bgt.n	8009df4 <_printf_float+0x2c4>
 8009d7a:	4a1d      	ldr	r2, [pc, #116]	; (8009df0 <_printf_float+0x2c0>)
 8009d7c:	2301      	movs	r3, #1
 8009d7e:	4631      	mov	r1, r6
 8009d80:	4628      	mov	r0, r5
 8009d82:	47b8      	blx	r7
 8009d84:	3001      	adds	r0, #1
 8009d86:	f43f af21 	beq.w	8009bcc <_printf_float+0x9c>
 8009d8a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	d102      	bne.n	8009d98 <_printf_float+0x268>
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	07d9      	lsls	r1, r3, #31
 8009d96:	d5d8      	bpl.n	8009d4a <_printf_float+0x21a>
 8009d98:	4653      	mov	r3, sl
 8009d9a:	465a      	mov	r2, fp
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4628      	mov	r0, r5
 8009da0:	47b8      	blx	r7
 8009da2:	3001      	adds	r0, #1
 8009da4:	f43f af12 	beq.w	8009bcc <_printf_float+0x9c>
 8009da8:	f04f 0900 	mov.w	r9, #0
 8009dac:	f104 0a1a 	add.w	sl, r4, #26
 8009db0:	9b07      	ldr	r3, [sp, #28]
 8009db2:	425b      	negs	r3, r3
 8009db4:	454b      	cmp	r3, r9
 8009db6:	dc01      	bgt.n	8009dbc <_printf_float+0x28c>
 8009db8:	9b08      	ldr	r3, [sp, #32]
 8009dba:	e795      	b.n	8009ce8 <_printf_float+0x1b8>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	4652      	mov	r2, sl
 8009dc0:	4631      	mov	r1, r6
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	47b8      	blx	r7
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	f43f af00 	beq.w	8009bcc <_printf_float+0x9c>
 8009dcc:	f109 0901 	add.w	r9, r9, #1
 8009dd0:	e7ee      	b.n	8009db0 <_printf_float+0x280>
 8009dd2:	bf00      	nop
 8009dd4:	f3af 8000 	nop.w
 8009dd8:	ffffffff 	.word	0xffffffff
 8009ddc:	7fefffff 	.word	0x7fefffff
 8009de0:	0800c414 	.word	0x0800c414
 8009de4:	0800c418 	.word	0x0800c418
 8009de8:	0800c420 	.word	0x0800c420
 8009dec:	0800c41c 	.word	0x0800c41c
 8009df0:	0800c424 	.word	0x0800c424
 8009df4:	9a08      	ldr	r2, [sp, #32]
 8009df6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	bfa8      	it	ge
 8009dfc:	461a      	movge	r2, r3
 8009dfe:	2a00      	cmp	r2, #0
 8009e00:	4691      	mov	r9, r2
 8009e02:	dc38      	bgt.n	8009e76 <_printf_float+0x346>
 8009e04:	2300      	movs	r3, #0
 8009e06:	9305      	str	r3, [sp, #20]
 8009e08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e0c:	f104 021a 	add.w	r2, r4, #26
 8009e10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e12:	9905      	ldr	r1, [sp, #20]
 8009e14:	9304      	str	r3, [sp, #16]
 8009e16:	eba3 0309 	sub.w	r3, r3, r9
 8009e1a:	428b      	cmp	r3, r1
 8009e1c:	dc33      	bgt.n	8009e86 <_printf_float+0x356>
 8009e1e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009e22:	429a      	cmp	r2, r3
 8009e24:	db3c      	blt.n	8009ea0 <_printf_float+0x370>
 8009e26:	6823      	ldr	r3, [r4, #0]
 8009e28:	07da      	lsls	r2, r3, #31
 8009e2a:	d439      	bmi.n	8009ea0 <_printf_float+0x370>
 8009e2c:	9b08      	ldr	r3, [sp, #32]
 8009e2e:	9a04      	ldr	r2, [sp, #16]
 8009e30:	9907      	ldr	r1, [sp, #28]
 8009e32:	1a9a      	subs	r2, r3, r2
 8009e34:	eba3 0901 	sub.w	r9, r3, r1
 8009e38:	4591      	cmp	r9, r2
 8009e3a:	bfa8      	it	ge
 8009e3c:	4691      	movge	r9, r2
 8009e3e:	f1b9 0f00 	cmp.w	r9, #0
 8009e42:	dc35      	bgt.n	8009eb0 <_printf_float+0x380>
 8009e44:	f04f 0800 	mov.w	r8, #0
 8009e48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e4c:	f104 0a1a 	add.w	sl, r4, #26
 8009e50:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009e54:	1a9b      	subs	r3, r3, r2
 8009e56:	eba3 0309 	sub.w	r3, r3, r9
 8009e5a:	4543      	cmp	r3, r8
 8009e5c:	f77f af75 	ble.w	8009d4a <_printf_float+0x21a>
 8009e60:	2301      	movs	r3, #1
 8009e62:	4652      	mov	r2, sl
 8009e64:	4631      	mov	r1, r6
 8009e66:	4628      	mov	r0, r5
 8009e68:	47b8      	blx	r7
 8009e6a:	3001      	adds	r0, #1
 8009e6c:	f43f aeae 	beq.w	8009bcc <_printf_float+0x9c>
 8009e70:	f108 0801 	add.w	r8, r8, #1
 8009e74:	e7ec      	b.n	8009e50 <_printf_float+0x320>
 8009e76:	4613      	mov	r3, r2
 8009e78:	4631      	mov	r1, r6
 8009e7a:	4642      	mov	r2, r8
 8009e7c:	4628      	mov	r0, r5
 8009e7e:	47b8      	blx	r7
 8009e80:	3001      	adds	r0, #1
 8009e82:	d1bf      	bne.n	8009e04 <_printf_float+0x2d4>
 8009e84:	e6a2      	b.n	8009bcc <_printf_float+0x9c>
 8009e86:	2301      	movs	r3, #1
 8009e88:	4631      	mov	r1, r6
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	9204      	str	r2, [sp, #16]
 8009e8e:	47b8      	blx	r7
 8009e90:	3001      	adds	r0, #1
 8009e92:	f43f ae9b 	beq.w	8009bcc <_printf_float+0x9c>
 8009e96:	9b05      	ldr	r3, [sp, #20]
 8009e98:	9a04      	ldr	r2, [sp, #16]
 8009e9a:	3301      	adds	r3, #1
 8009e9c:	9305      	str	r3, [sp, #20]
 8009e9e:	e7b7      	b.n	8009e10 <_printf_float+0x2e0>
 8009ea0:	4653      	mov	r3, sl
 8009ea2:	465a      	mov	r2, fp
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	4628      	mov	r0, r5
 8009ea8:	47b8      	blx	r7
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d1be      	bne.n	8009e2c <_printf_float+0x2fc>
 8009eae:	e68d      	b.n	8009bcc <_printf_float+0x9c>
 8009eb0:	9a04      	ldr	r2, [sp, #16]
 8009eb2:	464b      	mov	r3, r9
 8009eb4:	4442      	add	r2, r8
 8009eb6:	4631      	mov	r1, r6
 8009eb8:	4628      	mov	r0, r5
 8009eba:	47b8      	blx	r7
 8009ebc:	3001      	adds	r0, #1
 8009ebe:	d1c1      	bne.n	8009e44 <_printf_float+0x314>
 8009ec0:	e684      	b.n	8009bcc <_printf_float+0x9c>
 8009ec2:	9a08      	ldr	r2, [sp, #32]
 8009ec4:	2a01      	cmp	r2, #1
 8009ec6:	dc01      	bgt.n	8009ecc <_printf_float+0x39c>
 8009ec8:	07db      	lsls	r3, r3, #31
 8009eca:	d537      	bpl.n	8009f3c <_printf_float+0x40c>
 8009ecc:	2301      	movs	r3, #1
 8009ece:	4642      	mov	r2, r8
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	47b8      	blx	r7
 8009ed6:	3001      	adds	r0, #1
 8009ed8:	f43f ae78 	beq.w	8009bcc <_printf_float+0x9c>
 8009edc:	4653      	mov	r3, sl
 8009ede:	465a      	mov	r2, fp
 8009ee0:	4631      	mov	r1, r6
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	47b8      	blx	r7
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	f43f ae70 	beq.w	8009bcc <_printf_float+0x9c>
 8009eec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009ef0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ef8:	d01b      	beq.n	8009f32 <_printf_float+0x402>
 8009efa:	9b08      	ldr	r3, [sp, #32]
 8009efc:	f108 0201 	add.w	r2, r8, #1
 8009f00:	3b01      	subs	r3, #1
 8009f02:	4631      	mov	r1, r6
 8009f04:	4628      	mov	r0, r5
 8009f06:	47b8      	blx	r7
 8009f08:	3001      	adds	r0, #1
 8009f0a:	d10e      	bne.n	8009f2a <_printf_float+0x3fa>
 8009f0c:	e65e      	b.n	8009bcc <_printf_float+0x9c>
 8009f0e:	2301      	movs	r3, #1
 8009f10:	464a      	mov	r2, r9
 8009f12:	4631      	mov	r1, r6
 8009f14:	4628      	mov	r0, r5
 8009f16:	47b8      	blx	r7
 8009f18:	3001      	adds	r0, #1
 8009f1a:	f43f ae57 	beq.w	8009bcc <_printf_float+0x9c>
 8009f1e:	f108 0801 	add.w	r8, r8, #1
 8009f22:	9b08      	ldr	r3, [sp, #32]
 8009f24:	3b01      	subs	r3, #1
 8009f26:	4543      	cmp	r3, r8
 8009f28:	dcf1      	bgt.n	8009f0e <_printf_float+0x3de>
 8009f2a:	9b04      	ldr	r3, [sp, #16]
 8009f2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f30:	e6db      	b.n	8009cea <_printf_float+0x1ba>
 8009f32:	f04f 0800 	mov.w	r8, #0
 8009f36:	f104 091a 	add.w	r9, r4, #26
 8009f3a:	e7f2      	b.n	8009f22 <_printf_float+0x3f2>
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	4642      	mov	r2, r8
 8009f40:	e7df      	b.n	8009f02 <_printf_float+0x3d2>
 8009f42:	2301      	movs	r3, #1
 8009f44:	464a      	mov	r2, r9
 8009f46:	4631      	mov	r1, r6
 8009f48:	4628      	mov	r0, r5
 8009f4a:	47b8      	blx	r7
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	f43f ae3d 	beq.w	8009bcc <_printf_float+0x9c>
 8009f52:	f108 0801 	add.w	r8, r8, #1
 8009f56:	68e3      	ldr	r3, [r4, #12]
 8009f58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009f5a:	1a5b      	subs	r3, r3, r1
 8009f5c:	4543      	cmp	r3, r8
 8009f5e:	dcf0      	bgt.n	8009f42 <_printf_float+0x412>
 8009f60:	e6f7      	b.n	8009d52 <_printf_float+0x222>
 8009f62:	f04f 0800 	mov.w	r8, #0
 8009f66:	f104 0919 	add.w	r9, r4, #25
 8009f6a:	e7f4      	b.n	8009f56 <_printf_float+0x426>

08009f6c <_printf_common>:
 8009f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f70:	4616      	mov	r6, r2
 8009f72:	4699      	mov	r9, r3
 8009f74:	688a      	ldr	r2, [r1, #8]
 8009f76:	690b      	ldr	r3, [r1, #16]
 8009f78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	bfb8      	it	lt
 8009f80:	4613      	movlt	r3, r2
 8009f82:	6033      	str	r3, [r6, #0]
 8009f84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f88:	4607      	mov	r7, r0
 8009f8a:	460c      	mov	r4, r1
 8009f8c:	b10a      	cbz	r2, 8009f92 <_printf_common+0x26>
 8009f8e:	3301      	adds	r3, #1
 8009f90:	6033      	str	r3, [r6, #0]
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	0699      	lsls	r1, r3, #26
 8009f96:	bf42      	ittt	mi
 8009f98:	6833      	ldrmi	r3, [r6, #0]
 8009f9a:	3302      	addmi	r3, #2
 8009f9c:	6033      	strmi	r3, [r6, #0]
 8009f9e:	6825      	ldr	r5, [r4, #0]
 8009fa0:	f015 0506 	ands.w	r5, r5, #6
 8009fa4:	d106      	bne.n	8009fb4 <_printf_common+0x48>
 8009fa6:	f104 0a19 	add.w	sl, r4, #25
 8009faa:	68e3      	ldr	r3, [r4, #12]
 8009fac:	6832      	ldr	r2, [r6, #0]
 8009fae:	1a9b      	subs	r3, r3, r2
 8009fb0:	42ab      	cmp	r3, r5
 8009fb2:	dc26      	bgt.n	800a002 <_printf_common+0x96>
 8009fb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009fb8:	1e13      	subs	r3, r2, #0
 8009fba:	6822      	ldr	r2, [r4, #0]
 8009fbc:	bf18      	it	ne
 8009fbe:	2301      	movne	r3, #1
 8009fc0:	0692      	lsls	r2, r2, #26
 8009fc2:	d42b      	bmi.n	800a01c <_printf_common+0xb0>
 8009fc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009fc8:	4649      	mov	r1, r9
 8009fca:	4638      	mov	r0, r7
 8009fcc:	47c0      	blx	r8
 8009fce:	3001      	adds	r0, #1
 8009fd0:	d01e      	beq.n	800a010 <_printf_common+0xa4>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	68e5      	ldr	r5, [r4, #12]
 8009fd6:	6832      	ldr	r2, [r6, #0]
 8009fd8:	f003 0306 	and.w	r3, r3, #6
 8009fdc:	2b04      	cmp	r3, #4
 8009fde:	bf08      	it	eq
 8009fe0:	1aad      	subeq	r5, r5, r2
 8009fe2:	68a3      	ldr	r3, [r4, #8]
 8009fe4:	6922      	ldr	r2, [r4, #16]
 8009fe6:	bf0c      	ite	eq
 8009fe8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fec:	2500      	movne	r5, #0
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	bfc4      	itt	gt
 8009ff2:	1a9b      	subgt	r3, r3, r2
 8009ff4:	18ed      	addgt	r5, r5, r3
 8009ff6:	2600      	movs	r6, #0
 8009ff8:	341a      	adds	r4, #26
 8009ffa:	42b5      	cmp	r5, r6
 8009ffc:	d11a      	bne.n	800a034 <_printf_common+0xc8>
 8009ffe:	2000      	movs	r0, #0
 800a000:	e008      	b.n	800a014 <_printf_common+0xa8>
 800a002:	2301      	movs	r3, #1
 800a004:	4652      	mov	r2, sl
 800a006:	4649      	mov	r1, r9
 800a008:	4638      	mov	r0, r7
 800a00a:	47c0      	blx	r8
 800a00c:	3001      	adds	r0, #1
 800a00e:	d103      	bne.n	800a018 <_printf_common+0xac>
 800a010:	f04f 30ff 	mov.w	r0, #4294967295
 800a014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a018:	3501      	adds	r5, #1
 800a01a:	e7c6      	b.n	8009faa <_printf_common+0x3e>
 800a01c:	18e1      	adds	r1, r4, r3
 800a01e:	1c5a      	adds	r2, r3, #1
 800a020:	2030      	movs	r0, #48	; 0x30
 800a022:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a026:	4422      	add	r2, r4
 800a028:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a02c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a030:	3302      	adds	r3, #2
 800a032:	e7c7      	b.n	8009fc4 <_printf_common+0x58>
 800a034:	2301      	movs	r3, #1
 800a036:	4622      	mov	r2, r4
 800a038:	4649      	mov	r1, r9
 800a03a:	4638      	mov	r0, r7
 800a03c:	47c0      	blx	r8
 800a03e:	3001      	adds	r0, #1
 800a040:	d0e6      	beq.n	800a010 <_printf_common+0xa4>
 800a042:	3601      	adds	r6, #1
 800a044:	e7d9      	b.n	8009ffa <_printf_common+0x8e>
	...

0800a048 <_printf_i>:
 800a048:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a04c:	7e0f      	ldrb	r7, [r1, #24]
 800a04e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a050:	2f78      	cmp	r7, #120	; 0x78
 800a052:	4691      	mov	r9, r2
 800a054:	4680      	mov	r8, r0
 800a056:	460c      	mov	r4, r1
 800a058:	469a      	mov	sl, r3
 800a05a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a05e:	d807      	bhi.n	800a070 <_printf_i+0x28>
 800a060:	2f62      	cmp	r7, #98	; 0x62
 800a062:	d80a      	bhi.n	800a07a <_printf_i+0x32>
 800a064:	2f00      	cmp	r7, #0
 800a066:	f000 80d8 	beq.w	800a21a <_printf_i+0x1d2>
 800a06a:	2f58      	cmp	r7, #88	; 0x58
 800a06c:	f000 80a3 	beq.w	800a1b6 <_printf_i+0x16e>
 800a070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a074:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a078:	e03a      	b.n	800a0f0 <_printf_i+0xa8>
 800a07a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a07e:	2b15      	cmp	r3, #21
 800a080:	d8f6      	bhi.n	800a070 <_printf_i+0x28>
 800a082:	a101      	add	r1, pc, #4	; (adr r1, 800a088 <_printf_i+0x40>)
 800a084:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a088:	0800a0e1 	.word	0x0800a0e1
 800a08c:	0800a0f5 	.word	0x0800a0f5
 800a090:	0800a071 	.word	0x0800a071
 800a094:	0800a071 	.word	0x0800a071
 800a098:	0800a071 	.word	0x0800a071
 800a09c:	0800a071 	.word	0x0800a071
 800a0a0:	0800a0f5 	.word	0x0800a0f5
 800a0a4:	0800a071 	.word	0x0800a071
 800a0a8:	0800a071 	.word	0x0800a071
 800a0ac:	0800a071 	.word	0x0800a071
 800a0b0:	0800a071 	.word	0x0800a071
 800a0b4:	0800a201 	.word	0x0800a201
 800a0b8:	0800a125 	.word	0x0800a125
 800a0bc:	0800a1e3 	.word	0x0800a1e3
 800a0c0:	0800a071 	.word	0x0800a071
 800a0c4:	0800a071 	.word	0x0800a071
 800a0c8:	0800a223 	.word	0x0800a223
 800a0cc:	0800a071 	.word	0x0800a071
 800a0d0:	0800a125 	.word	0x0800a125
 800a0d4:	0800a071 	.word	0x0800a071
 800a0d8:	0800a071 	.word	0x0800a071
 800a0dc:	0800a1eb 	.word	0x0800a1eb
 800a0e0:	682b      	ldr	r3, [r5, #0]
 800a0e2:	1d1a      	adds	r2, r3, #4
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	602a      	str	r2, [r5, #0]
 800a0e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	e0a3      	b.n	800a23c <_printf_i+0x1f4>
 800a0f4:	6820      	ldr	r0, [r4, #0]
 800a0f6:	6829      	ldr	r1, [r5, #0]
 800a0f8:	0606      	lsls	r6, r0, #24
 800a0fa:	f101 0304 	add.w	r3, r1, #4
 800a0fe:	d50a      	bpl.n	800a116 <_printf_i+0xce>
 800a100:	680e      	ldr	r6, [r1, #0]
 800a102:	602b      	str	r3, [r5, #0]
 800a104:	2e00      	cmp	r6, #0
 800a106:	da03      	bge.n	800a110 <_printf_i+0xc8>
 800a108:	232d      	movs	r3, #45	; 0x2d
 800a10a:	4276      	negs	r6, r6
 800a10c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a110:	485e      	ldr	r0, [pc, #376]	; (800a28c <_printf_i+0x244>)
 800a112:	230a      	movs	r3, #10
 800a114:	e019      	b.n	800a14a <_printf_i+0x102>
 800a116:	680e      	ldr	r6, [r1, #0]
 800a118:	602b      	str	r3, [r5, #0]
 800a11a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a11e:	bf18      	it	ne
 800a120:	b236      	sxthne	r6, r6
 800a122:	e7ef      	b.n	800a104 <_printf_i+0xbc>
 800a124:	682b      	ldr	r3, [r5, #0]
 800a126:	6820      	ldr	r0, [r4, #0]
 800a128:	1d19      	adds	r1, r3, #4
 800a12a:	6029      	str	r1, [r5, #0]
 800a12c:	0601      	lsls	r1, r0, #24
 800a12e:	d501      	bpl.n	800a134 <_printf_i+0xec>
 800a130:	681e      	ldr	r6, [r3, #0]
 800a132:	e002      	b.n	800a13a <_printf_i+0xf2>
 800a134:	0646      	lsls	r6, r0, #25
 800a136:	d5fb      	bpl.n	800a130 <_printf_i+0xe8>
 800a138:	881e      	ldrh	r6, [r3, #0]
 800a13a:	4854      	ldr	r0, [pc, #336]	; (800a28c <_printf_i+0x244>)
 800a13c:	2f6f      	cmp	r7, #111	; 0x6f
 800a13e:	bf0c      	ite	eq
 800a140:	2308      	moveq	r3, #8
 800a142:	230a      	movne	r3, #10
 800a144:	2100      	movs	r1, #0
 800a146:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a14a:	6865      	ldr	r5, [r4, #4]
 800a14c:	60a5      	str	r5, [r4, #8]
 800a14e:	2d00      	cmp	r5, #0
 800a150:	bfa2      	ittt	ge
 800a152:	6821      	ldrge	r1, [r4, #0]
 800a154:	f021 0104 	bicge.w	r1, r1, #4
 800a158:	6021      	strge	r1, [r4, #0]
 800a15a:	b90e      	cbnz	r6, 800a160 <_printf_i+0x118>
 800a15c:	2d00      	cmp	r5, #0
 800a15e:	d04d      	beq.n	800a1fc <_printf_i+0x1b4>
 800a160:	4615      	mov	r5, r2
 800a162:	fbb6 f1f3 	udiv	r1, r6, r3
 800a166:	fb03 6711 	mls	r7, r3, r1, r6
 800a16a:	5dc7      	ldrb	r7, [r0, r7]
 800a16c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a170:	4637      	mov	r7, r6
 800a172:	42bb      	cmp	r3, r7
 800a174:	460e      	mov	r6, r1
 800a176:	d9f4      	bls.n	800a162 <_printf_i+0x11a>
 800a178:	2b08      	cmp	r3, #8
 800a17a:	d10b      	bne.n	800a194 <_printf_i+0x14c>
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	07de      	lsls	r6, r3, #31
 800a180:	d508      	bpl.n	800a194 <_printf_i+0x14c>
 800a182:	6923      	ldr	r3, [r4, #16]
 800a184:	6861      	ldr	r1, [r4, #4]
 800a186:	4299      	cmp	r1, r3
 800a188:	bfde      	ittt	le
 800a18a:	2330      	movle	r3, #48	; 0x30
 800a18c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a190:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a194:	1b52      	subs	r2, r2, r5
 800a196:	6122      	str	r2, [r4, #16]
 800a198:	f8cd a000 	str.w	sl, [sp]
 800a19c:	464b      	mov	r3, r9
 800a19e:	aa03      	add	r2, sp, #12
 800a1a0:	4621      	mov	r1, r4
 800a1a2:	4640      	mov	r0, r8
 800a1a4:	f7ff fee2 	bl	8009f6c <_printf_common>
 800a1a8:	3001      	adds	r0, #1
 800a1aa:	d14c      	bne.n	800a246 <_printf_i+0x1fe>
 800a1ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a1b0:	b004      	add	sp, #16
 800a1b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1b6:	4835      	ldr	r0, [pc, #212]	; (800a28c <_printf_i+0x244>)
 800a1b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a1bc:	6829      	ldr	r1, [r5, #0]
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a1c4:	6029      	str	r1, [r5, #0]
 800a1c6:	061d      	lsls	r5, r3, #24
 800a1c8:	d514      	bpl.n	800a1f4 <_printf_i+0x1ac>
 800a1ca:	07df      	lsls	r7, r3, #31
 800a1cc:	bf44      	itt	mi
 800a1ce:	f043 0320 	orrmi.w	r3, r3, #32
 800a1d2:	6023      	strmi	r3, [r4, #0]
 800a1d4:	b91e      	cbnz	r6, 800a1de <_printf_i+0x196>
 800a1d6:	6823      	ldr	r3, [r4, #0]
 800a1d8:	f023 0320 	bic.w	r3, r3, #32
 800a1dc:	6023      	str	r3, [r4, #0]
 800a1de:	2310      	movs	r3, #16
 800a1e0:	e7b0      	b.n	800a144 <_printf_i+0xfc>
 800a1e2:	6823      	ldr	r3, [r4, #0]
 800a1e4:	f043 0320 	orr.w	r3, r3, #32
 800a1e8:	6023      	str	r3, [r4, #0]
 800a1ea:	2378      	movs	r3, #120	; 0x78
 800a1ec:	4828      	ldr	r0, [pc, #160]	; (800a290 <_printf_i+0x248>)
 800a1ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a1f2:	e7e3      	b.n	800a1bc <_printf_i+0x174>
 800a1f4:	0659      	lsls	r1, r3, #25
 800a1f6:	bf48      	it	mi
 800a1f8:	b2b6      	uxthmi	r6, r6
 800a1fa:	e7e6      	b.n	800a1ca <_printf_i+0x182>
 800a1fc:	4615      	mov	r5, r2
 800a1fe:	e7bb      	b.n	800a178 <_printf_i+0x130>
 800a200:	682b      	ldr	r3, [r5, #0]
 800a202:	6826      	ldr	r6, [r4, #0]
 800a204:	6961      	ldr	r1, [r4, #20]
 800a206:	1d18      	adds	r0, r3, #4
 800a208:	6028      	str	r0, [r5, #0]
 800a20a:	0635      	lsls	r5, r6, #24
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	d501      	bpl.n	800a214 <_printf_i+0x1cc>
 800a210:	6019      	str	r1, [r3, #0]
 800a212:	e002      	b.n	800a21a <_printf_i+0x1d2>
 800a214:	0670      	lsls	r0, r6, #25
 800a216:	d5fb      	bpl.n	800a210 <_printf_i+0x1c8>
 800a218:	8019      	strh	r1, [r3, #0]
 800a21a:	2300      	movs	r3, #0
 800a21c:	6123      	str	r3, [r4, #16]
 800a21e:	4615      	mov	r5, r2
 800a220:	e7ba      	b.n	800a198 <_printf_i+0x150>
 800a222:	682b      	ldr	r3, [r5, #0]
 800a224:	1d1a      	adds	r2, r3, #4
 800a226:	602a      	str	r2, [r5, #0]
 800a228:	681d      	ldr	r5, [r3, #0]
 800a22a:	6862      	ldr	r2, [r4, #4]
 800a22c:	2100      	movs	r1, #0
 800a22e:	4628      	mov	r0, r5
 800a230:	f7f6 f85e 	bl	80002f0 <memchr>
 800a234:	b108      	cbz	r0, 800a23a <_printf_i+0x1f2>
 800a236:	1b40      	subs	r0, r0, r5
 800a238:	6060      	str	r0, [r4, #4]
 800a23a:	6863      	ldr	r3, [r4, #4]
 800a23c:	6123      	str	r3, [r4, #16]
 800a23e:	2300      	movs	r3, #0
 800a240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a244:	e7a8      	b.n	800a198 <_printf_i+0x150>
 800a246:	6923      	ldr	r3, [r4, #16]
 800a248:	462a      	mov	r2, r5
 800a24a:	4649      	mov	r1, r9
 800a24c:	4640      	mov	r0, r8
 800a24e:	47d0      	blx	sl
 800a250:	3001      	adds	r0, #1
 800a252:	d0ab      	beq.n	800a1ac <_printf_i+0x164>
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	079b      	lsls	r3, r3, #30
 800a258:	d413      	bmi.n	800a282 <_printf_i+0x23a>
 800a25a:	68e0      	ldr	r0, [r4, #12]
 800a25c:	9b03      	ldr	r3, [sp, #12]
 800a25e:	4298      	cmp	r0, r3
 800a260:	bfb8      	it	lt
 800a262:	4618      	movlt	r0, r3
 800a264:	e7a4      	b.n	800a1b0 <_printf_i+0x168>
 800a266:	2301      	movs	r3, #1
 800a268:	4632      	mov	r2, r6
 800a26a:	4649      	mov	r1, r9
 800a26c:	4640      	mov	r0, r8
 800a26e:	47d0      	blx	sl
 800a270:	3001      	adds	r0, #1
 800a272:	d09b      	beq.n	800a1ac <_printf_i+0x164>
 800a274:	3501      	adds	r5, #1
 800a276:	68e3      	ldr	r3, [r4, #12]
 800a278:	9903      	ldr	r1, [sp, #12]
 800a27a:	1a5b      	subs	r3, r3, r1
 800a27c:	42ab      	cmp	r3, r5
 800a27e:	dcf2      	bgt.n	800a266 <_printf_i+0x21e>
 800a280:	e7eb      	b.n	800a25a <_printf_i+0x212>
 800a282:	2500      	movs	r5, #0
 800a284:	f104 0619 	add.w	r6, r4, #25
 800a288:	e7f5      	b.n	800a276 <_printf_i+0x22e>
 800a28a:	bf00      	nop
 800a28c:	0800c426 	.word	0x0800c426
 800a290:	0800c437 	.word	0x0800c437

0800a294 <iprintf>:
 800a294:	b40f      	push	{r0, r1, r2, r3}
 800a296:	4b0a      	ldr	r3, [pc, #40]	; (800a2c0 <iprintf+0x2c>)
 800a298:	b513      	push	{r0, r1, r4, lr}
 800a29a:	681c      	ldr	r4, [r3, #0]
 800a29c:	b124      	cbz	r4, 800a2a8 <iprintf+0x14>
 800a29e:	69a3      	ldr	r3, [r4, #24]
 800a2a0:	b913      	cbnz	r3, 800a2a8 <iprintf+0x14>
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	f000 fe62 	bl	800af6c <__sinit>
 800a2a8:	ab05      	add	r3, sp, #20
 800a2aa:	9a04      	ldr	r2, [sp, #16]
 800a2ac:	68a1      	ldr	r1, [r4, #8]
 800a2ae:	9301      	str	r3, [sp, #4]
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f001 fbad 	bl	800ba10 <_vfiprintf_r>
 800a2b6:	b002      	add	sp, #8
 800a2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2bc:	b004      	add	sp, #16
 800a2be:	4770      	bx	lr
 800a2c0:	24000018 	.word	0x24000018

0800a2c4 <quorem>:
 800a2c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c8:	6903      	ldr	r3, [r0, #16]
 800a2ca:	690c      	ldr	r4, [r1, #16]
 800a2cc:	42a3      	cmp	r3, r4
 800a2ce:	4607      	mov	r7, r0
 800a2d0:	f2c0 8081 	blt.w	800a3d6 <quorem+0x112>
 800a2d4:	3c01      	subs	r4, #1
 800a2d6:	f101 0814 	add.w	r8, r1, #20
 800a2da:	f100 0514 	add.w	r5, r0, #20
 800a2de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a2e2:	9301      	str	r3, [sp, #4]
 800a2e4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a2e8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	429a      	cmp	r2, r3
 800a2f0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a2f4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a2f8:	fbb2 f6f3 	udiv	r6, r2, r3
 800a2fc:	d331      	bcc.n	800a362 <quorem+0x9e>
 800a2fe:	f04f 0e00 	mov.w	lr, #0
 800a302:	4640      	mov	r0, r8
 800a304:	46ac      	mov	ip, r5
 800a306:	46f2      	mov	sl, lr
 800a308:	f850 2b04 	ldr.w	r2, [r0], #4
 800a30c:	b293      	uxth	r3, r2
 800a30e:	fb06 e303 	mla	r3, r6, r3, lr
 800a312:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a316:	b29b      	uxth	r3, r3
 800a318:	ebaa 0303 	sub.w	r3, sl, r3
 800a31c:	f8dc a000 	ldr.w	sl, [ip]
 800a320:	0c12      	lsrs	r2, r2, #16
 800a322:	fa13 f38a 	uxtah	r3, r3, sl
 800a326:	fb06 e202 	mla	r2, r6, r2, lr
 800a32a:	9300      	str	r3, [sp, #0]
 800a32c:	9b00      	ldr	r3, [sp, #0]
 800a32e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a332:	b292      	uxth	r2, r2
 800a334:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a338:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a33c:	f8bd 3000 	ldrh.w	r3, [sp]
 800a340:	4581      	cmp	r9, r0
 800a342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a346:	f84c 3b04 	str.w	r3, [ip], #4
 800a34a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a34e:	d2db      	bcs.n	800a308 <quorem+0x44>
 800a350:	f855 300b 	ldr.w	r3, [r5, fp]
 800a354:	b92b      	cbnz	r3, 800a362 <quorem+0x9e>
 800a356:	9b01      	ldr	r3, [sp, #4]
 800a358:	3b04      	subs	r3, #4
 800a35a:	429d      	cmp	r5, r3
 800a35c:	461a      	mov	r2, r3
 800a35e:	d32e      	bcc.n	800a3be <quorem+0xfa>
 800a360:	613c      	str	r4, [r7, #16]
 800a362:	4638      	mov	r0, r7
 800a364:	f001 f932 	bl	800b5cc <__mcmp>
 800a368:	2800      	cmp	r0, #0
 800a36a:	db24      	blt.n	800a3b6 <quorem+0xf2>
 800a36c:	3601      	adds	r6, #1
 800a36e:	4628      	mov	r0, r5
 800a370:	f04f 0c00 	mov.w	ip, #0
 800a374:	f858 2b04 	ldr.w	r2, [r8], #4
 800a378:	f8d0 e000 	ldr.w	lr, [r0]
 800a37c:	b293      	uxth	r3, r2
 800a37e:	ebac 0303 	sub.w	r3, ip, r3
 800a382:	0c12      	lsrs	r2, r2, #16
 800a384:	fa13 f38e 	uxtah	r3, r3, lr
 800a388:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a38c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a390:	b29b      	uxth	r3, r3
 800a392:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a396:	45c1      	cmp	r9, r8
 800a398:	f840 3b04 	str.w	r3, [r0], #4
 800a39c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a3a0:	d2e8      	bcs.n	800a374 <quorem+0xb0>
 800a3a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a3a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a3aa:	b922      	cbnz	r2, 800a3b6 <quorem+0xf2>
 800a3ac:	3b04      	subs	r3, #4
 800a3ae:	429d      	cmp	r5, r3
 800a3b0:	461a      	mov	r2, r3
 800a3b2:	d30a      	bcc.n	800a3ca <quorem+0x106>
 800a3b4:	613c      	str	r4, [r7, #16]
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	b003      	add	sp, #12
 800a3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3be:	6812      	ldr	r2, [r2, #0]
 800a3c0:	3b04      	subs	r3, #4
 800a3c2:	2a00      	cmp	r2, #0
 800a3c4:	d1cc      	bne.n	800a360 <quorem+0x9c>
 800a3c6:	3c01      	subs	r4, #1
 800a3c8:	e7c7      	b.n	800a35a <quorem+0x96>
 800a3ca:	6812      	ldr	r2, [r2, #0]
 800a3cc:	3b04      	subs	r3, #4
 800a3ce:	2a00      	cmp	r2, #0
 800a3d0:	d1f0      	bne.n	800a3b4 <quorem+0xf0>
 800a3d2:	3c01      	subs	r4, #1
 800a3d4:	e7eb      	b.n	800a3ae <quorem+0xea>
 800a3d6:	2000      	movs	r0, #0
 800a3d8:	e7ee      	b.n	800a3b8 <quorem+0xf4>
 800a3da:	0000      	movs	r0, r0
 800a3dc:	0000      	movs	r0, r0
	...

0800a3e0 <_dtoa_r>:
 800a3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e4:	ed2d 8b02 	vpush	{d8}
 800a3e8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a3ea:	b091      	sub	sp, #68	; 0x44
 800a3ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a3f0:	ec59 8b10 	vmov	r8, r9, d0
 800a3f4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a3f6:	9106      	str	r1, [sp, #24]
 800a3f8:	4606      	mov	r6, r0
 800a3fa:	9208      	str	r2, [sp, #32]
 800a3fc:	930c      	str	r3, [sp, #48]	; 0x30
 800a3fe:	b975      	cbnz	r5, 800a41e <_dtoa_r+0x3e>
 800a400:	2010      	movs	r0, #16
 800a402:	f000 fe59 	bl	800b0b8 <malloc>
 800a406:	4602      	mov	r2, r0
 800a408:	6270      	str	r0, [r6, #36]	; 0x24
 800a40a:	b920      	cbnz	r0, 800a416 <_dtoa_r+0x36>
 800a40c:	4baa      	ldr	r3, [pc, #680]	; (800a6b8 <_dtoa_r+0x2d8>)
 800a40e:	21ea      	movs	r1, #234	; 0xea
 800a410:	48aa      	ldr	r0, [pc, #680]	; (800a6bc <_dtoa_r+0x2dc>)
 800a412:	f001 fd53 	bl	800bebc <__assert_func>
 800a416:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a41a:	6005      	str	r5, [r0, #0]
 800a41c:	60c5      	str	r5, [r0, #12]
 800a41e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a420:	6819      	ldr	r1, [r3, #0]
 800a422:	b151      	cbz	r1, 800a43a <_dtoa_r+0x5a>
 800a424:	685a      	ldr	r2, [r3, #4]
 800a426:	604a      	str	r2, [r1, #4]
 800a428:	2301      	movs	r3, #1
 800a42a:	4093      	lsls	r3, r2
 800a42c:	608b      	str	r3, [r1, #8]
 800a42e:	4630      	mov	r0, r6
 800a430:	f000 fe8a 	bl	800b148 <_Bfree>
 800a434:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a436:	2200      	movs	r2, #0
 800a438:	601a      	str	r2, [r3, #0]
 800a43a:	f1b9 0300 	subs.w	r3, r9, #0
 800a43e:	bfbb      	ittet	lt
 800a440:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a444:	9303      	strlt	r3, [sp, #12]
 800a446:	2300      	movge	r3, #0
 800a448:	2201      	movlt	r2, #1
 800a44a:	bfac      	ite	ge
 800a44c:	6023      	strge	r3, [r4, #0]
 800a44e:	6022      	strlt	r2, [r4, #0]
 800a450:	4b9b      	ldr	r3, [pc, #620]	; (800a6c0 <_dtoa_r+0x2e0>)
 800a452:	9c03      	ldr	r4, [sp, #12]
 800a454:	43a3      	bics	r3, r4
 800a456:	d11c      	bne.n	800a492 <_dtoa_r+0xb2>
 800a458:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a45a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a45e:	6013      	str	r3, [r2, #0]
 800a460:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a464:	ea53 0308 	orrs.w	r3, r3, r8
 800a468:	f000 84fd 	beq.w	800ae66 <_dtoa_r+0xa86>
 800a46c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a46e:	b963      	cbnz	r3, 800a48a <_dtoa_r+0xaa>
 800a470:	4b94      	ldr	r3, [pc, #592]	; (800a6c4 <_dtoa_r+0x2e4>)
 800a472:	e01f      	b.n	800a4b4 <_dtoa_r+0xd4>
 800a474:	4b94      	ldr	r3, [pc, #592]	; (800a6c8 <_dtoa_r+0x2e8>)
 800a476:	9301      	str	r3, [sp, #4]
 800a478:	3308      	adds	r3, #8
 800a47a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a47c:	6013      	str	r3, [r2, #0]
 800a47e:	9801      	ldr	r0, [sp, #4]
 800a480:	b011      	add	sp, #68	; 0x44
 800a482:	ecbd 8b02 	vpop	{d8}
 800a486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48a:	4b8e      	ldr	r3, [pc, #568]	; (800a6c4 <_dtoa_r+0x2e4>)
 800a48c:	9301      	str	r3, [sp, #4]
 800a48e:	3303      	adds	r3, #3
 800a490:	e7f3      	b.n	800a47a <_dtoa_r+0x9a>
 800a492:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a496:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a49e:	d10b      	bne.n	800a4b8 <_dtoa_r+0xd8>
 800a4a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	6013      	str	r3, [r2, #0]
 800a4a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f000 84d9 	beq.w	800ae60 <_dtoa_r+0xa80>
 800a4ae:	4887      	ldr	r0, [pc, #540]	; (800a6cc <_dtoa_r+0x2ec>)
 800a4b0:	6018      	str	r0, [r3, #0]
 800a4b2:	1e43      	subs	r3, r0, #1
 800a4b4:	9301      	str	r3, [sp, #4]
 800a4b6:	e7e2      	b.n	800a47e <_dtoa_r+0x9e>
 800a4b8:	a90f      	add	r1, sp, #60	; 0x3c
 800a4ba:	aa0e      	add	r2, sp, #56	; 0x38
 800a4bc:	4630      	mov	r0, r6
 800a4be:	eeb0 0b48 	vmov.f64	d0, d8
 800a4c2:	f001 f929 	bl	800b718 <__d2b>
 800a4c6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800a4ca:	4605      	mov	r5, r0
 800a4cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a4ce:	2900      	cmp	r1, #0
 800a4d0:	d046      	beq.n	800a560 <_dtoa_r+0x180>
 800a4d2:	ee18 4a90 	vmov	r4, s17
 800a4d6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a4da:	ec53 2b18 	vmov	r2, r3, d8
 800a4de:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800a4e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a4e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a4ea:	2400      	movs	r4, #0
 800a4ec:	ec43 2b16 	vmov	d6, r2, r3
 800a4f0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800a4f4:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a6a0 <_dtoa_r+0x2c0>
 800a4f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a4fc:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800a6a8 <_dtoa_r+0x2c8>
 800a500:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a504:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800a6b0 <_dtoa_r+0x2d0>
 800a508:	ee07 1a90 	vmov	s15, r1
 800a50c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a510:	eeb0 7b46 	vmov.f64	d7, d6
 800a514:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a518:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a51c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a524:	ee16 ba90 	vmov	fp, s13
 800a528:	940a      	str	r4, [sp, #40]	; 0x28
 800a52a:	d508      	bpl.n	800a53e <_dtoa_r+0x15e>
 800a52c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a530:	eeb4 6b47 	vcmp.f64	d6, d7
 800a534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a538:	bf18      	it	ne
 800a53a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a53e:	f1bb 0f16 	cmp.w	fp, #22
 800a542:	d82f      	bhi.n	800a5a4 <_dtoa_r+0x1c4>
 800a544:	4b62      	ldr	r3, [pc, #392]	; (800a6d0 <_dtoa_r+0x2f0>)
 800a546:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a54a:	ed93 7b00 	vldr	d7, [r3]
 800a54e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a556:	d501      	bpl.n	800a55c <_dtoa_r+0x17c>
 800a558:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a55c:	2300      	movs	r3, #0
 800a55e:	e022      	b.n	800a5a6 <_dtoa_r+0x1c6>
 800a560:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a562:	4401      	add	r1, r0
 800a564:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800a568:	2b20      	cmp	r3, #32
 800a56a:	bfc1      	itttt	gt
 800a56c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a570:	fa04 f303 	lslgt.w	r3, r4, r3
 800a574:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800a578:	fa28 f804 	lsrgt.w	r8, r8, r4
 800a57c:	bfd6      	itet	le
 800a57e:	f1c3 0320 	rsble	r3, r3, #32
 800a582:	ea43 0808 	orrgt.w	r8, r3, r8
 800a586:	fa08 f803 	lslle.w	r8, r8, r3
 800a58a:	ee07 8a90 	vmov	s15, r8
 800a58e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a592:	3901      	subs	r1, #1
 800a594:	ee17 4a90 	vmov	r4, s15
 800a598:	ec53 2b17 	vmov	r2, r3, d7
 800a59c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800a5a0:	2401      	movs	r4, #1
 800a5a2:	e7a3      	b.n	800a4ec <_dtoa_r+0x10c>
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5a8:	1a43      	subs	r3, r0, r1
 800a5aa:	1e5a      	subs	r2, r3, #1
 800a5ac:	bf45      	ittet	mi
 800a5ae:	f1c3 0301 	rsbmi	r3, r3, #1
 800a5b2:	9304      	strmi	r3, [sp, #16]
 800a5b4:	2300      	movpl	r3, #0
 800a5b6:	2300      	movmi	r3, #0
 800a5b8:	9205      	str	r2, [sp, #20]
 800a5ba:	bf54      	ite	pl
 800a5bc:	9304      	strpl	r3, [sp, #16]
 800a5be:	9305      	strmi	r3, [sp, #20]
 800a5c0:	f1bb 0f00 	cmp.w	fp, #0
 800a5c4:	db18      	blt.n	800a5f8 <_dtoa_r+0x218>
 800a5c6:	9b05      	ldr	r3, [sp, #20]
 800a5c8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800a5cc:	445b      	add	r3, fp
 800a5ce:	9305      	str	r3, [sp, #20]
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	9a06      	ldr	r2, [sp, #24]
 800a5d4:	2a09      	cmp	r2, #9
 800a5d6:	d849      	bhi.n	800a66c <_dtoa_r+0x28c>
 800a5d8:	2a05      	cmp	r2, #5
 800a5da:	bfc4      	itt	gt
 800a5dc:	3a04      	subgt	r2, #4
 800a5de:	9206      	strgt	r2, [sp, #24]
 800a5e0:	9a06      	ldr	r2, [sp, #24]
 800a5e2:	f1a2 0202 	sub.w	r2, r2, #2
 800a5e6:	bfcc      	ite	gt
 800a5e8:	2400      	movgt	r4, #0
 800a5ea:	2401      	movle	r4, #1
 800a5ec:	2a03      	cmp	r2, #3
 800a5ee:	d848      	bhi.n	800a682 <_dtoa_r+0x2a2>
 800a5f0:	e8df f002 	tbb	[pc, r2]
 800a5f4:	3a2c2e0b 	.word	0x3a2c2e0b
 800a5f8:	9b04      	ldr	r3, [sp, #16]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	eba3 030b 	sub.w	r3, r3, fp
 800a600:	9304      	str	r3, [sp, #16]
 800a602:	9209      	str	r2, [sp, #36]	; 0x24
 800a604:	f1cb 0300 	rsb	r3, fp, #0
 800a608:	e7e3      	b.n	800a5d2 <_dtoa_r+0x1f2>
 800a60a:	2200      	movs	r2, #0
 800a60c:	9207      	str	r2, [sp, #28]
 800a60e:	9a08      	ldr	r2, [sp, #32]
 800a610:	2a00      	cmp	r2, #0
 800a612:	dc39      	bgt.n	800a688 <_dtoa_r+0x2a8>
 800a614:	f04f 0a01 	mov.w	sl, #1
 800a618:	46d1      	mov	r9, sl
 800a61a:	4652      	mov	r2, sl
 800a61c:	f8cd a020 	str.w	sl, [sp, #32]
 800a620:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800a622:	2100      	movs	r1, #0
 800a624:	6079      	str	r1, [r7, #4]
 800a626:	2004      	movs	r0, #4
 800a628:	f100 0c14 	add.w	ip, r0, #20
 800a62c:	4594      	cmp	ip, r2
 800a62e:	6879      	ldr	r1, [r7, #4]
 800a630:	d92f      	bls.n	800a692 <_dtoa_r+0x2b2>
 800a632:	4630      	mov	r0, r6
 800a634:	930d      	str	r3, [sp, #52]	; 0x34
 800a636:	f000 fd47 	bl	800b0c8 <_Balloc>
 800a63a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a63c:	9001      	str	r0, [sp, #4]
 800a63e:	4602      	mov	r2, r0
 800a640:	2800      	cmp	r0, #0
 800a642:	d149      	bne.n	800a6d8 <_dtoa_r+0x2f8>
 800a644:	4b23      	ldr	r3, [pc, #140]	; (800a6d4 <_dtoa_r+0x2f4>)
 800a646:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a64a:	e6e1      	b.n	800a410 <_dtoa_r+0x30>
 800a64c:	2201      	movs	r2, #1
 800a64e:	e7dd      	b.n	800a60c <_dtoa_r+0x22c>
 800a650:	2200      	movs	r2, #0
 800a652:	9207      	str	r2, [sp, #28]
 800a654:	9a08      	ldr	r2, [sp, #32]
 800a656:	eb0b 0a02 	add.w	sl, fp, r2
 800a65a:	f10a 0901 	add.w	r9, sl, #1
 800a65e:	464a      	mov	r2, r9
 800a660:	2a01      	cmp	r2, #1
 800a662:	bfb8      	it	lt
 800a664:	2201      	movlt	r2, #1
 800a666:	e7db      	b.n	800a620 <_dtoa_r+0x240>
 800a668:	2201      	movs	r2, #1
 800a66a:	e7f2      	b.n	800a652 <_dtoa_r+0x272>
 800a66c:	2401      	movs	r4, #1
 800a66e:	2200      	movs	r2, #0
 800a670:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800a674:	f04f 3aff 	mov.w	sl, #4294967295
 800a678:	2100      	movs	r1, #0
 800a67a:	46d1      	mov	r9, sl
 800a67c:	2212      	movs	r2, #18
 800a67e:	9108      	str	r1, [sp, #32]
 800a680:	e7ce      	b.n	800a620 <_dtoa_r+0x240>
 800a682:	2201      	movs	r2, #1
 800a684:	9207      	str	r2, [sp, #28]
 800a686:	e7f5      	b.n	800a674 <_dtoa_r+0x294>
 800a688:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a68c:	46d1      	mov	r9, sl
 800a68e:	4652      	mov	r2, sl
 800a690:	e7c6      	b.n	800a620 <_dtoa_r+0x240>
 800a692:	3101      	adds	r1, #1
 800a694:	6079      	str	r1, [r7, #4]
 800a696:	0040      	lsls	r0, r0, #1
 800a698:	e7c6      	b.n	800a628 <_dtoa_r+0x248>
 800a69a:	bf00      	nop
 800a69c:	f3af 8000 	nop.w
 800a6a0:	636f4361 	.word	0x636f4361
 800a6a4:	3fd287a7 	.word	0x3fd287a7
 800a6a8:	8b60c8b3 	.word	0x8b60c8b3
 800a6ac:	3fc68a28 	.word	0x3fc68a28
 800a6b0:	509f79fb 	.word	0x509f79fb
 800a6b4:	3fd34413 	.word	0x3fd34413
 800a6b8:	0800c455 	.word	0x0800c455
 800a6bc:	0800c46c 	.word	0x0800c46c
 800a6c0:	7ff00000 	.word	0x7ff00000
 800a6c4:	0800c451 	.word	0x0800c451
 800a6c8:	0800c448 	.word	0x0800c448
 800a6cc:	0800c425 	.word	0x0800c425
 800a6d0:	0800c5c0 	.word	0x0800c5c0
 800a6d4:	0800c4c7 	.word	0x0800c4c7
 800a6d8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800a6da:	9901      	ldr	r1, [sp, #4]
 800a6dc:	6011      	str	r1, [r2, #0]
 800a6de:	f1b9 0f0e 	cmp.w	r9, #14
 800a6e2:	d86c      	bhi.n	800a7be <_dtoa_r+0x3de>
 800a6e4:	2c00      	cmp	r4, #0
 800a6e6:	d06a      	beq.n	800a7be <_dtoa_r+0x3de>
 800a6e8:	f1bb 0f00 	cmp.w	fp, #0
 800a6ec:	f340 80a0 	ble.w	800a830 <_dtoa_r+0x450>
 800a6f0:	49c1      	ldr	r1, [pc, #772]	; (800a9f8 <_dtoa_r+0x618>)
 800a6f2:	f00b 020f 	and.w	r2, fp, #15
 800a6f6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800a6fa:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a6fe:	ed92 7b00 	vldr	d7, [r2]
 800a702:	ea4f 112b 	mov.w	r1, fp, asr #4
 800a706:	f000 8087 	beq.w	800a818 <_dtoa_r+0x438>
 800a70a:	4abc      	ldr	r2, [pc, #752]	; (800a9fc <_dtoa_r+0x61c>)
 800a70c:	ed92 6b08 	vldr	d6, [r2, #32]
 800a710:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a714:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a718:	f001 010f 	and.w	r1, r1, #15
 800a71c:	2203      	movs	r2, #3
 800a71e:	48b7      	ldr	r0, [pc, #732]	; (800a9fc <_dtoa_r+0x61c>)
 800a720:	2900      	cmp	r1, #0
 800a722:	d17b      	bne.n	800a81c <_dtoa_r+0x43c>
 800a724:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a728:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a72c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a730:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a732:	2900      	cmp	r1, #0
 800a734:	f000 80a2 	beq.w	800a87c <_dtoa_r+0x49c>
 800a738:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800a73c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a740:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a748:	f140 8098 	bpl.w	800a87c <_dtoa_r+0x49c>
 800a74c:	f1b9 0f00 	cmp.w	r9, #0
 800a750:	f000 8094 	beq.w	800a87c <_dtoa_r+0x49c>
 800a754:	f1ba 0f00 	cmp.w	sl, #0
 800a758:	dd2f      	ble.n	800a7ba <_dtoa_r+0x3da>
 800a75a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800a75e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a762:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a766:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a76a:	3201      	adds	r2, #1
 800a76c:	4650      	mov	r0, sl
 800a76e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a772:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800a776:	ee07 2a90 	vmov	s15, r2
 800a77a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800a77e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800a782:	ee15 4a90 	vmov	r4, s11
 800a786:	ec52 1b15 	vmov	r1, r2, d5
 800a78a:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800a78e:	2800      	cmp	r0, #0
 800a790:	d177      	bne.n	800a882 <_dtoa_r+0x4a2>
 800a792:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a796:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a79a:	ec42 1b17 	vmov	d7, r1, r2
 800a79e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a6:	f300 8263 	bgt.w	800ac70 <_dtoa_r+0x890>
 800a7aa:	eeb1 7b47 	vneg.f64	d7, d7
 800a7ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7b6:	f100 8258 	bmi.w	800ac6a <_dtoa_r+0x88a>
 800a7ba:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a7be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a7c0:	2a00      	cmp	r2, #0
 800a7c2:	f2c0 811d 	blt.w	800aa00 <_dtoa_r+0x620>
 800a7c6:	f1bb 0f0e 	cmp.w	fp, #14
 800a7ca:	f300 8119 	bgt.w	800aa00 <_dtoa_r+0x620>
 800a7ce:	4b8a      	ldr	r3, [pc, #552]	; (800a9f8 <_dtoa_r+0x618>)
 800a7d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a7d4:	ed93 6b00 	vldr	d6, [r3]
 800a7d8:	9b08      	ldr	r3, [sp, #32]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	f280 80b7 	bge.w	800a94e <_dtoa_r+0x56e>
 800a7e0:	f1b9 0f00 	cmp.w	r9, #0
 800a7e4:	f300 80b3 	bgt.w	800a94e <_dtoa_r+0x56e>
 800a7e8:	f040 823f 	bne.w	800ac6a <_dtoa_r+0x88a>
 800a7ec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800a7f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a7f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a7f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a800:	464c      	mov	r4, r9
 800a802:	464f      	mov	r7, r9
 800a804:	f280 8215 	bge.w	800ac32 <_dtoa_r+0x852>
 800a808:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a80c:	2331      	movs	r3, #49	; 0x31
 800a80e:	f808 3b01 	strb.w	r3, [r8], #1
 800a812:	f10b 0b01 	add.w	fp, fp, #1
 800a816:	e211      	b.n	800ac3c <_dtoa_r+0x85c>
 800a818:	2202      	movs	r2, #2
 800a81a:	e780      	b.n	800a71e <_dtoa_r+0x33e>
 800a81c:	07cc      	lsls	r4, r1, #31
 800a81e:	d504      	bpl.n	800a82a <_dtoa_r+0x44a>
 800a820:	ed90 6b00 	vldr	d6, [r0]
 800a824:	3201      	adds	r2, #1
 800a826:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a82a:	1049      	asrs	r1, r1, #1
 800a82c:	3008      	adds	r0, #8
 800a82e:	e777      	b.n	800a720 <_dtoa_r+0x340>
 800a830:	d022      	beq.n	800a878 <_dtoa_r+0x498>
 800a832:	f1cb 0100 	rsb	r1, fp, #0
 800a836:	4a70      	ldr	r2, [pc, #448]	; (800a9f8 <_dtoa_r+0x618>)
 800a838:	f001 000f 	and.w	r0, r1, #15
 800a83c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a840:	ed92 7b00 	vldr	d7, [r2]
 800a844:	ee28 7b07 	vmul.f64	d7, d8, d7
 800a848:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a84c:	486b      	ldr	r0, [pc, #428]	; (800a9fc <_dtoa_r+0x61c>)
 800a84e:	1109      	asrs	r1, r1, #4
 800a850:	2400      	movs	r4, #0
 800a852:	2202      	movs	r2, #2
 800a854:	b929      	cbnz	r1, 800a862 <_dtoa_r+0x482>
 800a856:	2c00      	cmp	r4, #0
 800a858:	f43f af6a 	beq.w	800a730 <_dtoa_r+0x350>
 800a85c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a860:	e766      	b.n	800a730 <_dtoa_r+0x350>
 800a862:	07cf      	lsls	r7, r1, #31
 800a864:	d505      	bpl.n	800a872 <_dtoa_r+0x492>
 800a866:	ed90 6b00 	vldr	d6, [r0]
 800a86a:	3201      	adds	r2, #1
 800a86c:	2401      	movs	r4, #1
 800a86e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a872:	1049      	asrs	r1, r1, #1
 800a874:	3008      	adds	r0, #8
 800a876:	e7ed      	b.n	800a854 <_dtoa_r+0x474>
 800a878:	2202      	movs	r2, #2
 800a87a:	e759      	b.n	800a730 <_dtoa_r+0x350>
 800a87c:	465f      	mov	r7, fp
 800a87e:	4648      	mov	r0, r9
 800a880:	e775      	b.n	800a76e <_dtoa_r+0x38e>
 800a882:	ec42 1b17 	vmov	d7, r1, r2
 800a886:	4a5c      	ldr	r2, [pc, #368]	; (800a9f8 <_dtoa_r+0x618>)
 800a888:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800a88c:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a890:	9a01      	ldr	r2, [sp, #4]
 800a892:	1814      	adds	r4, r2, r0
 800a894:	9a07      	ldr	r2, [sp, #28]
 800a896:	b352      	cbz	r2, 800a8ee <_dtoa_r+0x50e>
 800a898:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800a89c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800a8a0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a8a4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a8a8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a8ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a8b0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a8b4:	ee14 2a90 	vmov	r2, s9
 800a8b8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a8bc:	3230      	adds	r2, #48	; 0x30
 800a8be:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a8c2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8ca:	f808 2b01 	strb.w	r2, [r8], #1
 800a8ce:	d439      	bmi.n	800a944 <_dtoa_r+0x564>
 800a8d0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a8d4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8dc:	d472      	bmi.n	800a9c4 <_dtoa_r+0x5e4>
 800a8de:	45a0      	cmp	r8, r4
 800a8e0:	f43f af6b 	beq.w	800a7ba <_dtoa_r+0x3da>
 800a8e4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a8e8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a8ec:	e7e0      	b.n	800a8b0 <_dtoa_r+0x4d0>
 800a8ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a8f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800a8fc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a900:	ee14 2a90 	vmov	r2, s9
 800a904:	3230      	adds	r2, #48	; 0x30
 800a906:	f808 2b01 	strb.w	r2, [r8], #1
 800a90a:	45a0      	cmp	r8, r4
 800a90c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a910:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a914:	d118      	bne.n	800a948 <_dtoa_r+0x568>
 800a916:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a91a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a91e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a926:	dc4d      	bgt.n	800a9c4 <_dtoa_r+0x5e4>
 800a928:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a92c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a934:	f57f af41 	bpl.w	800a7ba <_dtoa_r+0x3da>
 800a938:	4688      	mov	r8, r1
 800a93a:	3901      	subs	r1, #1
 800a93c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800a940:	2b30      	cmp	r3, #48	; 0x30
 800a942:	d0f9      	beq.n	800a938 <_dtoa_r+0x558>
 800a944:	46bb      	mov	fp, r7
 800a946:	e02a      	b.n	800a99e <_dtoa_r+0x5be>
 800a948:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a94c:	e7d6      	b.n	800a8fc <_dtoa_r+0x51c>
 800a94e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a952:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800a956:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a95a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800a95e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800a962:	ee15 3a10 	vmov	r3, s10
 800a966:	3330      	adds	r3, #48	; 0x30
 800a968:	f808 3b01 	strb.w	r3, [r8], #1
 800a96c:	9b01      	ldr	r3, [sp, #4]
 800a96e:	eba8 0303 	sub.w	r3, r8, r3
 800a972:	4599      	cmp	r9, r3
 800a974:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800a978:	eea3 7b46 	vfms.f64	d7, d3, d6
 800a97c:	d133      	bne.n	800a9e6 <_dtoa_r+0x606>
 800a97e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a982:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a986:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a98a:	dc1a      	bgt.n	800a9c2 <_dtoa_r+0x5e2>
 800a98c:	eeb4 7b46 	vcmp.f64	d7, d6
 800a990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a994:	d103      	bne.n	800a99e <_dtoa_r+0x5be>
 800a996:	ee15 3a10 	vmov	r3, s10
 800a99a:	07d9      	lsls	r1, r3, #31
 800a99c:	d411      	bmi.n	800a9c2 <_dtoa_r+0x5e2>
 800a99e:	4629      	mov	r1, r5
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f000 fbd1 	bl	800b148 <_Bfree>
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9aa:	f888 3000 	strb.w	r3, [r8]
 800a9ae:	f10b 0301 	add.w	r3, fp, #1
 800a9b2:	6013      	str	r3, [r2, #0]
 800a9b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	f43f ad61 	beq.w	800a47e <_dtoa_r+0x9e>
 800a9bc:	f8c3 8000 	str.w	r8, [r3]
 800a9c0:	e55d      	b.n	800a47e <_dtoa_r+0x9e>
 800a9c2:	465f      	mov	r7, fp
 800a9c4:	4643      	mov	r3, r8
 800a9c6:	4698      	mov	r8, r3
 800a9c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a9cc:	2a39      	cmp	r2, #57	; 0x39
 800a9ce:	d106      	bne.n	800a9de <_dtoa_r+0x5fe>
 800a9d0:	9a01      	ldr	r2, [sp, #4]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d1f7      	bne.n	800a9c6 <_dtoa_r+0x5e6>
 800a9d6:	9901      	ldr	r1, [sp, #4]
 800a9d8:	2230      	movs	r2, #48	; 0x30
 800a9da:	3701      	adds	r7, #1
 800a9dc:	700a      	strb	r2, [r1, #0]
 800a9de:	781a      	ldrb	r2, [r3, #0]
 800a9e0:	3201      	adds	r2, #1
 800a9e2:	701a      	strb	r2, [r3, #0]
 800a9e4:	e7ae      	b.n	800a944 <_dtoa_r+0x564>
 800a9e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a9ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a9ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9f2:	d1b2      	bne.n	800a95a <_dtoa_r+0x57a>
 800a9f4:	e7d3      	b.n	800a99e <_dtoa_r+0x5be>
 800a9f6:	bf00      	nop
 800a9f8:	0800c5c0 	.word	0x0800c5c0
 800a9fc:	0800c598 	.word	0x0800c598
 800aa00:	9907      	ldr	r1, [sp, #28]
 800aa02:	2900      	cmp	r1, #0
 800aa04:	f000 80d0 	beq.w	800aba8 <_dtoa_r+0x7c8>
 800aa08:	9906      	ldr	r1, [sp, #24]
 800aa0a:	2901      	cmp	r1, #1
 800aa0c:	f300 80b4 	bgt.w	800ab78 <_dtoa_r+0x798>
 800aa10:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa12:	2900      	cmp	r1, #0
 800aa14:	f000 80ac 	beq.w	800ab70 <_dtoa_r+0x790>
 800aa18:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aa1c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aa20:	461c      	mov	r4, r3
 800aa22:	930a      	str	r3, [sp, #40]	; 0x28
 800aa24:	9b04      	ldr	r3, [sp, #16]
 800aa26:	4413      	add	r3, r2
 800aa28:	9304      	str	r3, [sp, #16]
 800aa2a:	9b05      	ldr	r3, [sp, #20]
 800aa2c:	2101      	movs	r1, #1
 800aa2e:	4413      	add	r3, r2
 800aa30:	4630      	mov	r0, r6
 800aa32:	9305      	str	r3, [sp, #20]
 800aa34:	f000 fc40 	bl	800b2b8 <__i2b>
 800aa38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa3a:	4607      	mov	r7, r0
 800aa3c:	f1b8 0f00 	cmp.w	r8, #0
 800aa40:	dd0d      	ble.n	800aa5e <_dtoa_r+0x67e>
 800aa42:	9a05      	ldr	r2, [sp, #20]
 800aa44:	2a00      	cmp	r2, #0
 800aa46:	dd0a      	ble.n	800aa5e <_dtoa_r+0x67e>
 800aa48:	4542      	cmp	r2, r8
 800aa4a:	9904      	ldr	r1, [sp, #16]
 800aa4c:	bfa8      	it	ge
 800aa4e:	4642      	movge	r2, r8
 800aa50:	1a89      	subs	r1, r1, r2
 800aa52:	9104      	str	r1, [sp, #16]
 800aa54:	9905      	ldr	r1, [sp, #20]
 800aa56:	eba8 0802 	sub.w	r8, r8, r2
 800aa5a:	1a8a      	subs	r2, r1, r2
 800aa5c:	9205      	str	r2, [sp, #20]
 800aa5e:	b303      	cbz	r3, 800aaa2 <_dtoa_r+0x6c2>
 800aa60:	9a07      	ldr	r2, [sp, #28]
 800aa62:	2a00      	cmp	r2, #0
 800aa64:	f000 80a5 	beq.w	800abb2 <_dtoa_r+0x7d2>
 800aa68:	2c00      	cmp	r4, #0
 800aa6a:	dd13      	ble.n	800aa94 <_dtoa_r+0x6b4>
 800aa6c:	4639      	mov	r1, r7
 800aa6e:	4622      	mov	r2, r4
 800aa70:	4630      	mov	r0, r6
 800aa72:	930d      	str	r3, [sp, #52]	; 0x34
 800aa74:	f000 fce0 	bl	800b438 <__pow5mult>
 800aa78:	462a      	mov	r2, r5
 800aa7a:	4601      	mov	r1, r0
 800aa7c:	4607      	mov	r7, r0
 800aa7e:	4630      	mov	r0, r6
 800aa80:	f000 fc30 	bl	800b2e4 <__multiply>
 800aa84:	4629      	mov	r1, r5
 800aa86:	900a      	str	r0, [sp, #40]	; 0x28
 800aa88:	4630      	mov	r0, r6
 800aa8a:	f000 fb5d 	bl	800b148 <_Bfree>
 800aa8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aa90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa92:	4615      	mov	r5, r2
 800aa94:	1b1a      	subs	r2, r3, r4
 800aa96:	d004      	beq.n	800aaa2 <_dtoa_r+0x6c2>
 800aa98:	4629      	mov	r1, r5
 800aa9a:	4630      	mov	r0, r6
 800aa9c:	f000 fccc 	bl	800b438 <__pow5mult>
 800aaa0:	4605      	mov	r5, r0
 800aaa2:	2101      	movs	r1, #1
 800aaa4:	4630      	mov	r0, r6
 800aaa6:	f000 fc07 	bl	800b2b8 <__i2b>
 800aaaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	4604      	mov	r4, r0
 800aab0:	f340 8081 	ble.w	800abb6 <_dtoa_r+0x7d6>
 800aab4:	461a      	mov	r2, r3
 800aab6:	4601      	mov	r1, r0
 800aab8:	4630      	mov	r0, r6
 800aaba:	f000 fcbd 	bl	800b438 <__pow5mult>
 800aabe:	9b06      	ldr	r3, [sp, #24]
 800aac0:	2b01      	cmp	r3, #1
 800aac2:	4604      	mov	r4, r0
 800aac4:	dd7a      	ble.n	800abbc <_dtoa_r+0x7dc>
 800aac6:	2300      	movs	r3, #0
 800aac8:	930a      	str	r3, [sp, #40]	; 0x28
 800aaca:	6922      	ldr	r2, [r4, #16]
 800aacc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800aad0:	6910      	ldr	r0, [r2, #16]
 800aad2:	f000 fba1 	bl	800b218 <__hi0bits>
 800aad6:	f1c0 0020 	rsb	r0, r0, #32
 800aada:	9b05      	ldr	r3, [sp, #20]
 800aadc:	4418      	add	r0, r3
 800aade:	f010 001f 	ands.w	r0, r0, #31
 800aae2:	f000 808c 	beq.w	800abfe <_dtoa_r+0x81e>
 800aae6:	f1c0 0220 	rsb	r2, r0, #32
 800aaea:	2a04      	cmp	r2, #4
 800aaec:	f340 8085 	ble.w	800abfa <_dtoa_r+0x81a>
 800aaf0:	f1c0 001c 	rsb	r0, r0, #28
 800aaf4:	9b04      	ldr	r3, [sp, #16]
 800aaf6:	4403      	add	r3, r0
 800aaf8:	9304      	str	r3, [sp, #16]
 800aafa:	9b05      	ldr	r3, [sp, #20]
 800aafc:	4403      	add	r3, r0
 800aafe:	4480      	add	r8, r0
 800ab00:	9305      	str	r3, [sp, #20]
 800ab02:	9b04      	ldr	r3, [sp, #16]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	dd05      	ble.n	800ab14 <_dtoa_r+0x734>
 800ab08:	4629      	mov	r1, r5
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	4630      	mov	r0, r6
 800ab0e:	f000 fced 	bl	800b4ec <__lshift>
 800ab12:	4605      	mov	r5, r0
 800ab14:	9b05      	ldr	r3, [sp, #20]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	dd05      	ble.n	800ab26 <_dtoa_r+0x746>
 800ab1a:	4621      	mov	r1, r4
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	4630      	mov	r0, r6
 800ab20:	f000 fce4 	bl	800b4ec <__lshift>
 800ab24:	4604      	mov	r4, r0
 800ab26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d06a      	beq.n	800ac02 <_dtoa_r+0x822>
 800ab2c:	4621      	mov	r1, r4
 800ab2e:	4628      	mov	r0, r5
 800ab30:	f000 fd4c 	bl	800b5cc <__mcmp>
 800ab34:	2800      	cmp	r0, #0
 800ab36:	da64      	bge.n	800ac02 <_dtoa_r+0x822>
 800ab38:	2300      	movs	r3, #0
 800ab3a:	4629      	mov	r1, r5
 800ab3c:	220a      	movs	r2, #10
 800ab3e:	4630      	mov	r0, r6
 800ab40:	f000 fb24 	bl	800b18c <__multadd>
 800ab44:	9b07      	ldr	r3, [sp, #28]
 800ab46:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ab4a:	4605      	mov	r5, r0
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f000 8191 	beq.w	800ae74 <_dtoa_r+0xa94>
 800ab52:	4639      	mov	r1, r7
 800ab54:	2300      	movs	r3, #0
 800ab56:	220a      	movs	r2, #10
 800ab58:	4630      	mov	r0, r6
 800ab5a:	f000 fb17 	bl	800b18c <__multadd>
 800ab5e:	f1ba 0f00 	cmp.w	sl, #0
 800ab62:	4607      	mov	r7, r0
 800ab64:	f300 808d 	bgt.w	800ac82 <_dtoa_r+0x8a2>
 800ab68:	9b06      	ldr	r3, [sp, #24]
 800ab6a:	2b02      	cmp	r3, #2
 800ab6c:	dc50      	bgt.n	800ac10 <_dtoa_r+0x830>
 800ab6e:	e088      	b.n	800ac82 <_dtoa_r+0x8a2>
 800ab70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab72:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ab76:	e751      	b.n	800aa1c <_dtoa_r+0x63c>
 800ab78:	f109 34ff 	add.w	r4, r9, #4294967295
 800ab7c:	42a3      	cmp	r3, r4
 800ab7e:	bfbf      	itttt	lt
 800ab80:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800ab82:	1ae3      	sublt	r3, r4, r3
 800ab84:	18d2      	addlt	r2, r2, r3
 800ab86:	9209      	strlt	r2, [sp, #36]	; 0x24
 800ab88:	bfb6      	itet	lt
 800ab8a:	4623      	movlt	r3, r4
 800ab8c:	1b1c      	subge	r4, r3, r4
 800ab8e:	2400      	movlt	r4, #0
 800ab90:	f1b9 0f00 	cmp.w	r9, #0
 800ab94:	bfb5      	itete	lt
 800ab96:	9a04      	ldrlt	r2, [sp, #16]
 800ab98:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800ab9c:	eba2 0809 	sublt.w	r8, r2, r9
 800aba0:	464a      	movge	r2, r9
 800aba2:	bfb8      	it	lt
 800aba4:	2200      	movlt	r2, #0
 800aba6:	e73c      	b.n	800aa22 <_dtoa_r+0x642>
 800aba8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800abac:	9f07      	ldr	r7, [sp, #28]
 800abae:	461c      	mov	r4, r3
 800abb0:	e744      	b.n	800aa3c <_dtoa_r+0x65c>
 800abb2:	461a      	mov	r2, r3
 800abb4:	e770      	b.n	800aa98 <_dtoa_r+0x6b8>
 800abb6:	9b06      	ldr	r3, [sp, #24]
 800abb8:	2b01      	cmp	r3, #1
 800abba:	dc18      	bgt.n	800abee <_dtoa_r+0x80e>
 800abbc:	9b02      	ldr	r3, [sp, #8]
 800abbe:	b9b3      	cbnz	r3, 800abee <_dtoa_r+0x80e>
 800abc0:	9b03      	ldr	r3, [sp, #12]
 800abc2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800abc6:	b9a2      	cbnz	r2, 800abf2 <_dtoa_r+0x812>
 800abc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800abcc:	0d12      	lsrs	r2, r2, #20
 800abce:	0512      	lsls	r2, r2, #20
 800abd0:	b18a      	cbz	r2, 800abf6 <_dtoa_r+0x816>
 800abd2:	9b04      	ldr	r3, [sp, #16]
 800abd4:	3301      	adds	r3, #1
 800abd6:	9304      	str	r3, [sp, #16]
 800abd8:	9b05      	ldr	r3, [sp, #20]
 800abda:	3301      	adds	r3, #1
 800abdc:	9305      	str	r3, [sp, #20]
 800abde:	2301      	movs	r3, #1
 800abe0:	930a      	str	r3, [sp, #40]	; 0x28
 800abe2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	f47f af70 	bne.w	800aaca <_dtoa_r+0x6ea>
 800abea:	2001      	movs	r0, #1
 800abec:	e775      	b.n	800aada <_dtoa_r+0x6fa>
 800abee:	2300      	movs	r3, #0
 800abf0:	e7f6      	b.n	800abe0 <_dtoa_r+0x800>
 800abf2:	9b02      	ldr	r3, [sp, #8]
 800abf4:	e7f4      	b.n	800abe0 <_dtoa_r+0x800>
 800abf6:	920a      	str	r2, [sp, #40]	; 0x28
 800abf8:	e7f3      	b.n	800abe2 <_dtoa_r+0x802>
 800abfa:	d082      	beq.n	800ab02 <_dtoa_r+0x722>
 800abfc:	4610      	mov	r0, r2
 800abfe:	301c      	adds	r0, #28
 800ac00:	e778      	b.n	800aaf4 <_dtoa_r+0x714>
 800ac02:	f1b9 0f00 	cmp.w	r9, #0
 800ac06:	dc37      	bgt.n	800ac78 <_dtoa_r+0x898>
 800ac08:	9b06      	ldr	r3, [sp, #24]
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	dd34      	ble.n	800ac78 <_dtoa_r+0x898>
 800ac0e:	46ca      	mov	sl, r9
 800ac10:	f1ba 0f00 	cmp.w	sl, #0
 800ac14:	d10d      	bne.n	800ac32 <_dtoa_r+0x852>
 800ac16:	4621      	mov	r1, r4
 800ac18:	4653      	mov	r3, sl
 800ac1a:	2205      	movs	r2, #5
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f000 fab5 	bl	800b18c <__multadd>
 800ac22:	4601      	mov	r1, r0
 800ac24:	4604      	mov	r4, r0
 800ac26:	4628      	mov	r0, r5
 800ac28:	f000 fcd0 	bl	800b5cc <__mcmp>
 800ac2c:	2800      	cmp	r0, #0
 800ac2e:	f73f adeb 	bgt.w	800a808 <_dtoa_r+0x428>
 800ac32:	9b08      	ldr	r3, [sp, #32]
 800ac34:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ac38:	ea6f 0b03 	mvn.w	fp, r3
 800ac3c:	f04f 0900 	mov.w	r9, #0
 800ac40:	4621      	mov	r1, r4
 800ac42:	4630      	mov	r0, r6
 800ac44:	f000 fa80 	bl	800b148 <_Bfree>
 800ac48:	2f00      	cmp	r7, #0
 800ac4a:	f43f aea8 	beq.w	800a99e <_dtoa_r+0x5be>
 800ac4e:	f1b9 0f00 	cmp.w	r9, #0
 800ac52:	d005      	beq.n	800ac60 <_dtoa_r+0x880>
 800ac54:	45b9      	cmp	r9, r7
 800ac56:	d003      	beq.n	800ac60 <_dtoa_r+0x880>
 800ac58:	4649      	mov	r1, r9
 800ac5a:	4630      	mov	r0, r6
 800ac5c:	f000 fa74 	bl	800b148 <_Bfree>
 800ac60:	4639      	mov	r1, r7
 800ac62:	4630      	mov	r0, r6
 800ac64:	f000 fa70 	bl	800b148 <_Bfree>
 800ac68:	e699      	b.n	800a99e <_dtoa_r+0x5be>
 800ac6a:	2400      	movs	r4, #0
 800ac6c:	4627      	mov	r7, r4
 800ac6e:	e7e0      	b.n	800ac32 <_dtoa_r+0x852>
 800ac70:	46bb      	mov	fp, r7
 800ac72:	4604      	mov	r4, r0
 800ac74:	4607      	mov	r7, r0
 800ac76:	e5c7      	b.n	800a808 <_dtoa_r+0x428>
 800ac78:	9b07      	ldr	r3, [sp, #28]
 800ac7a:	46ca      	mov	sl, r9
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	f000 8100 	beq.w	800ae82 <_dtoa_r+0xaa2>
 800ac82:	f1b8 0f00 	cmp.w	r8, #0
 800ac86:	dd05      	ble.n	800ac94 <_dtoa_r+0x8b4>
 800ac88:	4639      	mov	r1, r7
 800ac8a:	4642      	mov	r2, r8
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	f000 fc2d 	bl	800b4ec <__lshift>
 800ac92:	4607      	mov	r7, r0
 800ac94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d05d      	beq.n	800ad56 <_dtoa_r+0x976>
 800ac9a:	6879      	ldr	r1, [r7, #4]
 800ac9c:	4630      	mov	r0, r6
 800ac9e:	f000 fa13 	bl	800b0c8 <_Balloc>
 800aca2:	4680      	mov	r8, r0
 800aca4:	b928      	cbnz	r0, 800acb2 <_dtoa_r+0x8d2>
 800aca6:	4b82      	ldr	r3, [pc, #520]	; (800aeb0 <_dtoa_r+0xad0>)
 800aca8:	4602      	mov	r2, r0
 800acaa:	f240 21ea 	movw	r1, #746	; 0x2ea
 800acae:	f7ff bbaf 	b.w	800a410 <_dtoa_r+0x30>
 800acb2:	693a      	ldr	r2, [r7, #16]
 800acb4:	3202      	adds	r2, #2
 800acb6:	0092      	lsls	r2, r2, #2
 800acb8:	f107 010c 	add.w	r1, r7, #12
 800acbc:	300c      	adds	r0, #12
 800acbe:	f7fe fe91 	bl	80099e4 <memcpy>
 800acc2:	2201      	movs	r2, #1
 800acc4:	4641      	mov	r1, r8
 800acc6:	4630      	mov	r0, r6
 800acc8:	f000 fc10 	bl	800b4ec <__lshift>
 800accc:	9b01      	ldr	r3, [sp, #4]
 800acce:	3301      	adds	r3, #1
 800acd0:	9304      	str	r3, [sp, #16]
 800acd2:	9b01      	ldr	r3, [sp, #4]
 800acd4:	4453      	add	r3, sl
 800acd6:	9308      	str	r3, [sp, #32]
 800acd8:	9b02      	ldr	r3, [sp, #8]
 800acda:	f003 0301 	and.w	r3, r3, #1
 800acde:	46b9      	mov	r9, r7
 800ace0:	9307      	str	r3, [sp, #28]
 800ace2:	4607      	mov	r7, r0
 800ace4:	9b04      	ldr	r3, [sp, #16]
 800ace6:	4621      	mov	r1, r4
 800ace8:	3b01      	subs	r3, #1
 800acea:	4628      	mov	r0, r5
 800acec:	9302      	str	r3, [sp, #8]
 800acee:	f7ff fae9 	bl	800a2c4 <quorem>
 800acf2:	4603      	mov	r3, r0
 800acf4:	3330      	adds	r3, #48	; 0x30
 800acf6:	9005      	str	r0, [sp, #20]
 800acf8:	4649      	mov	r1, r9
 800acfa:	4628      	mov	r0, r5
 800acfc:	9309      	str	r3, [sp, #36]	; 0x24
 800acfe:	f000 fc65 	bl	800b5cc <__mcmp>
 800ad02:	463a      	mov	r2, r7
 800ad04:	4682      	mov	sl, r0
 800ad06:	4621      	mov	r1, r4
 800ad08:	4630      	mov	r0, r6
 800ad0a:	f000 fc7b 	bl	800b604 <__mdiff>
 800ad0e:	68c2      	ldr	r2, [r0, #12]
 800ad10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad12:	4680      	mov	r8, r0
 800ad14:	bb0a      	cbnz	r2, 800ad5a <_dtoa_r+0x97a>
 800ad16:	4601      	mov	r1, r0
 800ad18:	4628      	mov	r0, r5
 800ad1a:	f000 fc57 	bl	800b5cc <__mcmp>
 800ad1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad20:	4602      	mov	r2, r0
 800ad22:	4641      	mov	r1, r8
 800ad24:	4630      	mov	r0, r6
 800ad26:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800ad2a:	f000 fa0d 	bl	800b148 <_Bfree>
 800ad2e:	9b06      	ldr	r3, [sp, #24]
 800ad30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad32:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ad36:	ea43 0102 	orr.w	r1, r3, r2
 800ad3a:	9b07      	ldr	r3, [sp, #28]
 800ad3c:	430b      	orrs	r3, r1
 800ad3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad40:	d10d      	bne.n	800ad5e <_dtoa_r+0x97e>
 800ad42:	2b39      	cmp	r3, #57	; 0x39
 800ad44:	d029      	beq.n	800ad9a <_dtoa_r+0x9ba>
 800ad46:	f1ba 0f00 	cmp.w	sl, #0
 800ad4a:	dd01      	ble.n	800ad50 <_dtoa_r+0x970>
 800ad4c:	9b05      	ldr	r3, [sp, #20]
 800ad4e:	3331      	adds	r3, #49	; 0x31
 800ad50:	9a02      	ldr	r2, [sp, #8]
 800ad52:	7013      	strb	r3, [r2, #0]
 800ad54:	e774      	b.n	800ac40 <_dtoa_r+0x860>
 800ad56:	4638      	mov	r0, r7
 800ad58:	e7b8      	b.n	800accc <_dtoa_r+0x8ec>
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	e7e1      	b.n	800ad22 <_dtoa_r+0x942>
 800ad5e:	f1ba 0f00 	cmp.w	sl, #0
 800ad62:	db06      	blt.n	800ad72 <_dtoa_r+0x992>
 800ad64:	9906      	ldr	r1, [sp, #24]
 800ad66:	ea41 0a0a 	orr.w	sl, r1, sl
 800ad6a:	9907      	ldr	r1, [sp, #28]
 800ad6c:	ea5a 0101 	orrs.w	r1, sl, r1
 800ad70:	d120      	bne.n	800adb4 <_dtoa_r+0x9d4>
 800ad72:	2a00      	cmp	r2, #0
 800ad74:	ddec      	ble.n	800ad50 <_dtoa_r+0x970>
 800ad76:	4629      	mov	r1, r5
 800ad78:	2201      	movs	r2, #1
 800ad7a:	4630      	mov	r0, r6
 800ad7c:	9304      	str	r3, [sp, #16]
 800ad7e:	f000 fbb5 	bl	800b4ec <__lshift>
 800ad82:	4621      	mov	r1, r4
 800ad84:	4605      	mov	r5, r0
 800ad86:	f000 fc21 	bl	800b5cc <__mcmp>
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	9b04      	ldr	r3, [sp, #16]
 800ad8e:	dc02      	bgt.n	800ad96 <_dtoa_r+0x9b6>
 800ad90:	d1de      	bne.n	800ad50 <_dtoa_r+0x970>
 800ad92:	07da      	lsls	r2, r3, #31
 800ad94:	d5dc      	bpl.n	800ad50 <_dtoa_r+0x970>
 800ad96:	2b39      	cmp	r3, #57	; 0x39
 800ad98:	d1d8      	bne.n	800ad4c <_dtoa_r+0x96c>
 800ad9a:	9a02      	ldr	r2, [sp, #8]
 800ad9c:	2339      	movs	r3, #57	; 0x39
 800ad9e:	7013      	strb	r3, [r2, #0]
 800ada0:	4643      	mov	r3, r8
 800ada2:	4698      	mov	r8, r3
 800ada4:	3b01      	subs	r3, #1
 800ada6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800adaa:	2a39      	cmp	r2, #57	; 0x39
 800adac:	d051      	beq.n	800ae52 <_dtoa_r+0xa72>
 800adae:	3201      	adds	r2, #1
 800adb0:	701a      	strb	r2, [r3, #0]
 800adb2:	e745      	b.n	800ac40 <_dtoa_r+0x860>
 800adb4:	2a00      	cmp	r2, #0
 800adb6:	dd03      	ble.n	800adc0 <_dtoa_r+0x9e0>
 800adb8:	2b39      	cmp	r3, #57	; 0x39
 800adba:	d0ee      	beq.n	800ad9a <_dtoa_r+0x9ba>
 800adbc:	3301      	adds	r3, #1
 800adbe:	e7c7      	b.n	800ad50 <_dtoa_r+0x970>
 800adc0:	9a04      	ldr	r2, [sp, #16]
 800adc2:	9908      	ldr	r1, [sp, #32]
 800adc4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800adc8:	428a      	cmp	r2, r1
 800adca:	d02b      	beq.n	800ae24 <_dtoa_r+0xa44>
 800adcc:	4629      	mov	r1, r5
 800adce:	2300      	movs	r3, #0
 800add0:	220a      	movs	r2, #10
 800add2:	4630      	mov	r0, r6
 800add4:	f000 f9da 	bl	800b18c <__multadd>
 800add8:	45b9      	cmp	r9, r7
 800adda:	4605      	mov	r5, r0
 800addc:	f04f 0300 	mov.w	r3, #0
 800ade0:	f04f 020a 	mov.w	r2, #10
 800ade4:	4649      	mov	r1, r9
 800ade6:	4630      	mov	r0, r6
 800ade8:	d107      	bne.n	800adfa <_dtoa_r+0xa1a>
 800adea:	f000 f9cf 	bl	800b18c <__multadd>
 800adee:	4681      	mov	r9, r0
 800adf0:	4607      	mov	r7, r0
 800adf2:	9b04      	ldr	r3, [sp, #16]
 800adf4:	3301      	adds	r3, #1
 800adf6:	9304      	str	r3, [sp, #16]
 800adf8:	e774      	b.n	800ace4 <_dtoa_r+0x904>
 800adfa:	f000 f9c7 	bl	800b18c <__multadd>
 800adfe:	4639      	mov	r1, r7
 800ae00:	4681      	mov	r9, r0
 800ae02:	2300      	movs	r3, #0
 800ae04:	220a      	movs	r2, #10
 800ae06:	4630      	mov	r0, r6
 800ae08:	f000 f9c0 	bl	800b18c <__multadd>
 800ae0c:	4607      	mov	r7, r0
 800ae0e:	e7f0      	b.n	800adf2 <_dtoa_r+0xa12>
 800ae10:	f1ba 0f00 	cmp.w	sl, #0
 800ae14:	9a01      	ldr	r2, [sp, #4]
 800ae16:	bfcc      	ite	gt
 800ae18:	46d0      	movgt	r8, sl
 800ae1a:	f04f 0801 	movle.w	r8, #1
 800ae1e:	4490      	add	r8, r2
 800ae20:	f04f 0900 	mov.w	r9, #0
 800ae24:	4629      	mov	r1, r5
 800ae26:	2201      	movs	r2, #1
 800ae28:	4630      	mov	r0, r6
 800ae2a:	9302      	str	r3, [sp, #8]
 800ae2c:	f000 fb5e 	bl	800b4ec <__lshift>
 800ae30:	4621      	mov	r1, r4
 800ae32:	4605      	mov	r5, r0
 800ae34:	f000 fbca 	bl	800b5cc <__mcmp>
 800ae38:	2800      	cmp	r0, #0
 800ae3a:	dcb1      	bgt.n	800ada0 <_dtoa_r+0x9c0>
 800ae3c:	d102      	bne.n	800ae44 <_dtoa_r+0xa64>
 800ae3e:	9b02      	ldr	r3, [sp, #8]
 800ae40:	07db      	lsls	r3, r3, #31
 800ae42:	d4ad      	bmi.n	800ada0 <_dtoa_r+0x9c0>
 800ae44:	4643      	mov	r3, r8
 800ae46:	4698      	mov	r8, r3
 800ae48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae4c:	2a30      	cmp	r2, #48	; 0x30
 800ae4e:	d0fa      	beq.n	800ae46 <_dtoa_r+0xa66>
 800ae50:	e6f6      	b.n	800ac40 <_dtoa_r+0x860>
 800ae52:	9a01      	ldr	r2, [sp, #4]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d1a4      	bne.n	800ada2 <_dtoa_r+0x9c2>
 800ae58:	f10b 0b01 	add.w	fp, fp, #1
 800ae5c:	2331      	movs	r3, #49	; 0x31
 800ae5e:	e778      	b.n	800ad52 <_dtoa_r+0x972>
 800ae60:	4b14      	ldr	r3, [pc, #80]	; (800aeb4 <_dtoa_r+0xad4>)
 800ae62:	f7ff bb27 	b.w	800a4b4 <_dtoa_r+0xd4>
 800ae66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f47f ab03 	bne.w	800a474 <_dtoa_r+0x94>
 800ae6e:	4b12      	ldr	r3, [pc, #72]	; (800aeb8 <_dtoa_r+0xad8>)
 800ae70:	f7ff bb20 	b.w	800a4b4 <_dtoa_r+0xd4>
 800ae74:	f1ba 0f00 	cmp.w	sl, #0
 800ae78:	dc03      	bgt.n	800ae82 <_dtoa_r+0xaa2>
 800ae7a:	9b06      	ldr	r3, [sp, #24]
 800ae7c:	2b02      	cmp	r3, #2
 800ae7e:	f73f aec7 	bgt.w	800ac10 <_dtoa_r+0x830>
 800ae82:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ae86:	4621      	mov	r1, r4
 800ae88:	4628      	mov	r0, r5
 800ae8a:	f7ff fa1b 	bl	800a2c4 <quorem>
 800ae8e:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ae92:	f808 3b01 	strb.w	r3, [r8], #1
 800ae96:	9a01      	ldr	r2, [sp, #4]
 800ae98:	eba8 0202 	sub.w	r2, r8, r2
 800ae9c:	4592      	cmp	sl, r2
 800ae9e:	ddb7      	ble.n	800ae10 <_dtoa_r+0xa30>
 800aea0:	4629      	mov	r1, r5
 800aea2:	2300      	movs	r3, #0
 800aea4:	220a      	movs	r2, #10
 800aea6:	4630      	mov	r0, r6
 800aea8:	f000 f970 	bl	800b18c <__multadd>
 800aeac:	4605      	mov	r5, r0
 800aeae:	e7ea      	b.n	800ae86 <_dtoa_r+0xaa6>
 800aeb0:	0800c4c7 	.word	0x0800c4c7
 800aeb4:	0800c424 	.word	0x0800c424
 800aeb8:	0800c448 	.word	0x0800c448

0800aebc <std>:
 800aebc:	2300      	movs	r3, #0
 800aebe:	b510      	push	{r4, lr}
 800aec0:	4604      	mov	r4, r0
 800aec2:	e9c0 3300 	strd	r3, r3, [r0]
 800aec6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aeca:	6083      	str	r3, [r0, #8]
 800aecc:	8181      	strh	r1, [r0, #12]
 800aece:	6643      	str	r3, [r0, #100]	; 0x64
 800aed0:	81c2      	strh	r2, [r0, #14]
 800aed2:	6183      	str	r3, [r0, #24]
 800aed4:	4619      	mov	r1, r3
 800aed6:	2208      	movs	r2, #8
 800aed8:	305c      	adds	r0, #92	; 0x5c
 800aeda:	f7fe fd91 	bl	8009a00 <memset>
 800aede:	4b05      	ldr	r3, [pc, #20]	; (800aef4 <std+0x38>)
 800aee0:	6263      	str	r3, [r4, #36]	; 0x24
 800aee2:	4b05      	ldr	r3, [pc, #20]	; (800aef8 <std+0x3c>)
 800aee4:	62a3      	str	r3, [r4, #40]	; 0x28
 800aee6:	4b05      	ldr	r3, [pc, #20]	; (800aefc <std+0x40>)
 800aee8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aeea:	4b05      	ldr	r3, [pc, #20]	; (800af00 <std+0x44>)
 800aeec:	6224      	str	r4, [r4, #32]
 800aeee:	6323      	str	r3, [r4, #48]	; 0x30
 800aef0:	bd10      	pop	{r4, pc}
 800aef2:	bf00      	nop
 800aef4:	0800bc91 	.word	0x0800bc91
 800aef8:	0800bcb3 	.word	0x0800bcb3
 800aefc:	0800bceb 	.word	0x0800bceb
 800af00:	0800bd0f 	.word	0x0800bd0f

0800af04 <_cleanup_r>:
 800af04:	4901      	ldr	r1, [pc, #4]	; (800af0c <_cleanup_r+0x8>)
 800af06:	f000 b8af 	b.w	800b068 <_fwalk_reent>
 800af0a:	bf00      	nop
 800af0c:	0800c025 	.word	0x0800c025

0800af10 <__sfmoreglue>:
 800af10:	b570      	push	{r4, r5, r6, lr}
 800af12:	2268      	movs	r2, #104	; 0x68
 800af14:	1e4d      	subs	r5, r1, #1
 800af16:	4355      	muls	r5, r2
 800af18:	460e      	mov	r6, r1
 800af1a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800af1e:	f000 fcd9 	bl	800b8d4 <_malloc_r>
 800af22:	4604      	mov	r4, r0
 800af24:	b140      	cbz	r0, 800af38 <__sfmoreglue+0x28>
 800af26:	2100      	movs	r1, #0
 800af28:	e9c0 1600 	strd	r1, r6, [r0]
 800af2c:	300c      	adds	r0, #12
 800af2e:	60a0      	str	r0, [r4, #8]
 800af30:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800af34:	f7fe fd64 	bl	8009a00 <memset>
 800af38:	4620      	mov	r0, r4
 800af3a:	bd70      	pop	{r4, r5, r6, pc}

0800af3c <__sfp_lock_acquire>:
 800af3c:	4801      	ldr	r0, [pc, #4]	; (800af44 <__sfp_lock_acquire+0x8>)
 800af3e:	f000 b8b8 	b.w	800b0b2 <__retarget_lock_acquire_recursive>
 800af42:	bf00      	nop
 800af44:	240004b1 	.word	0x240004b1

0800af48 <__sfp_lock_release>:
 800af48:	4801      	ldr	r0, [pc, #4]	; (800af50 <__sfp_lock_release+0x8>)
 800af4a:	f000 b8b3 	b.w	800b0b4 <__retarget_lock_release_recursive>
 800af4e:	bf00      	nop
 800af50:	240004b1 	.word	0x240004b1

0800af54 <__sinit_lock_acquire>:
 800af54:	4801      	ldr	r0, [pc, #4]	; (800af5c <__sinit_lock_acquire+0x8>)
 800af56:	f000 b8ac 	b.w	800b0b2 <__retarget_lock_acquire_recursive>
 800af5a:	bf00      	nop
 800af5c:	240004b2 	.word	0x240004b2

0800af60 <__sinit_lock_release>:
 800af60:	4801      	ldr	r0, [pc, #4]	; (800af68 <__sinit_lock_release+0x8>)
 800af62:	f000 b8a7 	b.w	800b0b4 <__retarget_lock_release_recursive>
 800af66:	bf00      	nop
 800af68:	240004b2 	.word	0x240004b2

0800af6c <__sinit>:
 800af6c:	b510      	push	{r4, lr}
 800af6e:	4604      	mov	r4, r0
 800af70:	f7ff fff0 	bl	800af54 <__sinit_lock_acquire>
 800af74:	69a3      	ldr	r3, [r4, #24]
 800af76:	b11b      	cbz	r3, 800af80 <__sinit+0x14>
 800af78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af7c:	f7ff bff0 	b.w	800af60 <__sinit_lock_release>
 800af80:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af84:	6523      	str	r3, [r4, #80]	; 0x50
 800af86:	4b13      	ldr	r3, [pc, #76]	; (800afd4 <__sinit+0x68>)
 800af88:	4a13      	ldr	r2, [pc, #76]	; (800afd8 <__sinit+0x6c>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	62a2      	str	r2, [r4, #40]	; 0x28
 800af8e:	42a3      	cmp	r3, r4
 800af90:	bf04      	itt	eq
 800af92:	2301      	moveq	r3, #1
 800af94:	61a3      	streq	r3, [r4, #24]
 800af96:	4620      	mov	r0, r4
 800af98:	f000 f820 	bl	800afdc <__sfp>
 800af9c:	6060      	str	r0, [r4, #4]
 800af9e:	4620      	mov	r0, r4
 800afa0:	f000 f81c 	bl	800afdc <__sfp>
 800afa4:	60a0      	str	r0, [r4, #8]
 800afa6:	4620      	mov	r0, r4
 800afa8:	f000 f818 	bl	800afdc <__sfp>
 800afac:	2200      	movs	r2, #0
 800afae:	60e0      	str	r0, [r4, #12]
 800afb0:	2104      	movs	r1, #4
 800afb2:	6860      	ldr	r0, [r4, #4]
 800afb4:	f7ff ff82 	bl	800aebc <std>
 800afb8:	68a0      	ldr	r0, [r4, #8]
 800afba:	2201      	movs	r2, #1
 800afbc:	2109      	movs	r1, #9
 800afbe:	f7ff ff7d 	bl	800aebc <std>
 800afc2:	68e0      	ldr	r0, [r4, #12]
 800afc4:	2202      	movs	r2, #2
 800afc6:	2112      	movs	r1, #18
 800afc8:	f7ff ff78 	bl	800aebc <std>
 800afcc:	2301      	movs	r3, #1
 800afce:	61a3      	str	r3, [r4, #24]
 800afd0:	e7d2      	b.n	800af78 <__sinit+0xc>
 800afd2:	bf00      	nop
 800afd4:	0800c410 	.word	0x0800c410
 800afd8:	0800af05 	.word	0x0800af05

0800afdc <__sfp>:
 800afdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afde:	4607      	mov	r7, r0
 800afe0:	f7ff ffac 	bl	800af3c <__sfp_lock_acquire>
 800afe4:	4b1e      	ldr	r3, [pc, #120]	; (800b060 <__sfp+0x84>)
 800afe6:	681e      	ldr	r6, [r3, #0]
 800afe8:	69b3      	ldr	r3, [r6, #24]
 800afea:	b913      	cbnz	r3, 800aff2 <__sfp+0x16>
 800afec:	4630      	mov	r0, r6
 800afee:	f7ff ffbd 	bl	800af6c <__sinit>
 800aff2:	3648      	adds	r6, #72	; 0x48
 800aff4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aff8:	3b01      	subs	r3, #1
 800affa:	d503      	bpl.n	800b004 <__sfp+0x28>
 800affc:	6833      	ldr	r3, [r6, #0]
 800affe:	b30b      	cbz	r3, 800b044 <__sfp+0x68>
 800b000:	6836      	ldr	r6, [r6, #0]
 800b002:	e7f7      	b.n	800aff4 <__sfp+0x18>
 800b004:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b008:	b9d5      	cbnz	r5, 800b040 <__sfp+0x64>
 800b00a:	4b16      	ldr	r3, [pc, #88]	; (800b064 <__sfp+0x88>)
 800b00c:	60e3      	str	r3, [r4, #12]
 800b00e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b012:	6665      	str	r5, [r4, #100]	; 0x64
 800b014:	f000 f84c 	bl	800b0b0 <__retarget_lock_init_recursive>
 800b018:	f7ff ff96 	bl	800af48 <__sfp_lock_release>
 800b01c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b020:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b024:	6025      	str	r5, [r4, #0]
 800b026:	61a5      	str	r5, [r4, #24]
 800b028:	2208      	movs	r2, #8
 800b02a:	4629      	mov	r1, r5
 800b02c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b030:	f7fe fce6 	bl	8009a00 <memset>
 800b034:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b038:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b03c:	4620      	mov	r0, r4
 800b03e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b040:	3468      	adds	r4, #104	; 0x68
 800b042:	e7d9      	b.n	800aff8 <__sfp+0x1c>
 800b044:	2104      	movs	r1, #4
 800b046:	4638      	mov	r0, r7
 800b048:	f7ff ff62 	bl	800af10 <__sfmoreglue>
 800b04c:	4604      	mov	r4, r0
 800b04e:	6030      	str	r0, [r6, #0]
 800b050:	2800      	cmp	r0, #0
 800b052:	d1d5      	bne.n	800b000 <__sfp+0x24>
 800b054:	f7ff ff78 	bl	800af48 <__sfp_lock_release>
 800b058:	230c      	movs	r3, #12
 800b05a:	603b      	str	r3, [r7, #0]
 800b05c:	e7ee      	b.n	800b03c <__sfp+0x60>
 800b05e:	bf00      	nop
 800b060:	0800c410 	.word	0x0800c410
 800b064:	ffff0001 	.word	0xffff0001

0800b068 <_fwalk_reent>:
 800b068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b06c:	4606      	mov	r6, r0
 800b06e:	4688      	mov	r8, r1
 800b070:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b074:	2700      	movs	r7, #0
 800b076:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b07a:	f1b9 0901 	subs.w	r9, r9, #1
 800b07e:	d505      	bpl.n	800b08c <_fwalk_reent+0x24>
 800b080:	6824      	ldr	r4, [r4, #0]
 800b082:	2c00      	cmp	r4, #0
 800b084:	d1f7      	bne.n	800b076 <_fwalk_reent+0xe>
 800b086:	4638      	mov	r0, r7
 800b088:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b08c:	89ab      	ldrh	r3, [r5, #12]
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d907      	bls.n	800b0a2 <_fwalk_reent+0x3a>
 800b092:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b096:	3301      	adds	r3, #1
 800b098:	d003      	beq.n	800b0a2 <_fwalk_reent+0x3a>
 800b09a:	4629      	mov	r1, r5
 800b09c:	4630      	mov	r0, r6
 800b09e:	47c0      	blx	r8
 800b0a0:	4307      	orrs	r7, r0
 800b0a2:	3568      	adds	r5, #104	; 0x68
 800b0a4:	e7e9      	b.n	800b07a <_fwalk_reent+0x12>
	...

0800b0a8 <_localeconv_r>:
 800b0a8:	4800      	ldr	r0, [pc, #0]	; (800b0ac <_localeconv_r+0x4>)
 800b0aa:	4770      	bx	lr
 800b0ac:	2400016c 	.word	0x2400016c

0800b0b0 <__retarget_lock_init_recursive>:
 800b0b0:	4770      	bx	lr

0800b0b2 <__retarget_lock_acquire_recursive>:
 800b0b2:	4770      	bx	lr

0800b0b4 <__retarget_lock_release_recursive>:
 800b0b4:	4770      	bx	lr
	...

0800b0b8 <malloc>:
 800b0b8:	4b02      	ldr	r3, [pc, #8]	; (800b0c4 <malloc+0xc>)
 800b0ba:	4601      	mov	r1, r0
 800b0bc:	6818      	ldr	r0, [r3, #0]
 800b0be:	f000 bc09 	b.w	800b8d4 <_malloc_r>
 800b0c2:	bf00      	nop
 800b0c4:	24000018 	.word	0x24000018

0800b0c8 <_Balloc>:
 800b0c8:	b570      	push	{r4, r5, r6, lr}
 800b0ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	460d      	mov	r5, r1
 800b0d0:	b976      	cbnz	r6, 800b0f0 <_Balloc+0x28>
 800b0d2:	2010      	movs	r0, #16
 800b0d4:	f7ff fff0 	bl	800b0b8 <malloc>
 800b0d8:	4602      	mov	r2, r0
 800b0da:	6260      	str	r0, [r4, #36]	; 0x24
 800b0dc:	b920      	cbnz	r0, 800b0e8 <_Balloc+0x20>
 800b0de:	4b18      	ldr	r3, [pc, #96]	; (800b140 <_Balloc+0x78>)
 800b0e0:	4818      	ldr	r0, [pc, #96]	; (800b144 <_Balloc+0x7c>)
 800b0e2:	2166      	movs	r1, #102	; 0x66
 800b0e4:	f000 feea 	bl	800bebc <__assert_func>
 800b0e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b0ec:	6006      	str	r6, [r0, #0]
 800b0ee:	60c6      	str	r6, [r0, #12]
 800b0f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b0f2:	68f3      	ldr	r3, [r6, #12]
 800b0f4:	b183      	cbz	r3, 800b118 <_Balloc+0x50>
 800b0f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0f8:	68db      	ldr	r3, [r3, #12]
 800b0fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b0fe:	b9b8      	cbnz	r0, 800b130 <_Balloc+0x68>
 800b100:	2101      	movs	r1, #1
 800b102:	fa01 f605 	lsl.w	r6, r1, r5
 800b106:	1d72      	adds	r2, r6, #5
 800b108:	0092      	lsls	r2, r2, #2
 800b10a:	4620      	mov	r0, r4
 800b10c:	f000 fb60 	bl	800b7d0 <_calloc_r>
 800b110:	b160      	cbz	r0, 800b12c <_Balloc+0x64>
 800b112:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b116:	e00e      	b.n	800b136 <_Balloc+0x6e>
 800b118:	2221      	movs	r2, #33	; 0x21
 800b11a:	2104      	movs	r1, #4
 800b11c:	4620      	mov	r0, r4
 800b11e:	f000 fb57 	bl	800b7d0 <_calloc_r>
 800b122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b124:	60f0      	str	r0, [r6, #12]
 800b126:	68db      	ldr	r3, [r3, #12]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1e4      	bne.n	800b0f6 <_Balloc+0x2e>
 800b12c:	2000      	movs	r0, #0
 800b12e:	bd70      	pop	{r4, r5, r6, pc}
 800b130:	6802      	ldr	r2, [r0, #0]
 800b132:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b136:	2300      	movs	r3, #0
 800b138:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b13c:	e7f7      	b.n	800b12e <_Balloc+0x66>
 800b13e:	bf00      	nop
 800b140:	0800c455 	.word	0x0800c455
 800b144:	0800c538 	.word	0x0800c538

0800b148 <_Bfree>:
 800b148:	b570      	push	{r4, r5, r6, lr}
 800b14a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b14c:	4605      	mov	r5, r0
 800b14e:	460c      	mov	r4, r1
 800b150:	b976      	cbnz	r6, 800b170 <_Bfree+0x28>
 800b152:	2010      	movs	r0, #16
 800b154:	f7ff ffb0 	bl	800b0b8 <malloc>
 800b158:	4602      	mov	r2, r0
 800b15a:	6268      	str	r0, [r5, #36]	; 0x24
 800b15c:	b920      	cbnz	r0, 800b168 <_Bfree+0x20>
 800b15e:	4b09      	ldr	r3, [pc, #36]	; (800b184 <_Bfree+0x3c>)
 800b160:	4809      	ldr	r0, [pc, #36]	; (800b188 <_Bfree+0x40>)
 800b162:	218a      	movs	r1, #138	; 0x8a
 800b164:	f000 feaa 	bl	800bebc <__assert_func>
 800b168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b16c:	6006      	str	r6, [r0, #0]
 800b16e:	60c6      	str	r6, [r0, #12]
 800b170:	b13c      	cbz	r4, 800b182 <_Bfree+0x3a>
 800b172:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b174:	6862      	ldr	r2, [r4, #4]
 800b176:	68db      	ldr	r3, [r3, #12]
 800b178:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b17c:	6021      	str	r1, [r4, #0]
 800b17e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b182:	bd70      	pop	{r4, r5, r6, pc}
 800b184:	0800c455 	.word	0x0800c455
 800b188:	0800c538 	.word	0x0800c538

0800b18c <__multadd>:
 800b18c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b190:	690d      	ldr	r5, [r1, #16]
 800b192:	4607      	mov	r7, r0
 800b194:	460c      	mov	r4, r1
 800b196:	461e      	mov	r6, r3
 800b198:	f101 0c14 	add.w	ip, r1, #20
 800b19c:	2000      	movs	r0, #0
 800b19e:	f8dc 3000 	ldr.w	r3, [ip]
 800b1a2:	b299      	uxth	r1, r3
 800b1a4:	fb02 6101 	mla	r1, r2, r1, r6
 800b1a8:	0c1e      	lsrs	r6, r3, #16
 800b1aa:	0c0b      	lsrs	r3, r1, #16
 800b1ac:	fb02 3306 	mla	r3, r2, r6, r3
 800b1b0:	b289      	uxth	r1, r1
 800b1b2:	3001      	adds	r0, #1
 800b1b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b1b8:	4285      	cmp	r5, r0
 800b1ba:	f84c 1b04 	str.w	r1, [ip], #4
 800b1be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b1c2:	dcec      	bgt.n	800b19e <__multadd+0x12>
 800b1c4:	b30e      	cbz	r6, 800b20a <__multadd+0x7e>
 800b1c6:	68a3      	ldr	r3, [r4, #8]
 800b1c8:	42ab      	cmp	r3, r5
 800b1ca:	dc19      	bgt.n	800b200 <__multadd+0x74>
 800b1cc:	6861      	ldr	r1, [r4, #4]
 800b1ce:	4638      	mov	r0, r7
 800b1d0:	3101      	adds	r1, #1
 800b1d2:	f7ff ff79 	bl	800b0c8 <_Balloc>
 800b1d6:	4680      	mov	r8, r0
 800b1d8:	b928      	cbnz	r0, 800b1e6 <__multadd+0x5a>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	4b0c      	ldr	r3, [pc, #48]	; (800b210 <__multadd+0x84>)
 800b1de:	480d      	ldr	r0, [pc, #52]	; (800b214 <__multadd+0x88>)
 800b1e0:	21b5      	movs	r1, #181	; 0xb5
 800b1e2:	f000 fe6b 	bl	800bebc <__assert_func>
 800b1e6:	6922      	ldr	r2, [r4, #16]
 800b1e8:	3202      	adds	r2, #2
 800b1ea:	f104 010c 	add.w	r1, r4, #12
 800b1ee:	0092      	lsls	r2, r2, #2
 800b1f0:	300c      	adds	r0, #12
 800b1f2:	f7fe fbf7 	bl	80099e4 <memcpy>
 800b1f6:	4621      	mov	r1, r4
 800b1f8:	4638      	mov	r0, r7
 800b1fa:	f7ff ffa5 	bl	800b148 <_Bfree>
 800b1fe:	4644      	mov	r4, r8
 800b200:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b204:	3501      	adds	r5, #1
 800b206:	615e      	str	r6, [r3, #20]
 800b208:	6125      	str	r5, [r4, #16]
 800b20a:	4620      	mov	r0, r4
 800b20c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b210:	0800c4c7 	.word	0x0800c4c7
 800b214:	0800c538 	.word	0x0800c538

0800b218 <__hi0bits>:
 800b218:	0c03      	lsrs	r3, r0, #16
 800b21a:	041b      	lsls	r3, r3, #16
 800b21c:	b9d3      	cbnz	r3, 800b254 <__hi0bits+0x3c>
 800b21e:	0400      	lsls	r0, r0, #16
 800b220:	2310      	movs	r3, #16
 800b222:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b226:	bf04      	itt	eq
 800b228:	0200      	lsleq	r0, r0, #8
 800b22a:	3308      	addeq	r3, #8
 800b22c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b230:	bf04      	itt	eq
 800b232:	0100      	lsleq	r0, r0, #4
 800b234:	3304      	addeq	r3, #4
 800b236:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b23a:	bf04      	itt	eq
 800b23c:	0080      	lsleq	r0, r0, #2
 800b23e:	3302      	addeq	r3, #2
 800b240:	2800      	cmp	r0, #0
 800b242:	db05      	blt.n	800b250 <__hi0bits+0x38>
 800b244:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b248:	f103 0301 	add.w	r3, r3, #1
 800b24c:	bf08      	it	eq
 800b24e:	2320      	moveq	r3, #32
 800b250:	4618      	mov	r0, r3
 800b252:	4770      	bx	lr
 800b254:	2300      	movs	r3, #0
 800b256:	e7e4      	b.n	800b222 <__hi0bits+0xa>

0800b258 <__lo0bits>:
 800b258:	6803      	ldr	r3, [r0, #0]
 800b25a:	f013 0207 	ands.w	r2, r3, #7
 800b25e:	4601      	mov	r1, r0
 800b260:	d00b      	beq.n	800b27a <__lo0bits+0x22>
 800b262:	07da      	lsls	r2, r3, #31
 800b264:	d423      	bmi.n	800b2ae <__lo0bits+0x56>
 800b266:	0798      	lsls	r0, r3, #30
 800b268:	bf49      	itett	mi
 800b26a:	085b      	lsrmi	r3, r3, #1
 800b26c:	089b      	lsrpl	r3, r3, #2
 800b26e:	2001      	movmi	r0, #1
 800b270:	600b      	strmi	r3, [r1, #0]
 800b272:	bf5c      	itt	pl
 800b274:	600b      	strpl	r3, [r1, #0]
 800b276:	2002      	movpl	r0, #2
 800b278:	4770      	bx	lr
 800b27a:	b298      	uxth	r0, r3
 800b27c:	b9a8      	cbnz	r0, 800b2aa <__lo0bits+0x52>
 800b27e:	0c1b      	lsrs	r3, r3, #16
 800b280:	2010      	movs	r0, #16
 800b282:	b2da      	uxtb	r2, r3
 800b284:	b90a      	cbnz	r2, 800b28a <__lo0bits+0x32>
 800b286:	3008      	adds	r0, #8
 800b288:	0a1b      	lsrs	r3, r3, #8
 800b28a:	071a      	lsls	r2, r3, #28
 800b28c:	bf04      	itt	eq
 800b28e:	091b      	lsreq	r3, r3, #4
 800b290:	3004      	addeq	r0, #4
 800b292:	079a      	lsls	r2, r3, #30
 800b294:	bf04      	itt	eq
 800b296:	089b      	lsreq	r3, r3, #2
 800b298:	3002      	addeq	r0, #2
 800b29a:	07da      	lsls	r2, r3, #31
 800b29c:	d403      	bmi.n	800b2a6 <__lo0bits+0x4e>
 800b29e:	085b      	lsrs	r3, r3, #1
 800b2a0:	f100 0001 	add.w	r0, r0, #1
 800b2a4:	d005      	beq.n	800b2b2 <__lo0bits+0x5a>
 800b2a6:	600b      	str	r3, [r1, #0]
 800b2a8:	4770      	bx	lr
 800b2aa:	4610      	mov	r0, r2
 800b2ac:	e7e9      	b.n	800b282 <__lo0bits+0x2a>
 800b2ae:	2000      	movs	r0, #0
 800b2b0:	4770      	bx	lr
 800b2b2:	2020      	movs	r0, #32
 800b2b4:	4770      	bx	lr
	...

0800b2b8 <__i2b>:
 800b2b8:	b510      	push	{r4, lr}
 800b2ba:	460c      	mov	r4, r1
 800b2bc:	2101      	movs	r1, #1
 800b2be:	f7ff ff03 	bl	800b0c8 <_Balloc>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	b928      	cbnz	r0, 800b2d2 <__i2b+0x1a>
 800b2c6:	4b05      	ldr	r3, [pc, #20]	; (800b2dc <__i2b+0x24>)
 800b2c8:	4805      	ldr	r0, [pc, #20]	; (800b2e0 <__i2b+0x28>)
 800b2ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b2ce:	f000 fdf5 	bl	800bebc <__assert_func>
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	6144      	str	r4, [r0, #20]
 800b2d6:	6103      	str	r3, [r0, #16]
 800b2d8:	bd10      	pop	{r4, pc}
 800b2da:	bf00      	nop
 800b2dc:	0800c4c7 	.word	0x0800c4c7
 800b2e0:	0800c538 	.word	0x0800c538

0800b2e4 <__multiply>:
 800b2e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e8:	4691      	mov	r9, r2
 800b2ea:	690a      	ldr	r2, [r1, #16]
 800b2ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b2f0:	429a      	cmp	r2, r3
 800b2f2:	bfb8      	it	lt
 800b2f4:	460b      	movlt	r3, r1
 800b2f6:	460c      	mov	r4, r1
 800b2f8:	bfbc      	itt	lt
 800b2fa:	464c      	movlt	r4, r9
 800b2fc:	4699      	movlt	r9, r3
 800b2fe:	6927      	ldr	r7, [r4, #16]
 800b300:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b304:	68a3      	ldr	r3, [r4, #8]
 800b306:	6861      	ldr	r1, [r4, #4]
 800b308:	eb07 060a 	add.w	r6, r7, sl
 800b30c:	42b3      	cmp	r3, r6
 800b30e:	b085      	sub	sp, #20
 800b310:	bfb8      	it	lt
 800b312:	3101      	addlt	r1, #1
 800b314:	f7ff fed8 	bl	800b0c8 <_Balloc>
 800b318:	b930      	cbnz	r0, 800b328 <__multiply+0x44>
 800b31a:	4602      	mov	r2, r0
 800b31c:	4b44      	ldr	r3, [pc, #272]	; (800b430 <__multiply+0x14c>)
 800b31e:	4845      	ldr	r0, [pc, #276]	; (800b434 <__multiply+0x150>)
 800b320:	f240 115d 	movw	r1, #349	; 0x15d
 800b324:	f000 fdca 	bl	800bebc <__assert_func>
 800b328:	f100 0514 	add.w	r5, r0, #20
 800b32c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b330:	462b      	mov	r3, r5
 800b332:	2200      	movs	r2, #0
 800b334:	4543      	cmp	r3, r8
 800b336:	d321      	bcc.n	800b37c <__multiply+0x98>
 800b338:	f104 0314 	add.w	r3, r4, #20
 800b33c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b340:	f109 0314 	add.w	r3, r9, #20
 800b344:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b348:	9202      	str	r2, [sp, #8]
 800b34a:	1b3a      	subs	r2, r7, r4
 800b34c:	3a15      	subs	r2, #21
 800b34e:	f022 0203 	bic.w	r2, r2, #3
 800b352:	3204      	adds	r2, #4
 800b354:	f104 0115 	add.w	r1, r4, #21
 800b358:	428f      	cmp	r7, r1
 800b35a:	bf38      	it	cc
 800b35c:	2204      	movcc	r2, #4
 800b35e:	9201      	str	r2, [sp, #4]
 800b360:	9a02      	ldr	r2, [sp, #8]
 800b362:	9303      	str	r3, [sp, #12]
 800b364:	429a      	cmp	r2, r3
 800b366:	d80c      	bhi.n	800b382 <__multiply+0x9e>
 800b368:	2e00      	cmp	r6, #0
 800b36a:	dd03      	ble.n	800b374 <__multiply+0x90>
 800b36c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b370:	2b00      	cmp	r3, #0
 800b372:	d05a      	beq.n	800b42a <__multiply+0x146>
 800b374:	6106      	str	r6, [r0, #16]
 800b376:	b005      	add	sp, #20
 800b378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37c:	f843 2b04 	str.w	r2, [r3], #4
 800b380:	e7d8      	b.n	800b334 <__multiply+0x50>
 800b382:	f8b3 a000 	ldrh.w	sl, [r3]
 800b386:	f1ba 0f00 	cmp.w	sl, #0
 800b38a:	d024      	beq.n	800b3d6 <__multiply+0xf2>
 800b38c:	f104 0e14 	add.w	lr, r4, #20
 800b390:	46a9      	mov	r9, r5
 800b392:	f04f 0c00 	mov.w	ip, #0
 800b396:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b39a:	f8d9 1000 	ldr.w	r1, [r9]
 800b39e:	fa1f fb82 	uxth.w	fp, r2
 800b3a2:	b289      	uxth	r1, r1
 800b3a4:	fb0a 110b 	mla	r1, sl, fp, r1
 800b3a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b3ac:	f8d9 2000 	ldr.w	r2, [r9]
 800b3b0:	4461      	add	r1, ip
 800b3b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b3b6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b3ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b3be:	b289      	uxth	r1, r1
 800b3c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b3c4:	4577      	cmp	r7, lr
 800b3c6:	f849 1b04 	str.w	r1, [r9], #4
 800b3ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b3ce:	d8e2      	bhi.n	800b396 <__multiply+0xb2>
 800b3d0:	9a01      	ldr	r2, [sp, #4]
 800b3d2:	f845 c002 	str.w	ip, [r5, r2]
 800b3d6:	9a03      	ldr	r2, [sp, #12]
 800b3d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b3dc:	3304      	adds	r3, #4
 800b3de:	f1b9 0f00 	cmp.w	r9, #0
 800b3e2:	d020      	beq.n	800b426 <__multiply+0x142>
 800b3e4:	6829      	ldr	r1, [r5, #0]
 800b3e6:	f104 0c14 	add.w	ip, r4, #20
 800b3ea:	46ae      	mov	lr, r5
 800b3ec:	f04f 0a00 	mov.w	sl, #0
 800b3f0:	f8bc b000 	ldrh.w	fp, [ip]
 800b3f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b3f8:	fb09 220b 	mla	r2, r9, fp, r2
 800b3fc:	4492      	add	sl, r2
 800b3fe:	b289      	uxth	r1, r1
 800b400:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b404:	f84e 1b04 	str.w	r1, [lr], #4
 800b408:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b40c:	f8be 1000 	ldrh.w	r1, [lr]
 800b410:	0c12      	lsrs	r2, r2, #16
 800b412:	fb09 1102 	mla	r1, r9, r2, r1
 800b416:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b41a:	4567      	cmp	r7, ip
 800b41c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b420:	d8e6      	bhi.n	800b3f0 <__multiply+0x10c>
 800b422:	9a01      	ldr	r2, [sp, #4]
 800b424:	50a9      	str	r1, [r5, r2]
 800b426:	3504      	adds	r5, #4
 800b428:	e79a      	b.n	800b360 <__multiply+0x7c>
 800b42a:	3e01      	subs	r6, #1
 800b42c:	e79c      	b.n	800b368 <__multiply+0x84>
 800b42e:	bf00      	nop
 800b430:	0800c4c7 	.word	0x0800c4c7
 800b434:	0800c538 	.word	0x0800c538

0800b438 <__pow5mult>:
 800b438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b43c:	4615      	mov	r5, r2
 800b43e:	f012 0203 	ands.w	r2, r2, #3
 800b442:	4606      	mov	r6, r0
 800b444:	460f      	mov	r7, r1
 800b446:	d007      	beq.n	800b458 <__pow5mult+0x20>
 800b448:	4c25      	ldr	r4, [pc, #148]	; (800b4e0 <__pow5mult+0xa8>)
 800b44a:	3a01      	subs	r2, #1
 800b44c:	2300      	movs	r3, #0
 800b44e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b452:	f7ff fe9b 	bl	800b18c <__multadd>
 800b456:	4607      	mov	r7, r0
 800b458:	10ad      	asrs	r5, r5, #2
 800b45a:	d03d      	beq.n	800b4d8 <__pow5mult+0xa0>
 800b45c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b45e:	b97c      	cbnz	r4, 800b480 <__pow5mult+0x48>
 800b460:	2010      	movs	r0, #16
 800b462:	f7ff fe29 	bl	800b0b8 <malloc>
 800b466:	4602      	mov	r2, r0
 800b468:	6270      	str	r0, [r6, #36]	; 0x24
 800b46a:	b928      	cbnz	r0, 800b478 <__pow5mult+0x40>
 800b46c:	4b1d      	ldr	r3, [pc, #116]	; (800b4e4 <__pow5mult+0xac>)
 800b46e:	481e      	ldr	r0, [pc, #120]	; (800b4e8 <__pow5mult+0xb0>)
 800b470:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b474:	f000 fd22 	bl	800bebc <__assert_func>
 800b478:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b47c:	6004      	str	r4, [r0, #0]
 800b47e:	60c4      	str	r4, [r0, #12]
 800b480:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b484:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b488:	b94c      	cbnz	r4, 800b49e <__pow5mult+0x66>
 800b48a:	f240 2171 	movw	r1, #625	; 0x271
 800b48e:	4630      	mov	r0, r6
 800b490:	f7ff ff12 	bl	800b2b8 <__i2b>
 800b494:	2300      	movs	r3, #0
 800b496:	f8c8 0008 	str.w	r0, [r8, #8]
 800b49a:	4604      	mov	r4, r0
 800b49c:	6003      	str	r3, [r0, #0]
 800b49e:	f04f 0900 	mov.w	r9, #0
 800b4a2:	07eb      	lsls	r3, r5, #31
 800b4a4:	d50a      	bpl.n	800b4bc <__pow5mult+0x84>
 800b4a6:	4639      	mov	r1, r7
 800b4a8:	4622      	mov	r2, r4
 800b4aa:	4630      	mov	r0, r6
 800b4ac:	f7ff ff1a 	bl	800b2e4 <__multiply>
 800b4b0:	4639      	mov	r1, r7
 800b4b2:	4680      	mov	r8, r0
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	f7ff fe47 	bl	800b148 <_Bfree>
 800b4ba:	4647      	mov	r7, r8
 800b4bc:	106d      	asrs	r5, r5, #1
 800b4be:	d00b      	beq.n	800b4d8 <__pow5mult+0xa0>
 800b4c0:	6820      	ldr	r0, [r4, #0]
 800b4c2:	b938      	cbnz	r0, 800b4d4 <__pow5mult+0x9c>
 800b4c4:	4622      	mov	r2, r4
 800b4c6:	4621      	mov	r1, r4
 800b4c8:	4630      	mov	r0, r6
 800b4ca:	f7ff ff0b 	bl	800b2e4 <__multiply>
 800b4ce:	6020      	str	r0, [r4, #0]
 800b4d0:	f8c0 9000 	str.w	r9, [r0]
 800b4d4:	4604      	mov	r4, r0
 800b4d6:	e7e4      	b.n	800b4a2 <__pow5mult+0x6a>
 800b4d8:	4638      	mov	r0, r7
 800b4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4de:	bf00      	nop
 800b4e0:	0800c688 	.word	0x0800c688
 800b4e4:	0800c455 	.word	0x0800c455
 800b4e8:	0800c538 	.word	0x0800c538

0800b4ec <__lshift>:
 800b4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4f0:	460c      	mov	r4, r1
 800b4f2:	6849      	ldr	r1, [r1, #4]
 800b4f4:	6923      	ldr	r3, [r4, #16]
 800b4f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b4fa:	68a3      	ldr	r3, [r4, #8]
 800b4fc:	4607      	mov	r7, r0
 800b4fe:	4691      	mov	r9, r2
 800b500:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b504:	f108 0601 	add.w	r6, r8, #1
 800b508:	42b3      	cmp	r3, r6
 800b50a:	db0b      	blt.n	800b524 <__lshift+0x38>
 800b50c:	4638      	mov	r0, r7
 800b50e:	f7ff fddb 	bl	800b0c8 <_Balloc>
 800b512:	4605      	mov	r5, r0
 800b514:	b948      	cbnz	r0, 800b52a <__lshift+0x3e>
 800b516:	4602      	mov	r2, r0
 800b518:	4b2a      	ldr	r3, [pc, #168]	; (800b5c4 <__lshift+0xd8>)
 800b51a:	482b      	ldr	r0, [pc, #172]	; (800b5c8 <__lshift+0xdc>)
 800b51c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b520:	f000 fccc 	bl	800bebc <__assert_func>
 800b524:	3101      	adds	r1, #1
 800b526:	005b      	lsls	r3, r3, #1
 800b528:	e7ee      	b.n	800b508 <__lshift+0x1c>
 800b52a:	2300      	movs	r3, #0
 800b52c:	f100 0114 	add.w	r1, r0, #20
 800b530:	f100 0210 	add.w	r2, r0, #16
 800b534:	4618      	mov	r0, r3
 800b536:	4553      	cmp	r3, sl
 800b538:	db37      	blt.n	800b5aa <__lshift+0xbe>
 800b53a:	6920      	ldr	r0, [r4, #16]
 800b53c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b540:	f104 0314 	add.w	r3, r4, #20
 800b544:	f019 091f 	ands.w	r9, r9, #31
 800b548:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b54c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b550:	d02f      	beq.n	800b5b2 <__lshift+0xc6>
 800b552:	f1c9 0e20 	rsb	lr, r9, #32
 800b556:	468a      	mov	sl, r1
 800b558:	f04f 0c00 	mov.w	ip, #0
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	fa02 f209 	lsl.w	r2, r2, r9
 800b562:	ea42 020c 	orr.w	r2, r2, ip
 800b566:	f84a 2b04 	str.w	r2, [sl], #4
 800b56a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b56e:	4298      	cmp	r0, r3
 800b570:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b574:	d8f2      	bhi.n	800b55c <__lshift+0x70>
 800b576:	1b03      	subs	r3, r0, r4
 800b578:	3b15      	subs	r3, #21
 800b57a:	f023 0303 	bic.w	r3, r3, #3
 800b57e:	3304      	adds	r3, #4
 800b580:	f104 0215 	add.w	r2, r4, #21
 800b584:	4290      	cmp	r0, r2
 800b586:	bf38      	it	cc
 800b588:	2304      	movcc	r3, #4
 800b58a:	f841 c003 	str.w	ip, [r1, r3]
 800b58e:	f1bc 0f00 	cmp.w	ip, #0
 800b592:	d001      	beq.n	800b598 <__lshift+0xac>
 800b594:	f108 0602 	add.w	r6, r8, #2
 800b598:	3e01      	subs	r6, #1
 800b59a:	4638      	mov	r0, r7
 800b59c:	612e      	str	r6, [r5, #16]
 800b59e:	4621      	mov	r1, r4
 800b5a0:	f7ff fdd2 	bl	800b148 <_Bfree>
 800b5a4:	4628      	mov	r0, r5
 800b5a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	e7c1      	b.n	800b536 <__lshift+0x4a>
 800b5b2:	3904      	subs	r1, #4
 800b5b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b5bc:	4298      	cmp	r0, r3
 800b5be:	d8f9      	bhi.n	800b5b4 <__lshift+0xc8>
 800b5c0:	e7ea      	b.n	800b598 <__lshift+0xac>
 800b5c2:	bf00      	nop
 800b5c4:	0800c4c7 	.word	0x0800c4c7
 800b5c8:	0800c538 	.word	0x0800c538

0800b5cc <__mcmp>:
 800b5cc:	b530      	push	{r4, r5, lr}
 800b5ce:	6902      	ldr	r2, [r0, #16]
 800b5d0:	690c      	ldr	r4, [r1, #16]
 800b5d2:	1b12      	subs	r2, r2, r4
 800b5d4:	d10e      	bne.n	800b5f4 <__mcmp+0x28>
 800b5d6:	f100 0314 	add.w	r3, r0, #20
 800b5da:	3114      	adds	r1, #20
 800b5dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b5e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b5e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b5e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b5ec:	42a5      	cmp	r5, r4
 800b5ee:	d003      	beq.n	800b5f8 <__mcmp+0x2c>
 800b5f0:	d305      	bcc.n	800b5fe <__mcmp+0x32>
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	4610      	mov	r0, r2
 800b5f6:	bd30      	pop	{r4, r5, pc}
 800b5f8:	4283      	cmp	r3, r0
 800b5fa:	d3f3      	bcc.n	800b5e4 <__mcmp+0x18>
 800b5fc:	e7fa      	b.n	800b5f4 <__mcmp+0x28>
 800b5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b602:	e7f7      	b.n	800b5f4 <__mcmp+0x28>

0800b604 <__mdiff>:
 800b604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b608:	460c      	mov	r4, r1
 800b60a:	4606      	mov	r6, r0
 800b60c:	4611      	mov	r1, r2
 800b60e:	4620      	mov	r0, r4
 800b610:	4690      	mov	r8, r2
 800b612:	f7ff ffdb 	bl	800b5cc <__mcmp>
 800b616:	1e05      	subs	r5, r0, #0
 800b618:	d110      	bne.n	800b63c <__mdiff+0x38>
 800b61a:	4629      	mov	r1, r5
 800b61c:	4630      	mov	r0, r6
 800b61e:	f7ff fd53 	bl	800b0c8 <_Balloc>
 800b622:	b930      	cbnz	r0, 800b632 <__mdiff+0x2e>
 800b624:	4b3a      	ldr	r3, [pc, #232]	; (800b710 <__mdiff+0x10c>)
 800b626:	4602      	mov	r2, r0
 800b628:	f240 2132 	movw	r1, #562	; 0x232
 800b62c:	4839      	ldr	r0, [pc, #228]	; (800b714 <__mdiff+0x110>)
 800b62e:	f000 fc45 	bl	800bebc <__assert_func>
 800b632:	2301      	movs	r3, #1
 800b634:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63c:	bfa4      	itt	ge
 800b63e:	4643      	movge	r3, r8
 800b640:	46a0      	movge	r8, r4
 800b642:	4630      	mov	r0, r6
 800b644:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b648:	bfa6      	itte	ge
 800b64a:	461c      	movge	r4, r3
 800b64c:	2500      	movge	r5, #0
 800b64e:	2501      	movlt	r5, #1
 800b650:	f7ff fd3a 	bl	800b0c8 <_Balloc>
 800b654:	b920      	cbnz	r0, 800b660 <__mdiff+0x5c>
 800b656:	4b2e      	ldr	r3, [pc, #184]	; (800b710 <__mdiff+0x10c>)
 800b658:	4602      	mov	r2, r0
 800b65a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b65e:	e7e5      	b.n	800b62c <__mdiff+0x28>
 800b660:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b664:	6926      	ldr	r6, [r4, #16]
 800b666:	60c5      	str	r5, [r0, #12]
 800b668:	f104 0914 	add.w	r9, r4, #20
 800b66c:	f108 0514 	add.w	r5, r8, #20
 800b670:	f100 0e14 	add.w	lr, r0, #20
 800b674:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b678:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b67c:	f108 0210 	add.w	r2, r8, #16
 800b680:	46f2      	mov	sl, lr
 800b682:	2100      	movs	r1, #0
 800b684:	f859 3b04 	ldr.w	r3, [r9], #4
 800b688:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b68c:	fa1f f883 	uxth.w	r8, r3
 800b690:	fa11 f18b 	uxtah	r1, r1, fp
 800b694:	0c1b      	lsrs	r3, r3, #16
 800b696:	eba1 0808 	sub.w	r8, r1, r8
 800b69a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b69e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b6a2:	fa1f f888 	uxth.w	r8, r8
 800b6a6:	1419      	asrs	r1, r3, #16
 800b6a8:	454e      	cmp	r6, r9
 800b6aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b6ae:	f84a 3b04 	str.w	r3, [sl], #4
 800b6b2:	d8e7      	bhi.n	800b684 <__mdiff+0x80>
 800b6b4:	1b33      	subs	r3, r6, r4
 800b6b6:	3b15      	subs	r3, #21
 800b6b8:	f023 0303 	bic.w	r3, r3, #3
 800b6bc:	3304      	adds	r3, #4
 800b6be:	3415      	adds	r4, #21
 800b6c0:	42a6      	cmp	r6, r4
 800b6c2:	bf38      	it	cc
 800b6c4:	2304      	movcc	r3, #4
 800b6c6:	441d      	add	r5, r3
 800b6c8:	4473      	add	r3, lr
 800b6ca:	469e      	mov	lr, r3
 800b6cc:	462e      	mov	r6, r5
 800b6ce:	4566      	cmp	r6, ip
 800b6d0:	d30e      	bcc.n	800b6f0 <__mdiff+0xec>
 800b6d2:	f10c 0203 	add.w	r2, ip, #3
 800b6d6:	1b52      	subs	r2, r2, r5
 800b6d8:	f022 0203 	bic.w	r2, r2, #3
 800b6dc:	3d03      	subs	r5, #3
 800b6de:	45ac      	cmp	ip, r5
 800b6e0:	bf38      	it	cc
 800b6e2:	2200      	movcc	r2, #0
 800b6e4:	441a      	add	r2, r3
 800b6e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b6ea:	b17b      	cbz	r3, 800b70c <__mdiff+0x108>
 800b6ec:	6107      	str	r7, [r0, #16]
 800b6ee:	e7a3      	b.n	800b638 <__mdiff+0x34>
 800b6f0:	f856 8b04 	ldr.w	r8, [r6], #4
 800b6f4:	fa11 f288 	uxtah	r2, r1, r8
 800b6f8:	1414      	asrs	r4, r2, #16
 800b6fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b6fe:	b292      	uxth	r2, r2
 800b700:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b704:	f84e 2b04 	str.w	r2, [lr], #4
 800b708:	1421      	asrs	r1, r4, #16
 800b70a:	e7e0      	b.n	800b6ce <__mdiff+0xca>
 800b70c:	3f01      	subs	r7, #1
 800b70e:	e7ea      	b.n	800b6e6 <__mdiff+0xe2>
 800b710:	0800c4c7 	.word	0x0800c4c7
 800b714:	0800c538 	.word	0x0800c538

0800b718 <__d2b>:
 800b718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b71c:	4689      	mov	r9, r1
 800b71e:	2101      	movs	r1, #1
 800b720:	ec57 6b10 	vmov	r6, r7, d0
 800b724:	4690      	mov	r8, r2
 800b726:	f7ff fccf 	bl	800b0c8 <_Balloc>
 800b72a:	4604      	mov	r4, r0
 800b72c:	b930      	cbnz	r0, 800b73c <__d2b+0x24>
 800b72e:	4602      	mov	r2, r0
 800b730:	4b25      	ldr	r3, [pc, #148]	; (800b7c8 <__d2b+0xb0>)
 800b732:	4826      	ldr	r0, [pc, #152]	; (800b7cc <__d2b+0xb4>)
 800b734:	f240 310a 	movw	r1, #778	; 0x30a
 800b738:	f000 fbc0 	bl	800bebc <__assert_func>
 800b73c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b740:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b744:	bb35      	cbnz	r5, 800b794 <__d2b+0x7c>
 800b746:	2e00      	cmp	r6, #0
 800b748:	9301      	str	r3, [sp, #4]
 800b74a:	d028      	beq.n	800b79e <__d2b+0x86>
 800b74c:	4668      	mov	r0, sp
 800b74e:	9600      	str	r6, [sp, #0]
 800b750:	f7ff fd82 	bl	800b258 <__lo0bits>
 800b754:	9900      	ldr	r1, [sp, #0]
 800b756:	b300      	cbz	r0, 800b79a <__d2b+0x82>
 800b758:	9a01      	ldr	r2, [sp, #4]
 800b75a:	f1c0 0320 	rsb	r3, r0, #32
 800b75e:	fa02 f303 	lsl.w	r3, r2, r3
 800b762:	430b      	orrs	r3, r1
 800b764:	40c2      	lsrs	r2, r0
 800b766:	6163      	str	r3, [r4, #20]
 800b768:	9201      	str	r2, [sp, #4]
 800b76a:	9b01      	ldr	r3, [sp, #4]
 800b76c:	61a3      	str	r3, [r4, #24]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	bf14      	ite	ne
 800b772:	2202      	movne	r2, #2
 800b774:	2201      	moveq	r2, #1
 800b776:	6122      	str	r2, [r4, #16]
 800b778:	b1d5      	cbz	r5, 800b7b0 <__d2b+0x98>
 800b77a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b77e:	4405      	add	r5, r0
 800b780:	f8c9 5000 	str.w	r5, [r9]
 800b784:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b788:	f8c8 0000 	str.w	r0, [r8]
 800b78c:	4620      	mov	r0, r4
 800b78e:	b003      	add	sp, #12
 800b790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b794:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b798:	e7d5      	b.n	800b746 <__d2b+0x2e>
 800b79a:	6161      	str	r1, [r4, #20]
 800b79c:	e7e5      	b.n	800b76a <__d2b+0x52>
 800b79e:	a801      	add	r0, sp, #4
 800b7a0:	f7ff fd5a 	bl	800b258 <__lo0bits>
 800b7a4:	9b01      	ldr	r3, [sp, #4]
 800b7a6:	6163      	str	r3, [r4, #20]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	6122      	str	r2, [r4, #16]
 800b7ac:	3020      	adds	r0, #32
 800b7ae:	e7e3      	b.n	800b778 <__d2b+0x60>
 800b7b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b7b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b7b8:	f8c9 0000 	str.w	r0, [r9]
 800b7bc:	6918      	ldr	r0, [r3, #16]
 800b7be:	f7ff fd2b 	bl	800b218 <__hi0bits>
 800b7c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b7c6:	e7df      	b.n	800b788 <__d2b+0x70>
 800b7c8:	0800c4c7 	.word	0x0800c4c7
 800b7cc:	0800c538 	.word	0x0800c538

0800b7d0 <_calloc_r>:
 800b7d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7d2:	fba1 2402 	umull	r2, r4, r1, r2
 800b7d6:	b94c      	cbnz	r4, 800b7ec <_calloc_r+0x1c>
 800b7d8:	4611      	mov	r1, r2
 800b7da:	9201      	str	r2, [sp, #4]
 800b7dc:	f000 f87a 	bl	800b8d4 <_malloc_r>
 800b7e0:	9a01      	ldr	r2, [sp, #4]
 800b7e2:	4605      	mov	r5, r0
 800b7e4:	b930      	cbnz	r0, 800b7f4 <_calloc_r+0x24>
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	b003      	add	sp, #12
 800b7ea:	bd30      	pop	{r4, r5, pc}
 800b7ec:	220c      	movs	r2, #12
 800b7ee:	6002      	str	r2, [r0, #0]
 800b7f0:	2500      	movs	r5, #0
 800b7f2:	e7f8      	b.n	800b7e6 <_calloc_r+0x16>
 800b7f4:	4621      	mov	r1, r4
 800b7f6:	f7fe f903 	bl	8009a00 <memset>
 800b7fa:	e7f4      	b.n	800b7e6 <_calloc_r+0x16>

0800b7fc <_free_r>:
 800b7fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7fe:	2900      	cmp	r1, #0
 800b800:	d044      	beq.n	800b88c <_free_r+0x90>
 800b802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b806:	9001      	str	r0, [sp, #4]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	f1a1 0404 	sub.w	r4, r1, #4
 800b80e:	bfb8      	it	lt
 800b810:	18e4      	addlt	r4, r4, r3
 800b812:	f000 fcdf 	bl	800c1d4 <__malloc_lock>
 800b816:	4a1e      	ldr	r2, [pc, #120]	; (800b890 <_free_r+0x94>)
 800b818:	9801      	ldr	r0, [sp, #4]
 800b81a:	6813      	ldr	r3, [r2, #0]
 800b81c:	b933      	cbnz	r3, 800b82c <_free_r+0x30>
 800b81e:	6063      	str	r3, [r4, #4]
 800b820:	6014      	str	r4, [r2, #0]
 800b822:	b003      	add	sp, #12
 800b824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b828:	f000 bcda 	b.w	800c1e0 <__malloc_unlock>
 800b82c:	42a3      	cmp	r3, r4
 800b82e:	d908      	bls.n	800b842 <_free_r+0x46>
 800b830:	6825      	ldr	r5, [r4, #0]
 800b832:	1961      	adds	r1, r4, r5
 800b834:	428b      	cmp	r3, r1
 800b836:	bf01      	itttt	eq
 800b838:	6819      	ldreq	r1, [r3, #0]
 800b83a:	685b      	ldreq	r3, [r3, #4]
 800b83c:	1949      	addeq	r1, r1, r5
 800b83e:	6021      	streq	r1, [r4, #0]
 800b840:	e7ed      	b.n	800b81e <_free_r+0x22>
 800b842:	461a      	mov	r2, r3
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	b10b      	cbz	r3, 800b84c <_free_r+0x50>
 800b848:	42a3      	cmp	r3, r4
 800b84a:	d9fa      	bls.n	800b842 <_free_r+0x46>
 800b84c:	6811      	ldr	r1, [r2, #0]
 800b84e:	1855      	adds	r5, r2, r1
 800b850:	42a5      	cmp	r5, r4
 800b852:	d10b      	bne.n	800b86c <_free_r+0x70>
 800b854:	6824      	ldr	r4, [r4, #0]
 800b856:	4421      	add	r1, r4
 800b858:	1854      	adds	r4, r2, r1
 800b85a:	42a3      	cmp	r3, r4
 800b85c:	6011      	str	r1, [r2, #0]
 800b85e:	d1e0      	bne.n	800b822 <_free_r+0x26>
 800b860:	681c      	ldr	r4, [r3, #0]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	6053      	str	r3, [r2, #4]
 800b866:	4421      	add	r1, r4
 800b868:	6011      	str	r1, [r2, #0]
 800b86a:	e7da      	b.n	800b822 <_free_r+0x26>
 800b86c:	d902      	bls.n	800b874 <_free_r+0x78>
 800b86e:	230c      	movs	r3, #12
 800b870:	6003      	str	r3, [r0, #0]
 800b872:	e7d6      	b.n	800b822 <_free_r+0x26>
 800b874:	6825      	ldr	r5, [r4, #0]
 800b876:	1961      	adds	r1, r4, r5
 800b878:	428b      	cmp	r3, r1
 800b87a:	bf04      	itt	eq
 800b87c:	6819      	ldreq	r1, [r3, #0]
 800b87e:	685b      	ldreq	r3, [r3, #4]
 800b880:	6063      	str	r3, [r4, #4]
 800b882:	bf04      	itt	eq
 800b884:	1949      	addeq	r1, r1, r5
 800b886:	6021      	streq	r1, [r4, #0]
 800b888:	6054      	str	r4, [r2, #4]
 800b88a:	e7ca      	b.n	800b822 <_free_r+0x26>
 800b88c:	b003      	add	sp, #12
 800b88e:	bd30      	pop	{r4, r5, pc}
 800b890:	240004b4 	.word	0x240004b4

0800b894 <sbrk_aligned>:
 800b894:	b570      	push	{r4, r5, r6, lr}
 800b896:	4e0e      	ldr	r6, [pc, #56]	; (800b8d0 <sbrk_aligned+0x3c>)
 800b898:	460c      	mov	r4, r1
 800b89a:	6831      	ldr	r1, [r6, #0]
 800b89c:	4605      	mov	r5, r0
 800b89e:	b911      	cbnz	r1, 800b8a6 <sbrk_aligned+0x12>
 800b8a0:	f000 f9e6 	bl	800bc70 <_sbrk_r>
 800b8a4:	6030      	str	r0, [r6, #0]
 800b8a6:	4621      	mov	r1, r4
 800b8a8:	4628      	mov	r0, r5
 800b8aa:	f000 f9e1 	bl	800bc70 <_sbrk_r>
 800b8ae:	1c43      	adds	r3, r0, #1
 800b8b0:	d00a      	beq.n	800b8c8 <sbrk_aligned+0x34>
 800b8b2:	1cc4      	adds	r4, r0, #3
 800b8b4:	f024 0403 	bic.w	r4, r4, #3
 800b8b8:	42a0      	cmp	r0, r4
 800b8ba:	d007      	beq.n	800b8cc <sbrk_aligned+0x38>
 800b8bc:	1a21      	subs	r1, r4, r0
 800b8be:	4628      	mov	r0, r5
 800b8c0:	f000 f9d6 	bl	800bc70 <_sbrk_r>
 800b8c4:	3001      	adds	r0, #1
 800b8c6:	d101      	bne.n	800b8cc <sbrk_aligned+0x38>
 800b8c8:	f04f 34ff 	mov.w	r4, #4294967295
 800b8cc:	4620      	mov	r0, r4
 800b8ce:	bd70      	pop	{r4, r5, r6, pc}
 800b8d0:	240004b8 	.word	0x240004b8

0800b8d4 <_malloc_r>:
 800b8d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d8:	1ccd      	adds	r5, r1, #3
 800b8da:	f025 0503 	bic.w	r5, r5, #3
 800b8de:	3508      	adds	r5, #8
 800b8e0:	2d0c      	cmp	r5, #12
 800b8e2:	bf38      	it	cc
 800b8e4:	250c      	movcc	r5, #12
 800b8e6:	2d00      	cmp	r5, #0
 800b8e8:	4607      	mov	r7, r0
 800b8ea:	db01      	blt.n	800b8f0 <_malloc_r+0x1c>
 800b8ec:	42a9      	cmp	r1, r5
 800b8ee:	d905      	bls.n	800b8fc <_malloc_r+0x28>
 800b8f0:	230c      	movs	r3, #12
 800b8f2:	603b      	str	r3, [r7, #0]
 800b8f4:	2600      	movs	r6, #0
 800b8f6:	4630      	mov	r0, r6
 800b8f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8fc:	4e2e      	ldr	r6, [pc, #184]	; (800b9b8 <_malloc_r+0xe4>)
 800b8fe:	f000 fc69 	bl	800c1d4 <__malloc_lock>
 800b902:	6833      	ldr	r3, [r6, #0]
 800b904:	461c      	mov	r4, r3
 800b906:	bb34      	cbnz	r4, 800b956 <_malloc_r+0x82>
 800b908:	4629      	mov	r1, r5
 800b90a:	4638      	mov	r0, r7
 800b90c:	f7ff ffc2 	bl	800b894 <sbrk_aligned>
 800b910:	1c43      	adds	r3, r0, #1
 800b912:	4604      	mov	r4, r0
 800b914:	d14d      	bne.n	800b9b2 <_malloc_r+0xde>
 800b916:	6834      	ldr	r4, [r6, #0]
 800b918:	4626      	mov	r6, r4
 800b91a:	2e00      	cmp	r6, #0
 800b91c:	d140      	bne.n	800b9a0 <_malloc_r+0xcc>
 800b91e:	6823      	ldr	r3, [r4, #0]
 800b920:	4631      	mov	r1, r6
 800b922:	4638      	mov	r0, r7
 800b924:	eb04 0803 	add.w	r8, r4, r3
 800b928:	f000 f9a2 	bl	800bc70 <_sbrk_r>
 800b92c:	4580      	cmp	r8, r0
 800b92e:	d13a      	bne.n	800b9a6 <_malloc_r+0xd2>
 800b930:	6821      	ldr	r1, [r4, #0]
 800b932:	3503      	adds	r5, #3
 800b934:	1a6d      	subs	r5, r5, r1
 800b936:	f025 0503 	bic.w	r5, r5, #3
 800b93a:	3508      	adds	r5, #8
 800b93c:	2d0c      	cmp	r5, #12
 800b93e:	bf38      	it	cc
 800b940:	250c      	movcc	r5, #12
 800b942:	4629      	mov	r1, r5
 800b944:	4638      	mov	r0, r7
 800b946:	f7ff ffa5 	bl	800b894 <sbrk_aligned>
 800b94a:	3001      	adds	r0, #1
 800b94c:	d02b      	beq.n	800b9a6 <_malloc_r+0xd2>
 800b94e:	6823      	ldr	r3, [r4, #0]
 800b950:	442b      	add	r3, r5
 800b952:	6023      	str	r3, [r4, #0]
 800b954:	e00e      	b.n	800b974 <_malloc_r+0xa0>
 800b956:	6822      	ldr	r2, [r4, #0]
 800b958:	1b52      	subs	r2, r2, r5
 800b95a:	d41e      	bmi.n	800b99a <_malloc_r+0xc6>
 800b95c:	2a0b      	cmp	r2, #11
 800b95e:	d916      	bls.n	800b98e <_malloc_r+0xba>
 800b960:	1961      	adds	r1, r4, r5
 800b962:	42a3      	cmp	r3, r4
 800b964:	6025      	str	r5, [r4, #0]
 800b966:	bf18      	it	ne
 800b968:	6059      	strne	r1, [r3, #4]
 800b96a:	6863      	ldr	r3, [r4, #4]
 800b96c:	bf08      	it	eq
 800b96e:	6031      	streq	r1, [r6, #0]
 800b970:	5162      	str	r2, [r4, r5]
 800b972:	604b      	str	r3, [r1, #4]
 800b974:	4638      	mov	r0, r7
 800b976:	f104 060b 	add.w	r6, r4, #11
 800b97a:	f000 fc31 	bl	800c1e0 <__malloc_unlock>
 800b97e:	f026 0607 	bic.w	r6, r6, #7
 800b982:	1d23      	adds	r3, r4, #4
 800b984:	1af2      	subs	r2, r6, r3
 800b986:	d0b6      	beq.n	800b8f6 <_malloc_r+0x22>
 800b988:	1b9b      	subs	r3, r3, r6
 800b98a:	50a3      	str	r3, [r4, r2]
 800b98c:	e7b3      	b.n	800b8f6 <_malloc_r+0x22>
 800b98e:	6862      	ldr	r2, [r4, #4]
 800b990:	42a3      	cmp	r3, r4
 800b992:	bf0c      	ite	eq
 800b994:	6032      	streq	r2, [r6, #0]
 800b996:	605a      	strne	r2, [r3, #4]
 800b998:	e7ec      	b.n	800b974 <_malloc_r+0xa0>
 800b99a:	4623      	mov	r3, r4
 800b99c:	6864      	ldr	r4, [r4, #4]
 800b99e:	e7b2      	b.n	800b906 <_malloc_r+0x32>
 800b9a0:	4634      	mov	r4, r6
 800b9a2:	6876      	ldr	r6, [r6, #4]
 800b9a4:	e7b9      	b.n	800b91a <_malloc_r+0x46>
 800b9a6:	230c      	movs	r3, #12
 800b9a8:	603b      	str	r3, [r7, #0]
 800b9aa:	4638      	mov	r0, r7
 800b9ac:	f000 fc18 	bl	800c1e0 <__malloc_unlock>
 800b9b0:	e7a1      	b.n	800b8f6 <_malloc_r+0x22>
 800b9b2:	6025      	str	r5, [r4, #0]
 800b9b4:	e7de      	b.n	800b974 <_malloc_r+0xa0>
 800b9b6:	bf00      	nop
 800b9b8:	240004b4 	.word	0x240004b4

0800b9bc <__sfputc_r>:
 800b9bc:	6893      	ldr	r3, [r2, #8]
 800b9be:	3b01      	subs	r3, #1
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	b410      	push	{r4}
 800b9c4:	6093      	str	r3, [r2, #8]
 800b9c6:	da08      	bge.n	800b9da <__sfputc_r+0x1e>
 800b9c8:	6994      	ldr	r4, [r2, #24]
 800b9ca:	42a3      	cmp	r3, r4
 800b9cc:	db01      	blt.n	800b9d2 <__sfputc_r+0x16>
 800b9ce:	290a      	cmp	r1, #10
 800b9d0:	d103      	bne.n	800b9da <__sfputc_r+0x1e>
 800b9d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9d6:	f000 b99f 	b.w	800bd18 <__swbuf_r>
 800b9da:	6813      	ldr	r3, [r2, #0]
 800b9dc:	1c58      	adds	r0, r3, #1
 800b9de:	6010      	str	r0, [r2, #0]
 800b9e0:	7019      	strb	r1, [r3, #0]
 800b9e2:	4608      	mov	r0, r1
 800b9e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9e8:	4770      	bx	lr

0800b9ea <__sfputs_r>:
 800b9ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ec:	4606      	mov	r6, r0
 800b9ee:	460f      	mov	r7, r1
 800b9f0:	4614      	mov	r4, r2
 800b9f2:	18d5      	adds	r5, r2, r3
 800b9f4:	42ac      	cmp	r4, r5
 800b9f6:	d101      	bne.n	800b9fc <__sfputs_r+0x12>
 800b9f8:	2000      	movs	r0, #0
 800b9fa:	e007      	b.n	800ba0c <__sfputs_r+0x22>
 800b9fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba00:	463a      	mov	r2, r7
 800ba02:	4630      	mov	r0, r6
 800ba04:	f7ff ffda 	bl	800b9bc <__sfputc_r>
 800ba08:	1c43      	adds	r3, r0, #1
 800ba0a:	d1f3      	bne.n	800b9f4 <__sfputs_r+0xa>
 800ba0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba10 <_vfiprintf_r>:
 800ba10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba14:	460d      	mov	r5, r1
 800ba16:	b09d      	sub	sp, #116	; 0x74
 800ba18:	4614      	mov	r4, r2
 800ba1a:	4698      	mov	r8, r3
 800ba1c:	4606      	mov	r6, r0
 800ba1e:	b118      	cbz	r0, 800ba28 <_vfiprintf_r+0x18>
 800ba20:	6983      	ldr	r3, [r0, #24]
 800ba22:	b90b      	cbnz	r3, 800ba28 <_vfiprintf_r+0x18>
 800ba24:	f7ff faa2 	bl	800af6c <__sinit>
 800ba28:	4b89      	ldr	r3, [pc, #548]	; (800bc50 <_vfiprintf_r+0x240>)
 800ba2a:	429d      	cmp	r5, r3
 800ba2c:	d11b      	bne.n	800ba66 <_vfiprintf_r+0x56>
 800ba2e:	6875      	ldr	r5, [r6, #4]
 800ba30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba32:	07d9      	lsls	r1, r3, #31
 800ba34:	d405      	bmi.n	800ba42 <_vfiprintf_r+0x32>
 800ba36:	89ab      	ldrh	r3, [r5, #12]
 800ba38:	059a      	lsls	r2, r3, #22
 800ba3a:	d402      	bmi.n	800ba42 <_vfiprintf_r+0x32>
 800ba3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba3e:	f7ff fb38 	bl	800b0b2 <__retarget_lock_acquire_recursive>
 800ba42:	89ab      	ldrh	r3, [r5, #12]
 800ba44:	071b      	lsls	r3, r3, #28
 800ba46:	d501      	bpl.n	800ba4c <_vfiprintf_r+0x3c>
 800ba48:	692b      	ldr	r3, [r5, #16]
 800ba4a:	b9eb      	cbnz	r3, 800ba88 <_vfiprintf_r+0x78>
 800ba4c:	4629      	mov	r1, r5
 800ba4e:	4630      	mov	r0, r6
 800ba50:	f000 f9c6 	bl	800bde0 <__swsetup_r>
 800ba54:	b1c0      	cbz	r0, 800ba88 <_vfiprintf_r+0x78>
 800ba56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba58:	07dc      	lsls	r4, r3, #31
 800ba5a:	d50e      	bpl.n	800ba7a <_vfiprintf_r+0x6a>
 800ba5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba60:	b01d      	add	sp, #116	; 0x74
 800ba62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba66:	4b7b      	ldr	r3, [pc, #492]	; (800bc54 <_vfiprintf_r+0x244>)
 800ba68:	429d      	cmp	r5, r3
 800ba6a:	d101      	bne.n	800ba70 <_vfiprintf_r+0x60>
 800ba6c:	68b5      	ldr	r5, [r6, #8]
 800ba6e:	e7df      	b.n	800ba30 <_vfiprintf_r+0x20>
 800ba70:	4b79      	ldr	r3, [pc, #484]	; (800bc58 <_vfiprintf_r+0x248>)
 800ba72:	429d      	cmp	r5, r3
 800ba74:	bf08      	it	eq
 800ba76:	68f5      	ldreq	r5, [r6, #12]
 800ba78:	e7da      	b.n	800ba30 <_vfiprintf_r+0x20>
 800ba7a:	89ab      	ldrh	r3, [r5, #12]
 800ba7c:	0598      	lsls	r0, r3, #22
 800ba7e:	d4ed      	bmi.n	800ba5c <_vfiprintf_r+0x4c>
 800ba80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba82:	f7ff fb17 	bl	800b0b4 <__retarget_lock_release_recursive>
 800ba86:	e7e9      	b.n	800ba5c <_vfiprintf_r+0x4c>
 800ba88:	2300      	movs	r3, #0
 800ba8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba8c:	2320      	movs	r3, #32
 800ba8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba92:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba96:	2330      	movs	r3, #48	; 0x30
 800ba98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bc5c <_vfiprintf_r+0x24c>
 800ba9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800baa0:	f04f 0901 	mov.w	r9, #1
 800baa4:	4623      	mov	r3, r4
 800baa6:	469a      	mov	sl, r3
 800baa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800baac:	b10a      	cbz	r2, 800bab2 <_vfiprintf_r+0xa2>
 800baae:	2a25      	cmp	r2, #37	; 0x25
 800bab0:	d1f9      	bne.n	800baa6 <_vfiprintf_r+0x96>
 800bab2:	ebba 0b04 	subs.w	fp, sl, r4
 800bab6:	d00b      	beq.n	800bad0 <_vfiprintf_r+0xc0>
 800bab8:	465b      	mov	r3, fp
 800baba:	4622      	mov	r2, r4
 800babc:	4629      	mov	r1, r5
 800babe:	4630      	mov	r0, r6
 800bac0:	f7ff ff93 	bl	800b9ea <__sfputs_r>
 800bac4:	3001      	adds	r0, #1
 800bac6:	f000 80aa 	beq.w	800bc1e <_vfiprintf_r+0x20e>
 800baca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bacc:	445a      	add	r2, fp
 800bace:	9209      	str	r2, [sp, #36]	; 0x24
 800bad0:	f89a 3000 	ldrb.w	r3, [sl]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f000 80a2 	beq.w	800bc1e <_vfiprintf_r+0x20e>
 800bada:	2300      	movs	r3, #0
 800badc:	f04f 32ff 	mov.w	r2, #4294967295
 800bae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bae4:	f10a 0a01 	add.w	sl, sl, #1
 800bae8:	9304      	str	r3, [sp, #16]
 800baea:	9307      	str	r3, [sp, #28]
 800baec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baf0:	931a      	str	r3, [sp, #104]	; 0x68
 800baf2:	4654      	mov	r4, sl
 800baf4:	2205      	movs	r2, #5
 800baf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bafa:	4858      	ldr	r0, [pc, #352]	; (800bc5c <_vfiprintf_r+0x24c>)
 800bafc:	f7f4 fbf8 	bl	80002f0 <memchr>
 800bb00:	9a04      	ldr	r2, [sp, #16]
 800bb02:	b9d8      	cbnz	r0, 800bb3c <_vfiprintf_r+0x12c>
 800bb04:	06d1      	lsls	r1, r2, #27
 800bb06:	bf44      	itt	mi
 800bb08:	2320      	movmi	r3, #32
 800bb0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb0e:	0713      	lsls	r3, r2, #28
 800bb10:	bf44      	itt	mi
 800bb12:	232b      	movmi	r3, #43	; 0x2b
 800bb14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb18:	f89a 3000 	ldrb.w	r3, [sl]
 800bb1c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb1e:	d015      	beq.n	800bb4c <_vfiprintf_r+0x13c>
 800bb20:	9a07      	ldr	r2, [sp, #28]
 800bb22:	4654      	mov	r4, sl
 800bb24:	2000      	movs	r0, #0
 800bb26:	f04f 0c0a 	mov.w	ip, #10
 800bb2a:	4621      	mov	r1, r4
 800bb2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb30:	3b30      	subs	r3, #48	; 0x30
 800bb32:	2b09      	cmp	r3, #9
 800bb34:	d94e      	bls.n	800bbd4 <_vfiprintf_r+0x1c4>
 800bb36:	b1b0      	cbz	r0, 800bb66 <_vfiprintf_r+0x156>
 800bb38:	9207      	str	r2, [sp, #28]
 800bb3a:	e014      	b.n	800bb66 <_vfiprintf_r+0x156>
 800bb3c:	eba0 0308 	sub.w	r3, r0, r8
 800bb40:	fa09 f303 	lsl.w	r3, r9, r3
 800bb44:	4313      	orrs	r3, r2
 800bb46:	9304      	str	r3, [sp, #16]
 800bb48:	46a2      	mov	sl, r4
 800bb4a:	e7d2      	b.n	800baf2 <_vfiprintf_r+0xe2>
 800bb4c:	9b03      	ldr	r3, [sp, #12]
 800bb4e:	1d19      	adds	r1, r3, #4
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	9103      	str	r1, [sp, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	bfbb      	ittet	lt
 800bb58:	425b      	neglt	r3, r3
 800bb5a:	f042 0202 	orrlt.w	r2, r2, #2
 800bb5e:	9307      	strge	r3, [sp, #28]
 800bb60:	9307      	strlt	r3, [sp, #28]
 800bb62:	bfb8      	it	lt
 800bb64:	9204      	strlt	r2, [sp, #16]
 800bb66:	7823      	ldrb	r3, [r4, #0]
 800bb68:	2b2e      	cmp	r3, #46	; 0x2e
 800bb6a:	d10c      	bne.n	800bb86 <_vfiprintf_r+0x176>
 800bb6c:	7863      	ldrb	r3, [r4, #1]
 800bb6e:	2b2a      	cmp	r3, #42	; 0x2a
 800bb70:	d135      	bne.n	800bbde <_vfiprintf_r+0x1ce>
 800bb72:	9b03      	ldr	r3, [sp, #12]
 800bb74:	1d1a      	adds	r2, r3, #4
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	9203      	str	r2, [sp, #12]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	bfb8      	it	lt
 800bb7e:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb82:	3402      	adds	r4, #2
 800bb84:	9305      	str	r3, [sp, #20]
 800bb86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bc6c <_vfiprintf_r+0x25c>
 800bb8a:	7821      	ldrb	r1, [r4, #0]
 800bb8c:	2203      	movs	r2, #3
 800bb8e:	4650      	mov	r0, sl
 800bb90:	f7f4 fbae 	bl	80002f0 <memchr>
 800bb94:	b140      	cbz	r0, 800bba8 <_vfiprintf_r+0x198>
 800bb96:	2340      	movs	r3, #64	; 0x40
 800bb98:	eba0 000a 	sub.w	r0, r0, sl
 800bb9c:	fa03 f000 	lsl.w	r0, r3, r0
 800bba0:	9b04      	ldr	r3, [sp, #16]
 800bba2:	4303      	orrs	r3, r0
 800bba4:	3401      	adds	r4, #1
 800bba6:	9304      	str	r3, [sp, #16]
 800bba8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbac:	482c      	ldr	r0, [pc, #176]	; (800bc60 <_vfiprintf_r+0x250>)
 800bbae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bbb2:	2206      	movs	r2, #6
 800bbb4:	f7f4 fb9c 	bl	80002f0 <memchr>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d03f      	beq.n	800bc3c <_vfiprintf_r+0x22c>
 800bbbc:	4b29      	ldr	r3, [pc, #164]	; (800bc64 <_vfiprintf_r+0x254>)
 800bbbe:	bb1b      	cbnz	r3, 800bc08 <_vfiprintf_r+0x1f8>
 800bbc0:	9b03      	ldr	r3, [sp, #12]
 800bbc2:	3307      	adds	r3, #7
 800bbc4:	f023 0307 	bic.w	r3, r3, #7
 800bbc8:	3308      	adds	r3, #8
 800bbca:	9303      	str	r3, [sp, #12]
 800bbcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbce:	443b      	add	r3, r7
 800bbd0:	9309      	str	r3, [sp, #36]	; 0x24
 800bbd2:	e767      	b.n	800baa4 <_vfiprintf_r+0x94>
 800bbd4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbd8:	460c      	mov	r4, r1
 800bbda:	2001      	movs	r0, #1
 800bbdc:	e7a5      	b.n	800bb2a <_vfiprintf_r+0x11a>
 800bbde:	2300      	movs	r3, #0
 800bbe0:	3401      	adds	r4, #1
 800bbe2:	9305      	str	r3, [sp, #20]
 800bbe4:	4619      	mov	r1, r3
 800bbe6:	f04f 0c0a 	mov.w	ip, #10
 800bbea:	4620      	mov	r0, r4
 800bbec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbf0:	3a30      	subs	r2, #48	; 0x30
 800bbf2:	2a09      	cmp	r2, #9
 800bbf4:	d903      	bls.n	800bbfe <_vfiprintf_r+0x1ee>
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d0c5      	beq.n	800bb86 <_vfiprintf_r+0x176>
 800bbfa:	9105      	str	r1, [sp, #20]
 800bbfc:	e7c3      	b.n	800bb86 <_vfiprintf_r+0x176>
 800bbfe:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc02:	4604      	mov	r4, r0
 800bc04:	2301      	movs	r3, #1
 800bc06:	e7f0      	b.n	800bbea <_vfiprintf_r+0x1da>
 800bc08:	ab03      	add	r3, sp, #12
 800bc0a:	9300      	str	r3, [sp, #0]
 800bc0c:	462a      	mov	r2, r5
 800bc0e:	4b16      	ldr	r3, [pc, #88]	; (800bc68 <_vfiprintf_r+0x258>)
 800bc10:	a904      	add	r1, sp, #16
 800bc12:	4630      	mov	r0, r6
 800bc14:	f7fd ff8c 	bl	8009b30 <_printf_float>
 800bc18:	4607      	mov	r7, r0
 800bc1a:	1c78      	adds	r0, r7, #1
 800bc1c:	d1d6      	bne.n	800bbcc <_vfiprintf_r+0x1bc>
 800bc1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc20:	07d9      	lsls	r1, r3, #31
 800bc22:	d405      	bmi.n	800bc30 <_vfiprintf_r+0x220>
 800bc24:	89ab      	ldrh	r3, [r5, #12]
 800bc26:	059a      	lsls	r2, r3, #22
 800bc28:	d402      	bmi.n	800bc30 <_vfiprintf_r+0x220>
 800bc2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc2c:	f7ff fa42 	bl	800b0b4 <__retarget_lock_release_recursive>
 800bc30:	89ab      	ldrh	r3, [r5, #12]
 800bc32:	065b      	lsls	r3, r3, #25
 800bc34:	f53f af12 	bmi.w	800ba5c <_vfiprintf_r+0x4c>
 800bc38:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bc3a:	e711      	b.n	800ba60 <_vfiprintf_r+0x50>
 800bc3c:	ab03      	add	r3, sp, #12
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	462a      	mov	r2, r5
 800bc42:	4b09      	ldr	r3, [pc, #36]	; (800bc68 <_vfiprintf_r+0x258>)
 800bc44:	a904      	add	r1, sp, #16
 800bc46:	4630      	mov	r0, r6
 800bc48:	f7fe f9fe 	bl	800a048 <_printf_i>
 800bc4c:	e7e4      	b.n	800bc18 <_vfiprintf_r+0x208>
 800bc4e:	bf00      	nop
 800bc50:	0800c4f8 	.word	0x0800c4f8
 800bc54:	0800c518 	.word	0x0800c518
 800bc58:	0800c4d8 	.word	0x0800c4d8
 800bc5c:	0800c694 	.word	0x0800c694
 800bc60:	0800c69e 	.word	0x0800c69e
 800bc64:	08009b31 	.word	0x08009b31
 800bc68:	0800b9eb 	.word	0x0800b9eb
 800bc6c:	0800c69a 	.word	0x0800c69a

0800bc70 <_sbrk_r>:
 800bc70:	b538      	push	{r3, r4, r5, lr}
 800bc72:	4d06      	ldr	r5, [pc, #24]	; (800bc8c <_sbrk_r+0x1c>)
 800bc74:	2300      	movs	r3, #0
 800bc76:	4604      	mov	r4, r0
 800bc78:	4608      	mov	r0, r1
 800bc7a:	602b      	str	r3, [r5, #0]
 800bc7c:	f7f5 fd52 	bl	8001724 <_sbrk>
 800bc80:	1c43      	adds	r3, r0, #1
 800bc82:	d102      	bne.n	800bc8a <_sbrk_r+0x1a>
 800bc84:	682b      	ldr	r3, [r5, #0]
 800bc86:	b103      	cbz	r3, 800bc8a <_sbrk_r+0x1a>
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	bd38      	pop	{r3, r4, r5, pc}
 800bc8c:	240004bc 	.word	0x240004bc

0800bc90 <__sread>:
 800bc90:	b510      	push	{r4, lr}
 800bc92:	460c      	mov	r4, r1
 800bc94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc98:	f000 faa8 	bl	800c1ec <_read_r>
 800bc9c:	2800      	cmp	r0, #0
 800bc9e:	bfab      	itete	ge
 800bca0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bca2:	89a3      	ldrhlt	r3, [r4, #12]
 800bca4:	181b      	addge	r3, r3, r0
 800bca6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bcaa:	bfac      	ite	ge
 800bcac:	6563      	strge	r3, [r4, #84]	; 0x54
 800bcae:	81a3      	strhlt	r3, [r4, #12]
 800bcb0:	bd10      	pop	{r4, pc}

0800bcb2 <__swrite>:
 800bcb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb6:	461f      	mov	r7, r3
 800bcb8:	898b      	ldrh	r3, [r1, #12]
 800bcba:	05db      	lsls	r3, r3, #23
 800bcbc:	4605      	mov	r5, r0
 800bcbe:	460c      	mov	r4, r1
 800bcc0:	4616      	mov	r6, r2
 800bcc2:	d505      	bpl.n	800bcd0 <__swrite+0x1e>
 800bcc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcc8:	2302      	movs	r3, #2
 800bcca:	2200      	movs	r2, #0
 800bccc:	f000 f9f8 	bl	800c0c0 <_lseek_r>
 800bcd0:	89a3      	ldrh	r3, [r4, #12]
 800bcd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bcd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bcda:	81a3      	strh	r3, [r4, #12]
 800bcdc:	4632      	mov	r2, r6
 800bcde:	463b      	mov	r3, r7
 800bce0:	4628      	mov	r0, r5
 800bce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bce6:	f000 b869 	b.w	800bdbc <_write_r>

0800bcea <__sseek>:
 800bcea:	b510      	push	{r4, lr}
 800bcec:	460c      	mov	r4, r1
 800bcee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcf2:	f000 f9e5 	bl	800c0c0 <_lseek_r>
 800bcf6:	1c43      	adds	r3, r0, #1
 800bcf8:	89a3      	ldrh	r3, [r4, #12]
 800bcfa:	bf15      	itete	ne
 800bcfc:	6560      	strne	r0, [r4, #84]	; 0x54
 800bcfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd06:	81a3      	strheq	r3, [r4, #12]
 800bd08:	bf18      	it	ne
 800bd0a:	81a3      	strhne	r3, [r4, #12]
 800bd0c:	bd10      	pop	{r4, pc}

0800bd0e <__sclose>:
 800bd0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd12:	f000 b8f1 	b.w	800bef8 <_close_r>
	...

0800bd18 <__swbuf_r>:
 800bd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd1a:	460e      	mov	r6, r1
 800bd1c:	4614      	mov	r4, r2
 800bd1e:	4605      	mov	r5, r0
 800bd20:	b118      	cbz	r0, 800bd2a <__swbuf_r+0x12>
 800bd22:	6983      	ldr	r3, [r0, #24]
 800bd24:	b90b      	cbnz	r3, 800bd2a <__swbuf_r+0x12>
 800bd26:	f7ff f921 	bl	800af6c <__sinit>
 800bd2a:	4b21      	ldr	r3, [pc, #132]	; (800bdb0 <__swbuf_r+0x98>)
 800bd2c:	429c      	cmp	r4, r3
 800bd2e:	d12b      	bne.n	800bd88 <__swbuf_r+0x70>
 800bd30:	686c      	ldr	r4, [r5, #4]
 800bd32:	69a3      	ldr	r3, [r4, #24]
 800bd34:	60a3      	str	r3, [r4, #8]
 800bd36:	89a3      	ldrh	r3, [r4, #12]
 800bd38:	071a      	lsls	r2, r3, #28
 800bd3a:	d52f      	bpl.n	800bd9c <__swbuf_r+0x84>
 800bd3c:	6923      	ldr	r3, [r4, #16]
 800bd3e:	b36b      	cbz	r3, 800bd9c <__swbuf_r+0x84>
 800bd40:	6923      	ldr	r3, [r4, #16]
 800bd42:	6820      	ldr	r0, [r4, #0]
 800bd44:	1ac0      	subs	r0, r0, r3
 800bd46:	6963      	ldr	r3, [r4, #20]
 800bd48:	b2f6      	uxtb	r6, r6
 800bd4a:	4283      	cmp	r3, r0
 800bd4c:	4637      	mov	r7, r6
 800bd4e:	dc04      	bgt.n	800bd5a <__swbuf_r+0x42>
 800bd50:	4621      	mov	r1, r4
 800bd52:	4628      	mov	r0, r5
 800bd54:	f000 f966 	bl	800c024 <_fflush_r>
 800bd58:	bb30      	cbnz	r0, 800bda8 <__swbuf_r+0x90>
 800bd5a:	68a3      	ldr	r3, [r4, #8]
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	60a3      	str	r3, [r4, #8]
 800bd60:	6823      	ldr	r3, [r4, #0]
 800bd62:	1c5a      	adds	r2, r3, #1
 800bd64:	6022      	str	r2, [r4, #0]
 800bd66:	701e      	strb	r6, [r3, #0]
 800bd68:	6963      	ldr	r3, [r4, #20]
 800bd6a:	3001      	adds	r0, #1
 800bd6c:	4283      	cmp	r3, r0
 800bd6e:	d004      	beq.n	800bd7a <__swbuf_r+0x62>
 800bd70:	89a3      	ldrh	r3, [r4, #12]
 800bd72:	07db      	lsls	r3, r3, #31
 800bd74:	d506      	bpl.n	800bd84 <__swbuf_r+0x6c>
 800bd76:	2e0a      	cmp	r6, #10
 800bd78:	d104      	bne.n	800bd84 <__swbuf_r+0x6c>
 800bd7a:	4621      	mov	r1, r4
 800bd7c:	4628      	mov	r0, r5
 800bd7e:	f000 f951 	bl	800c024 <_fflush_r>
 800bd82:	b988      	cbnz	r0, 800bda8 <__swbuf_r+0x90>
 800bd84:	4638      	mov	r0, r7
 800bd86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd88:	4b0a      	ldr	r3, [pc, #40]	; (800bdb4 <__swbuf_r+0x9c>)
 800bd8a:	429c      	cmp	r4, r3
 800bd8c:	d101      	bne.n	800bd92 <__swbuf_r+0x7a>
 800bd8e:	68ac      	ldr	r4, [r5, #8]
 800bd90:	e7cf      	b.n	800bd32 <__swbuf_r+0x1a>
 800bd92:	4b09      	ldr	r3, [pc, #36]	; (800bdb8 <__swbuf_r+0xa0>)
 800bd94:	429c      	cmp	r4, r3
 800bd96:	bf08      	it	eq
 800bd98:	68ec      	ldreq	r4, [r5, #12]
 800bd9a:	e7ca      	b.n	800bd32 <__swbuf_r+0x1a>
 800bd9c:	4621      	mov	r1, r4
 800bd9e:	4628      	mov	r0, r5
 800bda0:	f000 f81e 	bl	800bde0 <__swsetup_r>
 800bda4:	2800      	cmp	r0, #0
 800bda6:	d0cb      	beq.n	800bd40 <__swbuf_r+0x28>
 800bda8:	f04f 37ff 	mov.w	r7, #4294967295
 800bdac:	e7ea      	b.n	800bd84 <__swbuf_r+0x6c>
 800bdae:	bf00      	nop
 800bdb0:	0800c4f8 	.word	0x0800c4f8
 800bdb4:	0800c518 	.word	0x0800c518
 800bdb8:	0800c4d8 	.word	0x0800c4d8

0800bdbc <_write_r>:
 800bdbc:	b538      	push	{r3, r4, r5, lr}
 800bdbe:	4d07      	ldr	r5, [pc, #28]	; (800bddc <_write_r+0x20>)
 800bdc0:	4604      	mov	r4, r0
 800bdc2:	4608      	mov	r0, r1
 800bdc4:	4611      	mov	r1, r2
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	602a      	str	r2, [r5, #0]
 800bdca:	461a      	mov	r2, r3
 800bdcc:	f7f4 fdd0 	bl	8000970 <_write>
 800bdd0:	1c43      	adds	r3, r0, #1
 800bdd2:	d102      	bne.n	800bdda <_write_r+0x1e>
 800bdd4:	682b      	ldr	r3, [r5, #0]
 800bdd6:	b103      	cbz	r3, 800bdda <_write_r+0x1e>
 800bdd8:	6023      	str	r3, [r4, #0]
 800bdda:	bd38      	pop	{r3, r4, r5, pc}
 800bddc:	240004bc 	.word	0x240004bc

0800bde0 <__swsetup_r>:
 800bde0:	4b32      	ldr	r3, [pc, #200]	; (800beac <__swsetup_r+0xcc>)
 800bde2:	b570      	push	{r4, r5, r6, lr}
 800bde4:	681d      	ldr	r5, [r3, #0]
 800bde6:	4606      	mov	r6, r0
 800bde8:	460c      	mov	r4, r1
 800bdea:	b125      	cbz	r5, 800bdf6 <__swsetup_r+0x16>
 800bdec:	69ab      	ldr	r3, [r5, #24]
 800bdee:	b913      	cbnz	r3, 800bdf6 <__swsetup_r+0x16>
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	f7ff f8bb 	bl	800af6c <__sinit>
 800bdf6:	4b2e      	ldr	r3, [pc, #184]	; (800beb0 <__swsetup_r+0xd0>)
 800bdf8:	429c      	cmp	r4, r3
 800bdfa:	d10f      	bne.n	800be1c <__swsetup_r+0x3c>
 800bdfc:	686c      	ldr	r4, [r5, #4]
 800bdfe:	89a3      	ldrh	r3, [r4, #12]
 800be00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be04:	0719      	lsls	r1, r3, #28
 800be06:	d42c      	bmi.n	800be62 <__swsetup_r+0x82>
 800be08:	06dd      	lsls	r5, r3, #27
 800be0a:	d411      	bmi.n	800be30 <__swsetup_r+0x50>
 800be0c:	2309      	movs	r3, #9
 800be0e:	6033      	str	r3, [r6, #0]
 800be10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800be14:	81a3      	strh	r3, [r4, #12]
 800be16:	f04f 30ff 	mov.w	r0, #4294967295
 800be1a:	e03e      	b.n	800be9a <__swsetup_r+0xba>
 800be1c:	4b25      	ldr	r3, [pc, #148]	; (800beb4 <__swsetup_r+0xd4>)
 800be1e:	429c      	cmp	r4, r3
 800be20:	d101      	bne.n	800be26 <__swsetup_r+0x46>
 800be22:	68ac      	ldr	r4, [r5, #8]
 800be24:	e7eb      	b.n	800bdfe <__swsetup_r+0x1e>
 800be26:	4b24      	ldr	r3, [pc, #144]	; (800beb8 <__swsetup_r+0xd8>)
 800be28:	429c      	cmp	r4, r3
 800be2a:	bf08      	it	eq
 800be2c:	68ec      	ldreq	r4, [r5, #12]
 800be2e:	e7e6      	b.n	800bdfe <__swsetup_r+0x1e>
 800be30:	0758      	lsls	r0, r3, #29
 800be32:	d512      	bpl.n	800be5a <__swsetup_r+0x7a>
 800be34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be36:	b141      	cbz	r1, 800be4a <__swsetup_r+0x6a>
 800be38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be3c:	4299      	cmp	r1, r3
 800be3e:	d002      	beq.n	800be46 <__swsetup_r+0x66>
 800be40:	4630      	mov	r0, r6
 800be42:	f7ff fcdb 	bl	800b7fc <_free_r>
 800be46:	2300      	movs	r3, #0
 800be48:	6363      	str	r3, [r4, #52]	; 0x34
 800be4a:	89a3      	ldrh	r3, [r4, #12]
 800be4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800be50:	81a3      	strh	r3, [r4, #12]
 800be52:	2300      	movs	r3, #0
 800be54:	6063      	str	r3, [r4, #4]
 800be56:	6923      	ldr	r3, [r4, #16]
 800be58:	6023      	str	r3, [r4, #0]
 800be5a:	89a3      	ldrh	r3, [r4, #12]
 800be5c:	f043 0308 	orr.w	r3, r3, #8
 800be60:	81a3      	strh	r3, [r4, #12]
 800be62:	6923      	ldr	r3, [r4, #16]
 800be64:	b94b      	cbnz	r3, 800be7a <__swsetup_r+0x9a>
 800be66:	89a3      	ldrh	r3, [r4, #12]
 800be68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800be6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be70:	d003      	beq.n	800be7a <__swsetup_r+0x9a>
 800be72:	4621      	mov	r1, r4
 800be74:	4630      	mov	r0, r6
 800be76:	f000 f95b 	bl	800c130 <__smakebuf_r>
 800be7a:	89a0      	ldrh	r0, [r4, #12]
 800be7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800be80:	f010 0301 	ands.w	r3, r0, #1
 800be84:	d00a      	beq.n	800be9c <__swsetup_r+0xbc>
 800be86:	2300      	movs	r3, #0
 800be88:	60a3      	str	r3, [r4, #8]
 800be8a:	6963      	ldr	r3, [r4, #20]
 800be8c:	425b      	negs	r3, r3
 800be8e:	61a3      	str	r3, [r4, #24]
 800be90:	6923      	ldr	r3, [r4, #16]
 800be92:	b943      	cbnz	r3, 800bea6 <__swsetup_r+0xc6>
 800be94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800be98:	d1ba      	bne.n	800be10 <__swsetup_r+0x30>
 800be9a:	bd70      	pop	{r4, r5, r6, pc}
 800be9c:	0781      	lsls	r1, r0, #30
 800be9e:	bf58      	it	pl
 800bea0:	6963      	ldrpl	r3, [r4, #20]
 800bea2:	60a3      	str	r3, [r4, #8]
 800bea4:	e7f4      	b.n	800be90 <__swsetup_r+0xb0>
 800bea6:	2000      	movs	r0, #0
 800bea8:	e7f7      	b.n	800be9a <__swsetup_r+0xba>
 800beaa:	bf00      	nop
 800beac:	24000018 	.word	0x24000018
 800beb0:	0800c4f8 	.word	0x0800c4f8
 800beb4:	0800c518 	.word	0x0800c518
 800beb8:	0800c4d8 	.word	0x0800c4d8

0800bebc <__assert_func>:
 800bebc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bebe:	4614      	mov	r4, r2
 800bec0:	461a      	mov	r2, r3
 800bec2:	4b09      	ldr	r3, [pc, #36]	; (800bee8 <__assert_func+0x2c>)
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	4605      	mov	r5, r0
 800bec8:	68d8      	ldr	r0, [r3, #12]
 800beca:	b14c      	cbz	r4, 800bee0 <__assert_func+0x24>
 800becc:	4b07      	ldr	r3, [pc, #28]	; (800beec <__assert_func+0x30>)
 800bece:	9100      	str	r1, [sp, #0]
 800bed0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bed4:	4906      	ldr	r1, [pc, #24]	; (800bef0 <__assert_func+0x34>)
 800bed6:	462b      	mov	r3, r5
 800bed8:	f000 f8e0 	bl	800c09c <fiprintf>
 800bedc:	f000 f9a5 	bl	800c22a <abort>
 800bee0:	4b04      	ldr	r3, [pc, #16]	; (800bef4 <__assert_func+0x38>)
 800bee2:	461c      	mov	r4, r3
 800bee4:	e7f3      	b.n	800bece <__assert_func+0x12>
 800bee6:	bf00      	nop
 800bee8:	24000018 	.word	0x24000018
 800beec:	0800c6a5 	.word	0x0800c6a5
 800bef0:	0800c6b2 	.word	0x0800c6b2
 800bef4:	0800c6e0 	.word	0x0800c6e0

0800bef8 <_close_r>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	4d06      	ldr	r5, [pc, #24]	; (800bf14 <_close_r+0x1c>)
 800befc:	2300      	movs	r3, #0
 800befe:	4604      	mov	r4, r0
 800bf00:	4608      	mov	r0, r1
 800bf02:	602b      	str	r3, [r5, #0]
 800bf04:	f7f5 fbd9 	bl	80016ba <_close>
 800bf08:	1c43      	adds	r3, r0, #1
 800bf0a:	d102      	bne.n	800bf12 <_close_r+0x1a>
 800bf0c:	682b      	ldr	r3, [r5, #0]
 800bf0e:	b103      	cbz	r3, 800bf12 <_close_r+0x1a>
 800bf10:	6023      	str	r3, [r4, #0]
 800bf12:	bd38      	pop	{r3, r4, r5, pc}
 800bf14:	240004bc 	.word	0x240004bc

0800bf18 <__sflush_r>:
 800bf18:	898a      	ldrh	r2, [r1, #12]
 800bf1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf1e:	4605      	mov	r5, r0
 800bf20:	0710      	lsls	r0, r2, #28
 800bf22:	460c      	mov	r4, r1
 800bf24:	d458      	bmi.n	800bfd8 <__sflush_r+0xc0>
 800bf26:	684b      	ldr	r3, [r1, #4]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	dc05      	bgt.n	800bf38 <__sflush_r+0x20>
 800bf2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	dc02      	bgt.n	800bf38 <__sflush_r+0x20>
 800bf32:	2000      	movs	r0, #0
 800bf34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf3a:	2e00      	cmp	r6, #0
 800bf3c:	d0f9      	beq.n	800bf32 <__sflush_r+0x1a>
 800bf3e:	2300      	movs	r3, #0
 800bf40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf44:	682f      	ldr	r7, [r5, #0]
 800bf46:	602b      	str	r3, [r5, #0]
 800bf48:	d032      	beq.n	800bfb0 <__sflush_r+0x98>
 800bf4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	075a      	lsls	r2, r3, #29
 800bf50:	d505      	bpl.n	800bf5e <__sflush_r+0x46>
 800bf52:	6863      	ldr	r3, [r4, #4]
 800bf54:	1ac0      	subs	r0, r0, r3
 800bf56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf58:	b10b      	cbz	r3, 800bf5e <__sflush_r+0x46>
 800bf5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf5c:	1ac0      	subs	r0, r0, r3
 800bf5e:	2300      	movs	r3, #0
 800bf60:	4602      	mov	r2, r0
 800bf62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf64:	6a21      	ldr	r1, [r4, #32]
 800bf66:	4628      	mov	r0, r5
 800bf68:	47b0      	blx	r6
 800bf6a:	1c43      	adds	r3, r0, #1
 800bf6c:	89a3      	ldrh	r3, [r4, #12]
 800bf6e:	d106      	bne.n	800bf7e <__sflush_r+0x66>
 800bf70:	6829      	ldr	r1, [r5, #0]
 800bf72:	291d      	cmp	r1, #29
 800bf74:	d82c      	bhi.n	800bfd0 <__sflush_r+0xb8>
 800bf76:	4a2a      	ldr	r2, [pc, #168]	; (800c020 <__sflush_r+0x108>)
 800bf78:	40ca      	lsrs	r2, r1
 800bf7a:	07d6      	lsls	r6, r2, #31
 800bf7c:	d528      	bpl.n	800bfd0 <__sflush_r+0xb8>
 800bf7e:	2200      	movs	r2, #0
 800bf80:	6062      	str	r2, [r4, #4]
 800bf82:	04d9      	lsls	r1, r3, #19
 800bf84:	6922      	ldr	r2, [r4, #16]
 800bf86:	6022      	str	r2, [r4, #0]
 800bf88:	d504      	bpl.n	800bf94 <__sflush_r+0x7c>
 800bf8a:	1c42      	adds	r2, r0, #1
 800bf8c:	d101      	bne.n	800bf92 <__sflush_r+0x7a>
 800bf8e:	682b      	ldr	r3, [r5, #0]
 800bf90:	b903      	cbnz	r3, 800bf94 <__sflush_r+0x7c>
 800bf92:	6560      	str	r0, [r4, #84]	; 0x54
 800bf94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf96:	602f      	str	r7, [r5, #0]
 800bf98:	2900      	cmp	r1, #0
 800bf9a:	d0ca      	beq.n	800bf32 <__sflush_r+0x1a>
 800bf9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfa0:	4299      	cmp	r1, r3
 800bfa2:	d002      	beq.n	800bfaa <__sflush_r+0x92>
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	f7ff fc29 	bl	800b7fc <_free_r>
 800bfaa:	2000      	movs	r0, #0
 800bfac:	6360      	str	r0, [r4, #52]	; 0x34
 800bfae:	e7c1      	b.n	800bf34 <__sflush_r+0x1c>
 800bfb0:	6a21      	ldr	r1, [r4, #32]
 800bfb2:	2301      	movs	r3, #1
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	47b0      	blx	r6
 800bfb8:	1c41      	adds	r1, r0, #1
 800bfba:	d1c7      	bne.n	800bf4c <__sflush_r+0x34>
 800bfbc:	682b      	ldr	r3, [r5, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d0c4      	beq.n	800bf4c <__sflush_r+0x34>
 800bfc2:	2b1d      	cmp	r3, #29
 800bfc4:	d001      	beq.n	800bfca <__sflush_r+0xb2>
 800bfc6:	2b16      	cmp	r3, #22
 800bfc8:	d101      	bne.n	800bfce <__sflush_r+0xb6>
 800bfca:	602f      	str	r7, [r5, #0]
 800bfcc:	e7b1      	b.n	800bf32 <__sflush_r+0x1a>
 800bfce:	89a3      	ldrh	r3, [r4, #12]
 800bfd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfd4:	81a3      	strh	r3, [r4, #12]
 800bfd6:	e7ad      	b.n	800bf34 <__sflush_r+0x1c>
 800bfd8:	690f      	ldr	r7, [r1, #16]
 800bfda:	2f00      	cmp	r7, #0
 800bfdc:	d0a9      	beq.n	800bf32 <__sflush_r+0x1a>
 800bfde:	0793      	lsls	r3, r2, #30
 800bfe0:	680e      	ldr	r6, [r1, #0]
 800bfe2:	bf08      	it	eq
 800bfe4:	694b      	ldreq	r3, [r1, #20]
 800bfe6:	600f      	str	r7, [r1, #0]
 800bfe8:	bf18      	it	ne
 800bfea:	2300      	movne	r3, #0
 800bfec:	eba6 0807 	sub.w	r8, r6, r7
 800bff0:	608b      	str	r3, [r1, #8]
 800bff2:	f1b8 0f00 	cmp.w	r8, #0
 800bff6:	dd9c      	ble.n	800bf32 <__sflush_r+0x1a>
 800bff8:	6a21      	ldr	r1, [r4, #32]
 800bffa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bffc:	4643      	mov	r3, r8
 800bffe:	463a      	mov	r2, r7
 800c000:	4628      	mov	r0, r5
 800c002:	47b0      	blx	r6
 800c004:	2800      	cmp	r0, #0
 800c006:	dc06      	bgt.n	800c016 <__sflush_r+0xfe>
 800c008:	89a3      	ldrh	r3, [r4, #12]
 800c00a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c00e:	81a3      	strh	r3, [r4, #12]
 800c010:	f04f 30ff 	mov.w	r0, #4294967295
 800c014:	e78e      	b.n	800bf34 <__sflush_r+0x1c>
 800c016:	4407      	add	r7, r0
 800c018:	eba8 0800 	sub.w	r8, r8, r0
 800c01c:	e7e9      	b.n	800bff2 <__sflush_r+0xda>
 800c01e:	bf00      	nop
 800c020:	20400001 	.word	0x20400001

0800c024 <_fflush_r>:
 800c024:	b538      	push	{r3, r4, r5, lr}
 800c026:	690b      	ldr	r3, [r1, #16]
 800c028:	4605      	mov	r5, r0
 800c02a:	460c      	mov	r4, r1
 800c02c:	b913      	cbnz	r3, 800c034 <_fflush_r+0x10>
 800c02e:	2500      	movs	r5, #0
 800c030:	4628      	mov	r0, r5
 800c032:	bd38      	pop	{r3, r4, r5, pc}
 800c034:	b118      	cbz	r0, 800c03e <_fflush_r+0x1a>
 800c036:	6983      	ldr	r3, [r0, #24]
 800c038:	b90b      	cbnz	r3, 800c03e <_fflush_r+0x1a>
 800c03a:	f7fe ff97 	bl	800af6c <__sinit>
 800c03e:	4b14      	ldr	r3, [pc, #80]	; (800c090 <_fflush_r+0x6c>)
 800c040:	429c      	cmp	r4, r3
 800c042:	d11b      	bne.n	800c07c <_fflush_r+0x58>
 800c044:	686c      	ldr	r4, [r5, #4]
 800c046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d0ef      	beq.n	800c02e <_fflush_r+0xa>
 800c04e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c050:	07d0      	lsls	r0, r2, #31
 800c052:	d404      	bmi.n	800c05e <_fflush_r+0x3a>
 800c054:	0599      	lsls	r1, r3, #22
 800c056:	d402      	bmi.n	800c05e <_fflush_r+0x3a>
 800c058:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c05a:	f7ff f82a 	bl	800b0b2 <__retarget_lock_acquire_recursive>
 800c05e:	4628      	mov	r0, r5
 800c060:	4621      	mov	r1, r4
 800c062:	f7ff ff59 	bl	800bf18 <__sflush_r>
 800c066:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c068:	07da      	lsls	r2, r3, #31
 800c06a:	4605      	mov	r5, r0
 800c06c:	d4e0      	bmi.n	800c030 <_fflush_r+0xc>
 800c06e:	89a3      	ldrh	r3, [r4, #12]
 800c070:	059b      	lsls	r3, r3, #22
 800c072:	d4dd      	bmi.n	800c030 <_fflush_r+0xc>
 800c074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c076:	f7ff f81d 	bl	800b0b4 <__retarget_lock_release_recursive>
 800c07a:	e7d9      	b.n	800c030 <_fflush_r+0xc>
 800c07c:	4b05      	ldr	r3, [pc, #20]	; (800c094 <_fflush_r+0x70>)
 800c07e:	429c      	cmp	r4, r3
 800c080:	d101      	bne.n	800c086 <_fflush_r+0x62>
 800c082:	68ac      	ldr	r4, [r5, #8]
 800c084:	e7df      	b.n	800c046 <_fflush_r+0x22>
 800c086:	4b04      	ldr	r3, [pc, #16]	; (800c098 <_fflush_r+0x74>)
 800c088:	429c      	cmp	r4, r3
 800c08a:	bf08      	it	eq
 800c08c:	68ec      	ldreq	r4, [r5, #12]
 800c08e:	e7da      	b.n	800c046 <_fflush_r+0x22>
 800c090:	0800c4f8 	.word	0x0800c4f8
 800c094:	0800c518 	.word	0x0800c518
 800c098:	0800c4d8 	.word	0x0800c4d8

0800c09c <fiprintf>:
 800c09c:	b40e      	push	{r1, r2, r3}
 800c09e:	b503      	push	{r0, r1, lr}
 800c0a0:	4601      	mov	r1, r0
 800c0a2:	ab03      	add	r3, sp, #12
 800c0a4:	4805      	ldr	r0, [pc, #20]	; (800c0bc <fiprintf+0x20>)
 800c0a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0aa:	6800      	ldr	r0, [r0, #0]
 800c0ac:	9301      	str	r3, [sp, #4]
 800c0ae:	f7ff fcaf 	bl	800ba10 <_vfiprintf_r>
 800c0b2:	b002      	add	sp, #8
 800c0b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0b8:	b003      	add	sp, #12
 800c0ba:	4770      	bx	lr
 800c0bc:	24000018 	.word	0x24000018

0800c0c0 <_lseek_r>:
 800c0c0:	b538      	push	{r3, r4, r5, lr}
 800c0c2:	4d07      	ldr	r5, [pc, #28]	; (800c0e0 <_lseek_r+0x20>)
 800c0c4:	4604      	mov	r4, r0
 800c0c6:	4608      	mov	r0, r1
 800c0c8:	4611      	mov	r1, r2
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	602a      	str	r2, [r5, #0]
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	f7f5 fb1a 	bl	8001708 <_lseek>
 800c0d4:	1c43      	adds	r3, r0, #1
 800c0d6:	d102      	bne.n	800c0de <_lseek_r+0x1e>
 800c0d8:	682b      	ldr	r3, [r5, #0]
 800c0da:	b103      	cbz	r3, 800c0de <_lseek_r+0x1e>
 800c0dc:	6023      	str	r3, [r4, #0]
 800c0de:	bd38      	pop	{r3, r4, r5, pc}
 800c0e0:	240004bc 	.word	0x240004bc

0800c0e4 <__swhatbuf_r>:
 800c0e4:	b570      	push	{r4, r5, r6, lr}
 800c0e6:	460e      	mov	r6, r1
 800c0e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0ec:	2900      	cmp	r1, #0
 800c0ee:	b096      	sub	sp, #88	; 0x58
 800c0f0:	4614      	mov	r4, r2
 800c0f2:	461d      	mov	r5, r3
 800c0f4:	da08      	bge.n	800c108 <__swhatbuf_r+0x24>
 800c0f6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	602a      	str	r2, [r5, #0]
 800c0fe:	061a      	lsls	r2, r3, #24
 800c100:	d410      	bmi.n	800c124 <__swhatbuf_r+0x40>
 800c102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c106:	e00e      	b.n	800c126 <__swhatbuf_r+0x42>
 800c108:	466a      	mov	r2, sp
 800c10a:	f000 f895 	bl	800c238 <_fstat_r>
 800c10e:	2800      	cmp	r0, #0
 800c110:	dbf1      	blt.n	800c0f6 <__swhatbuf_r+0x12>
 800c112:	9a01      	ldr	r2, [sp, #4]
 800c114:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c118:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c11c:	425a      	negs	r2, r3
 800c11e:	415a      	adcs	r2, r3
 800c120:	602a      	str	r2, [r5, #0]
 800c122:	e7ee      	b.n	800c102 <__swhatbuf_r+0x1e>
 800c124:	2340      	movs	r3, #64	; 0x40
 800c126:	2000      	movs	r0, #0
 800c128:	6023      	str	r3, [r4, #0]
 800c12a:	b016      	add	sp, #88	; 0x58
 800c12c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c130 <__smakebuf_r>:
 800c130:	898b      	ldrh	r3, [r1, #12]
 800c132:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c134:	079d      	lsls	r5, r3, #30
 800c136:	4606      	mov	r6, r0
 800c138:	460c      	mov	r4, r1
 800c13a:	d507      	bpl.n	800c14c <__smakebuf_r+0x1c>
 800c13c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c140:	6023      	str	r3, [r4, #0]
 800c142:	6123      	str	r3, [r4, #16]
 800c144:	2301      	movs	r3, #1
 800c146:	6163      	str	r3, [r4, #20]
 800c148:	b002      	add	sp, #8
 800c14a:	bd70      	pop	{r4, r5, r6, pc}
 800c14c:	ab01      	add	r3, sp, #4
 800c14e:	466a      	mov	r2, sp
 800c150:	f7ff ffc8 	bl	800c0e4 <__swhatbuf_r>
 800c154:	9900      	ldr	r1, [sp, #0]
 800c156:	4605      	mov	r5, r0
 800c158:	4630      	mov	r0, r6
 800c15a:	f7ff fbbb 	bl	800b8d4 <_malloc_r>
 800c15e:	b948      	cbnz	r0, 800c174 <__smakebuf_r+0x44>
 800c160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c164:	059a      	lsls	r2, r3, #22
 800c166:	d4ef      	bmi.n	800c148 <__smakebuf_r+0x18>
 800c168:	f023 0303 	bic.w	r3, r3, #3
 800c16c:	f043 0302 	orr.w	r3, r3, #2
 800c170:	81a3      	strh	r3, [r4, #12]
 800c172:	e7e3      	b.n	800c13c <__smakebuf_r+0xc>
 800c174:	4b0d      	ldr	r3, [pc, #52]	; (800c1ac <__smakebuf_r+0x7c>)
 800c176:	62b3      	str	r3, [r6, #40]	; 0x28
 800c178:	89a3      	ldrh	r3, [r4, #12]
 800c17a:	6020      	str	r0, [r4, #0]
 800c17c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c180:	81a3      	strh	r3, [r4, #12]
 800c182:	9b00      	ldr	r3, [sp, #0]
 800c184:	6163      	str	r3, [r4, #20]
 800c186:	9b01      	ldr	r3, [sp, #4]
 800c188:	6120      	str	r0, [r4, #16]
 800c18a:	b15b      	cbz	r3, 800c1a4 <__smakebuf_r+0x74>
 800c18c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c190:	4630      	mov	r0, r6
 800c192:	f000 f863 	bl	800c25c <_isatty_r>
 800c196:	b128      	cbz	r0, 800c1a4 <__smakebuf_r+0x74>
 800c198:	89a3      	ldrh	r3, [r4, #12]
 800c19a:	f023 0303 	bic.w	r3, r3, #3
 800c19e:	f043 0301 	orr.w	r3, r3, #1
 800c1a2:	81a3      	strh	r3, [r4, #12]
 800c1a4:	89a0      	ldrh	r0, [r4, #12]
 800c1a6:	4305      	orrs	r5, r0
 800c1a8:	81a5      	strh	r5, [r4, #12]
 800c1aa:	e7cd      	b.n	800c148 <__smakebuf_r+0x18>
 800c1ac:	0800af05 	.word	0x0800af05

0800c1b0 <__ascii_mbtowc>:
 800c1b0:	b082      	sub	sp, #8
 800c1b2:	b901      	cbnz	r1, 800c1b6 <__ascii_mbtowc+0x6>
 800c1b4:	a901      	add	r1, sp, #4
 800c1b6:	b142      	cbz	r2, 800c1ca <__ascii_mbtowc+0x1a>
 800c1b8:	b14b      	cbz	r3, 800c1ce <__ascii_mbtowc+0x1e>
 800c1ba:	7813      	ldrb	r3, [r2, #0]
 800c1bc:	600b      	str	r3, [r1, #0]
 800c1be:	7812      	ldrb	r2, [r2, #0]
 800c1c0:	1e10      	subs	r0, r2, #0
 800c1c2:	bf18      	it	ne
 800c1c4:	2001      	movne	r0, #1
 800c1c6:	b002      	add	sp, #8
 800c1c8:	4770      	bx	lr
 800c1ca:	4610      	mov	r0, r2
 800c1cc:	e7fb      	b.n	800c1c6 <__ascii_mbtowc+0x16>
 800c1ce:	f06f 0001 	mvn.w	r0, #1
 800c1d2:	e7f8      	b.n	800c1c6 <__ascii_mbtowc+0x16>

0800c1d4 <__malloc_lock>:
 800c1d4:	4801      	ldr	r0, [pc, #4]	; (800c1dc <__malloc_lock+0x8>)
 800c1d6:	f7fe bf6c 	b.w	800b0b2 <__retarget_lock_acquire_recursive>
 800c1da:	bf00      	nop
 800c1dc:	240004b0 	.word	0x240004b0

0800c1e0 <__malloc_unlock>:
 800c1e0:	4801      	ldr	r0, [pc, #4]	; (800c1e8 <__malloc_unlock+0x8>)
 800c1e2:	f7fe bf67 	b.w	800b0b4 <__retarget_lock_release_recursive>
 800c1e6:	bf00      	nop
 800c1e8:	240004b0 	.word	0x240004b0

0800c1ec <_read_r>:
 800c1ec:	b538      	push	{r3, r4, r5, lr}
 800c1ee:	4d07      	ldr	r5, [pc, #28]	; (800c20c <_read_r+0x20>)
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	4608      	mov	r0, r1
 800c1f4:	4611      	mov	r1, r2
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	602a      	str	r2, [r5, #0]
 800c1fa:	461a      	mov	r2, r3
 800c1fc:	f7f5 fa40 	bl	8001680 <_read>
 800c200:	1c43      	adds	r3, r0, #1
 800c202:	d102      	bne.n	800c20a <_read_r+0x1e>
 800c204:	682b      	ldr	r3, [r5, #0]
 800c206:	b103      	cbz	r3, 800c20a <_read_r+0x1e>
 800c208:	6023      	str	r3, [r4, #0]
 800c20a:	bd38      	pop	{r3, r4, r5, pc}
 800c20c:	240004bc 	.word	0x240004bc

0800c210 <__ascii_wctomb>:
 800c210:	b149      	cbz	r1, 800c226 <__ascii_wctomb+0x16>
 800c212:	2aff      	cmp	r2, #255	; 0xff
 800c214:	bf85      	ittet	hi
 800c216:	238a      	movhi	r3, #138	; 0x8a
 800c218:	6003      	strhi	r3, [r0, #0]
 800c21a:	700a      	strbls	r2, [r1, #0]
 800c21c:	f04f 30ff 	movhi.w	r0, #4294967295
 800c220:	bf98      	it	ls
 800c222:	2001      	movls	r0, #1
 800c224:	4770      	bx	lr
 800c226:	4608      	mov	r0, r1
 800c228:	4770      	bx	lr

0800c22a <abort>:
 800c22a:	b508      	push	{r3, lr}
 800c22c:	2006      	movs	r0, #6
 800c22e:	f000 f84d 	bl	800c2cc <raise>
 800c232:	2001      	movs	r0, #1
 800c234:	f7f5 fa1a 	bl	800166c <_exit>

0800c238 <_fstat_r>:
 800c238:	b538      	push	{r3, r4, r5, lr}
 800c23a:	4d07      	ldr	r5, [pc, #28]	; (800c258 <_fstat_r+0x20>)
 800c23c:	2300      	movs	r3, #0
 800c23e:	4604      	mov	r4, r0
 800c240:	4608      	mov	r0, r1
 800c242:	4611      	mov	r1, r2
 800c244:	602b      	str	r3, [r5, #0]
 800c246:	f7f5 fa44 	bl	80016d2 <_fstat>
 800c24a:	1c43      	adds	r3, r0, #1
 800c24c:	d102      	bne.n	800c254 <_fstat_r+0x1c>
 800c24e:	682b      	ldr	r3, [r5, #0]
 800c250:	b103      	cbz	r3, 800c254 <_fstat_r+0x1c>
 800c252:	6023      	str	r3, [r4, #0]
 800c254:	bd38      	pop	{r3, r4, r5, pc}
 800c256:	bf00      	nop
 800c258:	240004bc 	.word	0x240004bc

0800c25c <_isatty_r>:
 800c25c:	b538      	push	{r3, r4, r5, lr}
 800c25e:	4d06      	ldr	r5, [pc, #24]	; (800c278 <_isatty_r+0x1c>)
 800c260:	2300      	movs	r3, #0
 800c262:	4604      	mov	r4, r0
 800c264:	4608      	mov	r0, r1
 800c266:	602b      	str	r3, [r5, #0]
 800c268:	f7f5 fa43 	bl	80016f2 <_isatty>
 800c26c:	1c43      	adds	r3, r0, #1
 800c26e:	d102      	bne.n	800c276 <_isatty_r+0x1a>
 800c270:	682b      	ldr	r3, [r5, #0]
 800c272:	b103      	cbz	r3, 800c276 <_isatty_r+0x1a>
 800c274:	6023      	str	r3, [r4, #0]
 800c276:	bd38      	pop	{r3, r4, r5, pc}
 800c278:	240004bc 	.word	0x240004bc

0800c27c <_raise_r>:
 800c27c:	291f      	cmp	r1, #31
 800c27e:	b538      	push	{r3, r4, r5, lr}
 800c280:	4604      	mov	r4, r0
 800c282:	460d      	mov	r5, r1
 800c284:	d904      	bls.n	800c290 <_raise_r+0x14>
 800c286:	2316      	movs	r3, #22
 800c288:	6003      	str	r3, [r0, #0]
 800c28a:	f04f 30ff 	mov.w	r0, #4294967295
 800c28e:	bd38      	pop	{r3, r4, r5, pc}
 800c290:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c292:	b112      	cbz	r2, 800c29a <_raise_r+0x1e>
 800c294:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c298:	b94b      	cbnz	r3, 800c2ae <_raise_r+0x32>
 800c29a:	4620      	mov	r0, r4
 800c29c:	f000 f830 	bl	800c300 <_getpid_r>
 800c2a0:	462a      	mov	r2, r5
 800c2a2:	4601      	mov	r1, r0
 800c2a4:	4620      	mov	r0, r4
 800c2a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2aa:	f000 b817 	b.w	800c2dc <_kill_r>
 800c2ae:	2b01      	cmp	r3, #1
 800c2b0:	d00a      	beq.n	800c2c8 <_raise_r+0x4c>
 800c2b2:	1c59      	adds	r1, r3, #1
 800c2b4:	d103      	bne.n	800c2be <_raise_r+0x42>
 800c2b6:	2316      	movs	r3, #22
 800c2b8:	6003      	str	r3, [r0, #0]
 800c2ba:	2001      	movs	r0, #1
 800c2bc:	e7e7      	b.n	800c28e <_raise_r+0x12>
 800c2be:	2400      	movs	r4, #0
 800c2c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c2c4:	4628      	mov	r0, r5
 800c2c6:	4798      	blx	r3
 800c2c8:	2000      	movs	r0, #0
 800c2ca:	e7e0      	b.n	800c28e <_raise_r+0x12>

0800c2cc <raise>:
 800c2cc:	4b02      	ldr	r3, [pc, #8]	; (800c2d8 <raise+0xc>)
 800c2ce:	4601      	mov	r1, r0
 800c2d0:	6818      	ldr	r0, [r3, #0]
 800c2d2:	f7ff bfd3 	b.w	800c27c <_raise_r>
 800c2d6:	bf00      	nop
 800c2d8:	24000018 	.word	0x24000018

0800c2dc <_kill_r>:
 800c2dc:	b538      	push	{r3, r4, r5, lr}
 800c2de:	4d07      	ldr	r5, [pc, #28]	; (800c2fc <_kill_r+0x20>)
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	4608      	mov	r0, r1
 800c2e6:	4611      	mov	r1, r2
 800c2e8:	602b      	str	r3, [r5, #0]
 800c2ea:	f7f5 f9af 	bl	800164c <_kill>
 800c2ee:	1c43      	adds	r3, r0, #1
 800c2f0:	d102      	bne.n	800c2f8 <_kill_r+0x1c>
 800c2f2:	682b      	ldr	r3, [r5, #0]
 800c2f4:	b103      	cbz	r3, 800c2f8 <_kill_r+0x1c>
 800c2f6:	6023      	str	r3, [r4, #0]
 800c2f8:	bd38      	pop	{r3, r4, r5, pc}
 800c2fa:	bf00      	nop
 800c2fc:	240004bc 	.word	0x240004bc

0800c300 <_getpid_r>:
 800c300:	f7f5 b99c 	b.w	800163c <_getpid>

0800c304 <_init>:
 800c304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c306:	bf00      	nop
 800c308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c30a:	bc08      	pop	{r3}
 800c30c:	469e      	mov	lr, r3
 800c30e:	4770      	bx	lr

0800c310 <_fini>:
 800c310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c312:	bf00      	nop
 800c314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c316:	bc08      	pop	{r3}
 800c318:	469e      	mov	lr, r3
 800c31a:	4770      	bx	lr
