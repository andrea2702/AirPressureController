
InterfaceSensorActuator_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a40  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d10  08007d10  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007d10  08007d10  00017d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d18  08007d18  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d18  08007d18  00017d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d1c  08007d1c  00017d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08007d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  24000010  08007d30  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000170  08007d30  00020170  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019cd7  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028c4  00000000  00000000  00039d15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001490  00000000  00000000  0003c5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013a8  00000000  00000000  0003da70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003bf99  00000000  00000000  0003ee18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018fb9  00000000  00000000  0007adb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00198849  00000000  00000000  00093d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0022c5b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005944  00000000  00000000  0022c604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007cc0 	.word	0x08007cc0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08007cc0 	.word	0x08007cc0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b37      	ldr	r3, [pc, #220]	; (80007f4 <main+0xec>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	60fa      	str	r2, [r7, #12]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 fa6f 	bl	8000c14 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fbe3 	bl	8000f00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f85f 	bl	80007fc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b2d      	ldr	r3, [pc, #180]	; (80007f4 <main+0xec>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a2b      	ldr	r2, [pc, #172]	; (80007f4 <main+0xec>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b29      	ldr	r3, [pc, #164]	; (80007f4 <main+0xec>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f001 ffb1 	bl	80026c4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f001 ffc7 	bl	80026f8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <main+0xec>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	60fa      	str	r2, [r7, #12]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 fa41 	bl	8000c14 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  int32_t CH1_DC = 50000;
 8000792:	f24c 3350 	movw	r3, #50000	; 0xc350
 8000796:	60bb      	str	r3, [r7, #8]
  MX_GPIO_Init();
 8000798:	f000 f9e6 	bl	8000b68 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800079c:	f000 f998 	bl	8000ad0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80007a0:	f000 f920 	bl	80009e4 <MX_TIM2_Init>
  MX_ADC1_Init();
 80007a4:	f000 f8a4 	bl	80008f0 <MX_ADC1_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007a8:	2100      	movs	r1, #0
 80007aa:	4813      	ldr	r0, [pc, #76]	; (80007f8 <main+0xf0>)
 80007ac:	f005 fa10 	bl	8005bd0 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(CH1_DC < 65535){
 80007b0:	e009      	b.n	80007c6 <main+0xbe>
      TIM2->CCR1 = CH1_DC;
 80007b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	6353      	str	r3, [r2, #52]	; 0x34
      CH1_DC += 70;
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	3346      	adds	r3, #70	; 0x46
 80007be:	60bb      	str	r3, [r7, #8]
      HAL_Delay(1);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f000 fc2f 	bl	8001024 <HAL_Delay>
	  while(CH1_DC < 65535){
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80007cc:	4293      	cmp	r3, r2
 80007ce:	ddf0      	ble.n	80007b2 <main+0xaa>
    }
    while(CH1_DC > 50000){
 80007d0:	e009      	b.n	80007e6 <main+0xde>
      TIM2->CCR1 = CH1_DC;
 80007d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d6:	68bb      	ldr	r3, [r7, #8]
 80007d8:	6353      	str	r3, [r2, #52]	; 0x34
      CH1_DC -= 70;
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	3b46      	subs	r3, #70	; 0x46
 80007de:	60bb      	str	r3, [r7, #8]
      HAL_Delay(1);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f000 fc1f 	bl	8001024 <HAL_Delay>
    while(CH1_DC > 50000){
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	f24c 3250 	movw	r2, #50000	; 0xc350
 80007ec:	4293      	cmp	r3, r2
 80007ee:	dcf0      	bgt.n	80007d2 <main+0xca>
	  while(CH1_DC < 65535){
 80007f0:	e7e9      	b.n	80007c6 <main+0xbe>
 80007f2:	bf00      	nop
 80007f4:	58024400 	.word	0x58024400
 80007f8:	24000090 	.word	0x24000090

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b09c      	sub	sp, #112	; 0x70
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000806:	224c      	movs	r2, #76	; 0x4c
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f007 fa50 	bl	8007cb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2220      	movs	r2, #32
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f007 fa4a 	bl	8007cb0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800081c:	2004      	movs	r0, #4
 800081e:	f001 ff7f 	bl	8002720 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b30      	ldr	r3, [pc, #192]	; (80008e8 <SystemClock_Config+0xec>)
 8000828:	699b      	ldr	r3, [r3, #24]
 800082a:	4a2f      	ldr	r2, [pc, #188]	; (80008e8 <SystemClock_Config+0xec>)
 800082c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000830:	6193      	str	r3, [r2, #24]
 8000832:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <SystemClock_Config+0xec>)
 8000834:	699b      	ldr	r3, [r3, #24]
 8000836:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	4b2b      	ldr	r3, [pc, #172]	; (80008ec <SystemClock_Config+0xf0>)
 800083e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000840:	4a2a      	ldr	r2, [pc, #168]	; (80008ec <SystemClock_Config+0xf0>)
 8000842:	f043 0301 	orr.w	r3, r3, #1
 8000846:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000848:	4b28      	ldr	r3, [pc, #160]	; (80008ec <SystemClock_Config+0xf0>)
 800084a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084c:	f003 0301 	and.w	r3, r3, #1
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000854:	bf00      	nop
 8000856:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <SystemClock_Config+0xec>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800085e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000862:	d1f8      	bne.n	8000856 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000864:	2301      	movs	r3, #1
 8000866:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000868:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800086c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000872:	2302      	movs	r3, #2
 8000874:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 800087a:	23f0      	movs	r3, #240	; 0xf0
 800087c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800087e:	2302      	movs	r3, #2
 8000880:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000882:	2302      	movs	r3, #2
 8000884:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000886:	2302      	movs	r3, #2
 8000888:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800088a:	2308      	movs	r3, #8
 800088c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800088e:	2300      	movs	r3, #0
 8000890:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	4618      	mov	r0, r3
 800089c:	f001 ff9a 	bl	80027d4 <HAL_RCC_OscConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008a6:	f000 f9b5 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008aa:	233f      	movs	r3, #63	; 0x3f
 80008ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ae:	2303      	movs	r3, #3
 80008b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008b6:	2308      	movs	r3, #8
 80008b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008ba:	2340      	movs	r3, #64	; 0x40
 80008bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008be:	2340      	movs	r3, #64	; 0x40
 80008c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008c8:	2340      	movs	r3, #64	; 0x40
 80008ca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2104      	movs	r1, #4
 80008d0:	4618      	mov	r0, r3
 80008d2:	f002 fbad 	bl	8003030 <HAL_RCC_ClockConfig>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80008dc:	f000 f99a 	bl	8000c14 <Error_Handler>
  }
}
 80008e0:	bf00      	nop
 80008e2:	3770      	adds	r7, #112	; 0x70
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	58024800 	.word	0x58024800
 80008ec:	58000400 	.word	0x58000400

080008f0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000902:	463b      	mov	r3, r7
 8000904:	2200      	movs	r2, #0
 8000906:	601a      	str	r2, [r3, #0]
 8000908:	605a      	str	r2, [r3, #4]
 800090a:	609a      	str	r2, [r3, #8]
 800090c:	60da      	str	r2, [r3, #12]
 800090e:	611a      	str	r2, [r3, #16]
 8000910:	615a      	str	r2, [r3, #20]
 8000912:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000914:	4b30      	ldr	r3, [pc, #192]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000916:	4a31      	ldr	r2, [pc, #196]	; (80009dc <MX_ADC1_Init+0xec>)
 8000918:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800091a:	4b2f      	ldr	r3, [pc, #188]	; (80009d8 <MX_ADC1_Init+0xe8>)
 800091c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000920:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000922:	4b2d      	ldr	r3, [pc, #180]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000928:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <MX_ADC1_Init+0xe8>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800092e:	4b2a      	ldr	r3, [pc, #168]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000930:	2204      	movs	r2, #4
 8000932:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000934:	4b28      	ldr	r3, [pc, #160]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000936:	2200      	movs	r2, #0
 8000938:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800093a:	4b27      	ldr	r3, [pc, #156]	; (80009d8 <MX_ADC1_Init+0xe8>)
 800093c:	2200      	movs	r2, #0
 800093e:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000940:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000942:	2201      	movs	r2, #1
 8000944:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000946:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000948:	2200      	movs	r2, #0
 800094a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800094c:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_ADC1_Init+0xe8>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000952:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000954:	2200      	movs	r2, #0
 8000956:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_ADC1_Init+0xe8>)
 800095a:	2200      	movs	r2, #0
 800095c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000960:	2200      	movs	r2, #0
 8000962:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000966:	2200      	movs	r2, #0
 8000968:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MX_ADC1_Init+0xe8>)
 800096c:	2200      	movs	r2, #0
 800096e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000972:	4819      	ldr	r0, [pc, #100]	; (80009d8 <MX_ADC1_Init+0xe8>)
 8000974:	f000 fd12 	bl	800139c <HAL_ADC_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800097e:	f000 f949 	bl	8000c14 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4812      	ldr	r0, [pc, #72]	; (80009d8 <MX_ADC1_Init+0xe8>)
 800098e:	f001 fb27 	bl	8001fe0 <HAL_ADCEx_MultiModeConfigChannel>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000998:	f000 f93c 	bl	8000c14 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_ADC1_Init+0xf0>)
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009a0:	2306      	movs	r3, #6
 80009a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009a8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009ac:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009ae:	2304      	movs	r3, #4
 80009b0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ba:	463b      	mov	r3, r7
 80009bc:	4619      	mov	r1, r3
 80009be:	4806      	ldr	r0, [pc, #24]	; (80009d8 <MX_ADC1_Init+0xe8>)
 80009c0:	f000 fe8e 	bl	80016e0 <HAL_ADC_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80009ca:	f000 f923 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009ce:	bf00      	nop
 80009d0:	3728      	adds	r7, #40	; 0x28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2400002c 	.word	0x2400002c
 80009dc:	40022000 	.word	0x40022000
 80009e0:	14f00020 	.word	0x14f00020

080009e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08e      	sub	sp, #56	; 0x38
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f8:	f107 031c 	add.w	r3, r7, #28
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a04:	463b      	mov	r3, r7
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
 8000a12:	615a      	str	r2, [r3, #20]
 8000a14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a16:	4b2d      	ldr	r3, [pc, #180]	; (8000acc <MX_TIM2_Init+0xe8>)
 8000a18:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a1c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a1e:	4b2b      	ldr	r3, [pc, #172]	; (8000acc <MX_TIM2_Init+0xe8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a24:	4b29      	ldr	r3, [pc, #164]	; (8000acc <MX_TIM2_Init+0xe8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000a2a:	4b28      	ldr	r3, [pc, #160]	; (8000acc <MX_TIM2_Init+0xe8>)
 8000a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a30:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a32:	4b26      	ldr	r3, [pc, #152]	; (8000acc <MX_TIM2_Init+0xe8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a38:	4b24      	ldr	r3, [pc, #144]	; (8000acc <MX_TIM2_Init+0xe8>)
 8000a3a:	2280      	movs	r2, #128	; 0x80
 8000a3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a3e:	4823      	ldr	r0, [pc, #140]	; (8000acc <MX_TIM2_Init+0xe8>)
 8000a40:	f005 f80e 	bl	8005a60 <HAL_TIM_Base_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000a4a:	f000 f8e3 	bl	8000c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a58:	4619      	mov	r1, r3
 8000a5a:	481c      	ldr	r0, [pc, #112]	; (8000acc <MX_TIM2_Init+0xe8>)
 8000a5c:	f005 fada 	bl	8006014 <HAL_TIM_ConfigClockSource>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a66:	f000 f8d5 	bl	8000c14 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a6a:	4818      	ldr	r0, [pc, #96]	; (8000acc <MX_TIM2_Init+0xe8>)
 8000a6c:	f005 f84f 	bl	8005b0e <HAL_TIM_PWM_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a76:	f000 f8cd 	bl	8000c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a82:	f107 031c 	add.w	r3, r7, #28
 8000a86:	4619      	mov	r1, r3
 8000a88:	4810      	ldr	r0, [pc, #64]	; (8000acc <MX_TIM2_Init+0xe8>)
 8000a8a:	f005 ffef 	bl	8006a6c <HAL_TIMEx_MasterConfigSynchronization>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a94:	f000 f8be 	bl	8000c14 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a98:	2360      	movs	r3, #96	; 0x60
 8000a9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aa8:	463b      	mov	r3, r7
 8000aaa:	2200      	movs	r2, #0
 8000aac:	4619      	mov	r1, r3
 8000aae:	4807      	ldr	r0, [pc, #28]	; (8000acc <MX_TIM2_Init+0xe8>)
 8000ab0:	f005 f99c 	bl	8005dec <HAL_TIM_PWM_ConfigChannel>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000aba:	f000 f8ab 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000abe:	4803      	ldr	r0, [pc, #12]	; (8000acc <MX_TIM2_Init+0xe8>)
 8000ac0:	f000 f92e 	bl	8000d20 <HAL_TIM_MspPostInit>

}
 8000ac4:	bf00      	nop
 8000ac6:	3738      	adds	r7, #56	; 0x38
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	24000090 	.word	0x24000090

08000ad0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <MX_USART2_UART_Init+0x90>)
 8000ad6:	4a23      	ldr	r2, [pc, #140]	; (8000b64 <MX_USART2_UART_Init+0x94>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ada:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <MX_USART2_UART_Init+0x90>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <MX_USART2_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_USART2_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <MX_USART2_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_USART2_UART_Init+0x90>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <MX_USART2_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b06:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b18:	4811      	ldr	r0, [pc, #68]	; (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b1a:	f006 f835 	bl	8006b88 <HAL_UART_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b24:	f000 f876 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b2c:	f006 ffd2 	bl	8007ad4 <HAL_UARTEx_SetTxFifoThreshold>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b36:	f000 f86d 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4808      	ldr	r0, [pc, #32]	; (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b3e:	f007 f807 	bl	8007b50 <HAL_UARTEx_SetRxFifoThreshold>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b48:	f000 f864 	bl	8000c14 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_USART2_UART_Init+0x90>)
 8000b4e:	f006 ff88 	bl	8007a62 <HAL_UARTEx_DisableFifoMode>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b58:	f000 f85c 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	240000dc 	.word	0x240000dc
 8000b64:	40004400 	.word	0x40004400

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b087      	sub	sp, #28
 8000b6c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b6e:	4b28      	ldr	r3, [pc, #160]	; (8000c10 <MX_GPIO_Init+0xa8>)
 8000b70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b74:	4a26      	ldr	r2, [pc, #152]	; (8000c10 <MX_GPIO_Init+0xa8>)
 8000b76:	f043 0304 	orr.w	r3, r3, #4
 8000b7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b7e:	4b24      	ldr	r3, [pc, #144]	; (8000c10 <MX_GPIO_Init+0xa8>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	f003 0304 	and.w	r3, r3, #4
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8c:	4b20      	ldr	r3, [pc, #128]	; (8000c10 <MX_GPIO_Init+0xa8>)
 8000b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b92:	4a1f      	ldr	r2, [pc, #124]	; (8000c10 <MX_GPIO_Init+0xa8>)
 8000b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b9c:	4b1c      	ldr	r3, [pc, #112]	; (8000c10 <MX_GPIO_Init+0xa8>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	4b19      	ldr	r3, [pc, #100]	; (8000c10 <MX_GPIO_Init+0xa8>)
 8000bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb0:	4a17      	ldr	r2, [pc, #92]	; (8000c10 <MX_GPIO_Init+0xa8>)
 8000bb2:	f043 0301 	orr.w	r3, r3, #1
 8000bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <MX_GPIO_Init+0xa8>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <MX_GPIO_Init+0xa8>)
 8000bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bce:	4a10      	ldr	r2, [pc, #64]	; (8000c10 <MX_GPIO_Init+0xa8>)
 8000bd0:	f043 0302 	orr.w	r3, r3, #2
 8000bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <MX_GPIO_Init+0xa8>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	f003 0302 	and.w	r3, r3, #2
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <MX_GPIO_Init+0xa8>)
 8000be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bec:	4a08      	ldr	r2, [pc, #32]	; (8000c10 <MX_GPIO_Init+0xa8>)
 8000bee:	f043 0308 	orr.w	r3, r3, #8
 8000bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf6:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <MX_GPIO_Init+0xa8>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	f003 0308 	and.w	r3, r3, #8
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]

}
 8000c04:	bf00      	nop
 8000c06:	371c      	adds	r7, #28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	58024400 	.word	0x58024400

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>
	...

08000c20 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <HAL_MspInit+0x30>)
 8000c28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c2c:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_MspInit+0x30>)
 8000c2e:	f043 0302 	orr.w	r3, r3, #2
 8000c32:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x30>)
 8000c38:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	607b      	str	r3, [r7, #4]
 8000c42:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	58024400 	.word	0x58024400

08000c54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a18      	ldr	r2, [pc, #96]	; (8000cd4 <HAL_ADC_MspInit+0x80>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d129      	bne.n	8000cca <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c76:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_ADC_MspInit+0x84>)
 8000c78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c7c:	4a16      	ldr	r2, [pc, #88]	; (8000cd8 <HAL_ADC_MspInit+0x84>)
 8000c7e:	f043 0320 	orr.w	r3, r3, #32
 8000c82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <HAL_ADC_MspInit+0x84>)
 8000c88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c8c:	f003 0320 	and.w	r3, r3, #32
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <HAL_ADC_MspInit+0x84>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	4a0f      	ldr	r2, [pc, #60]	; (8000cd8 <HAL_ADC_MspInit+0x84>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <HAL_ADC_MspInit+0x84>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	60fb      	str	r3, [r7, #12]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <HAL_ADC_MspInit+0x88>)
 8000cc6:	f001 fb4d 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40022000 	.word	0x40022000
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020400 	.word	0x58020400

08000ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000cf0:	d10e      	bne.n	8000d10 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_TIM_Base_MspInit+0x3c>)
 8000cf4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000cf8:	4a08      	ldr	r2, [pc, #32]	; (8000d1c <HAL_TIM_Base_MspInit+0x3c>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d02:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <HAL_TIM_Base_MspInit+0x3c>)
 8000d04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	60fb      	str	r3, [r7, #12]
 8000d0e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	58024400 	.word	0x58024400

08000d20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d40:	d11e      	bne.n	8000d80 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_TIM_MspPostInit+0x68>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d48:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <HAL_TIM_MspPostInit+0x68>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d52:	4b0d      	ldr	r3, [pc, #52]	; (8000d88 <HAL_TIM_MspPostInit+0x68>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d60:	2301      	movs	r3, #1
 8000d62:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4804      	ldr	r0, [pc, #16]	; (8000d8c <HAL_TIM_MspPostInit+0x6c>)
 8000d7c:	f001 faf2 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	58024400 	.word	0x58024400
 8000d8c:	58020000 	.word	0x58020000

08000d90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b0b8      	sub	sp, #224	; 0xe0
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	22bc      	movs	r2, #188	; 0xbc
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f006 ff7d 	bl	8007cb0 <memset>
  if(huart->Instance==USART2)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <HAL_UART_MspInit+0xbc>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d141      	bne.n	8000e44 <HAL_UART_MspInit+0xb4>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dca:	f107 0310 	add.w	r3, r7, #16
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f002 fcba 	bl	8003748 <HAL_RCCEx_PeriphCLKConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dda:	f7ff ff1b 	bl	8000c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dde:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <HAL_UART_MspInit+0xc0>)
 8000de0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000de4:	4a1a      	ldr	r2, [pc, #104]	; (8000e50 <HAL_UART_MspInit+0xc0>)
 8000de6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dea:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_UART_MspInit+0xc0>)
 8000df0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <HAL_UART_MspInit+0xc0>)
 8000dfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e02:	4a13      	ldr	r2, [pc, #76]	; (8000e50 <HAL_UART_MspInit+0xc0>)
 8000e04:	f043 0308 	orr.w	r3, r3, #8
 8000e08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <HAL_UART_MspInit+0xc0>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	f003 0308 	and.w	r3, r3, #8
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000e1a:	2360      	movs	r3, #96	; 0x60
 8000e1c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e32:	2307      	movs	r3, #7
 8000e34:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <HAL_UART_MspInit+0xc4>)
 8000e40:	f001 fa90 	bl	8002364 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e44:	bf00      	nop
 8000e46:	37e0      	adds	r7, #224	; 0xe0
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40004400 	.word	0x40004400
 8000e50:	58024400 	.word	0x58024400
 8000e54:	58020c00 	.word	0x58020c00

08000e58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <NMI_Handler+0x4>

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea4:	f000 f89e 	bl	8000fe4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000eb0:	f7ff fb94 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb4:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eb6:	490d      	ldr	r1, [pc, #52]	; (8000eec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ecc:	4c0a      	ldr	r4, [pc, #40]	; (8000ef8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eda:	f006 fec5 	bl	8007c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ede:	f7ff fc13 	bl	8000708 <main>
  bx  lr
 8000ee2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ee4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ee8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000eec:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ef0:	08007d20 	.word	0x08007d20
  ldr r2, =_sbss
 8000ef4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ef8:	24000170 	.word	0x24000170

08000efc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC3_IRQHandler>
	...

08000f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f06:	2003      	movs	r0, #3
 8000f08:	f001 f9fa 	bl	8002300 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f0c:	f002 fa46 	bl	800339c <HAL_RCC_GetSysClockFreq>
 8000f10:	4602      	mov	r2, r0
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_Init+0x68>)
 8000f14:	699b      	ldr	r3, [r3, #24]
 8000f16:	0a1b      	lsrs	r3, r3, #8
 8000f18:	f003 030f 	and.w	r3, r3, #15
 8000f1c:	4913      	ldr	r1, [pc, #76]	; (8000f6c <HAL_Init+0x6c>)
 8000f1e:	5ccb      	ldrb	r3, [r1, r3]
 8000f20:	f003 031f 	and.w	r3, r3, #31
 8000f24:	fa22 f303 	lsr.w	r3, r2, r3
 8000f28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <HAL_Init+0x68>)
 8000f2c:	699b      	ldr	r3, [r3, #24]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <HAL_Init+0x6c>)
 8000f34:	5cd3      	ldrb	r3, [r2, r3]
 8000f36:	f003 031f 	and.w	r3, r3, #31
 8000f3a:	687a      	ldr	r2, [r7, #4]
 8000f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f40:	4a0b      	ldr	r2, [pc, #44]	; (8000f70 <HAL_Init+0x70>)
 8000f42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f44:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <HAL_Init+0x74>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f4a:	200f      	movs	r0, #15
 8000f4c:	f000 f814 	bl	8000f78 <HAL_InitTick>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e002      	b.n	8000f60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f5a:	f7ff fe61 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	58024400 	.word	0x58024400
 8000f6c:	08007cd8 	.word	0x08007cd8
 8000f70:	24000004 	.word	0x24000004
 8000f74:	24000000 	.word	0x24000000

08000f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <HAL_InitTick+0x60>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e021      	b.n	8000fd0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f8c:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <HAL_InitTick+0x64>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_InitTick+0x60>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 f9d1 	bl	800234a <HAL_SYSTICK_Config>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e00e      	b.n	8000fd0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2b0f      	cmp	r3, #15
 8000fb6:	d80a      	bhi.n	8000fce <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	6879      	ldr	r1, [r7, #4]
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	f001 f9a9 	bl	8002316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc4:	4a06      	ldr	r2, [pc, #24]	; (8000fe0 <HAL_InitTick+0x68>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	e000      	b.n	8000fd0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2400000c 	.word	0x2400000c
 8000fdc:	24000000 	.word	0x24000000
 8000fe0:	24000008 	.word	0x24000008

08000fe4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x20>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	461a      	mov	r2, r3
 8000fee:	4b06      	ldr	r3, [pc, #24]	; (8001008 <HAL_IncTick+0x24>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4413      	add	r3, r2
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <HAL_IncTick+0x24>)
 8000ff6:	6013      	str	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	2400000c 	.word	0x2400000c
 8001008:	2400016c 	.word	0x2400016c

0800100c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return uwTick;
 8001010:	4b03      	ldr	r3, [pc, #12]	; (8001020 <HAL_GetTick+0x14>)
 8001012:	681b      	ldr	r3, [r3, #0]
}
 8001014:	4618      	mov	r0, r3
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	2400016c 	.word	0x2400016c

08001024 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800102c:	f7ff ffee 	bl	800100c <HAL_GetTick>
 8001030:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f1b3 3fff 	cmp.w	r3, #4294967295
 800103c:	d005      	beq.n	800104a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800103e:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_Delay+0x44>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	4413      	add	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104a:	bf00      	nop
 800104c:	f7ff ffde 	bl	800100c <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	429a      	cmp	r2, r3
 800105a:	d8f7      	bhi.n	800104c <HAL_Delay+0x28>
  {
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	2400000c 	.word	0x2400000c

0800106c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <HAL_GetREVID+0x14>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	0c1b      	lsrs	r3, r3, #16
}
 8001076:	4618      	mov	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	5c001000 	.word	0x5c001000

08001084 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	431a      	orrs	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	609a      	str	r2, [r3, #8]
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	431a      	orrs	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	609a      	str	r2, [r3, #8]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3360      	adds	r3, #96	; 0x60
 80010fe:	461a      	mov	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	430b      	orrs	r3, r1
 800111a:	431a      	orrs	r2, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001120:	bf00      	nop
 8001122:	371c      	adds	r7, #28
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	f003 031f 	and.w	r3, r3, #31
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	431a      	orrs	r2, r3
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	611a      	str	r2, [r3, #16]
}
 8001152:	bf00      	nop
 8001154:	3714      	adds	r7, #20
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800115e:	b480      	push	{r7}
 8001160:	b087      	sub	sp, #28
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3360      	adds	r3, #96	; 0x60
 800116e:	461a      	mov	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4413      	add	r3, r2
 8001176:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	431a      	orrs	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	601a      	str	r2, [r3, #0]
  }
}
 8001188:	bf00      	nop
 800118a:	371c      	adds	r7, #28
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001194:	b480      	push	{r7}
 8001196:	b087      	sub	sp, #28
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3330      	adds	r3, #48	; 0x30
 80011a4:	461a      	mov	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	f003 030c 	and.w	r3, r3, #12
 80011b0:	4413      	add	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	211f      	movs	r1, #31
 80011c0:	fa01 f303 	lsl.w	r3, r1, r3
 80011c4:	43db      	mvns	r3, r3
 80011c6:	401a      	ands	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	0e9b      	lsrs	r3, r3, #26
 80011cc:	f003 011f 	and.w	r1, r3, #31
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	f003 031f 	and.w	r3, r3, #31
 80011d6:	fa01 f303 	lsl.w	r3, r1, r3
 80011da:	431a      	orrs	r2, r3
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011e0:	bf00      	nop
 80011e2:	371c      	adds	r7, #28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	3314      	adds	r3, #20
 80011fc:	461a      	mov	r2, r3
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	0e5b      	lsrs	r3, r3, #25
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	f003 0304 	and.w	r3, r3, #4
 8001208:	4413      	add	r3, r2
 800120a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	0d1b      	lsrs	r3, r3, #20
 8001214:	f003 031f 	and.w	r3, r3, #31
 8001218:	2107      	movs	r1, #7
 800121a:	fa01 f303 	lsl.w	r3, r1, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	401a      	ands	r2, r3
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	0d1b      	lsrs	r3, r3, #20
 8001226:	f003 031f 	and.w	r3, r3, #31
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	431a      	orrs	r2, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001236:	bf00      	nop
 8001238:	371c      	adds	r7, #28
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
	...

08001244 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800125c:	43db      	mvns	r3, r3
 800125e:	401a      	ands	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f003 0318 	and.w	r3, r3, #24
 8001266:	4908      	ldr	r1, [pc, #32]	; (8001288 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001268:	40d9      	lsrs	r1, r3
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	400b      	ands	r3, r1
 800126e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001272:	431a      	orrs	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	000fffff 	.word	0x000fffff

0800128c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689a      	ldr	r2, [r3, #8]
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <LL_ADC_DisableDeepPowerDown+0x20>)
 800129a:	4013      	ands	r3, r2
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	6093      	str	r3, [r2, #8]
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	5fffffc0 	.word	0x5fffffc0

080012b0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80012c4:	d101      	bne.n	80012ca <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689a      	ldr	r2, [r3, #8]
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <LL_ADC_EnableInternalRegulator+0x24>)
 80012e6:	4013      	ands	r3, r2
 80012e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	6fffffc0 	.word	0x6fffffc0

08001300 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	689b      	ldr	r3, [r3, #8]
 800130c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001310:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001314:	d101      	bne.n	800131a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 0301 	and.w	r3, r3, #1
 8001338:	2b01      	cmp	r3, #1
 800133a:	d101      	bne.n	8001340 <LL_ADC_IsEnabled+0x18>
 800133c:	2301      	movs	r3, #1
 800133e:	e000      	b.n	8001342 <LL_ADC_IsEnabled+0x1a>
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr

0800134e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800134e:	b480      	push	{r7}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 0304 	and.w	r3, r3, #4
 800135e:	2b04      	cmp	r3, #4
 8001360:	d101      	bne.n	8001366 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001362:	2301      	movs	r3, #1
 8001364:	e000      	b.n	8001368 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001366:	2300      	movs	r3, #0
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	2b08      	cmp	r3, #8
 8001386:	d101      	bne.n	800138c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001388:	2301      	movs	r3, #1
 800138a:	e000      	b.n	800138e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
	...

0800139c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800139c:	b590      	push	{r4, r7, lr}
 800139e:	b089      	sub	sp, #36	; 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d101      	bne.n	80013b6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e18f      	b.n	80016d6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	f7ff fc45 	bl	8000c54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff67 	bl	80012b0 <LL_ADC_IsDeepPowerDownEnabled>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d004      	beq.n	80013f2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f7ff ff4d 	bl	800128c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff ff82 	bl	8001300 <LL_ADC_IsInternalRegulatorEnabled>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d114      	bne.n	800142c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff66 	bl	80012d8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800140c:	4b87      	ldr	r3, [pc, #540]	; (800162c <HAL_ADC_Init+0x290>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	099b      	lsrs	r3, r3, #6
 8001412:	4a87      	ldr	r2, [pc, #540]	; (8001630 <HAL_ADC_Init+0x294>)
 8001414:	fba2 2303 	umull	r2, r3, r2, r3
 8001418:	099b      	lsrs	r3, r3, #6
 800141a:	3301      	adds	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800141e:	e002      	b.n	8001426 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	3b01      	subs	r3, #1
 8001424:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f9      	bne.n	8001420 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff65 	bl	8001300 <LL_ADC_IsInternalRegulatorEnabled>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10d      	bne.n	8001458 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001440:	f043 0210 	orr.w	r2, r3, #16
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144c:	f043 0201 	orr.w	r2, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff76 	bl	800134e <LL_ADC_REG_IsConversionOngoing>
 8001462:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001468:	f003 0310 	and.w	r3, r3, #16
 800146c:	2b00      	cmp	r3, #0
 800146e:	f040 8129 	bne.w	80016c4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	2b00      	cmp	r3, #0
 8001476:	f040 8125 	bne.w	80016c4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001482:	f043 0202 	orr.w	r2, r3, #2
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff ff4a 	bl	8001328 <LL_ADC_IsEnabled>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d136      	bne.n	8001508 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a65      	ldr	r2, [pc, #404]	; (8001634 <HAL_ADC_Init+0x298>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d004      	beq.n	80014ae <HAL_ADC_Init+0x112>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a63      	ldr	r2, [pc, #396]	; (8001638 <HAL_ADC_Init+0x29c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d10e      	bne.n	80014cc <HAL_ADC_Init+0x130>
 80014ae:	4861      	ldr	r0, [pc, #388]	; (8001634 <HAL_ADC_Init+0x298>)
 80014b0:	f7ff ff3a 	bl	8001328 <LL_ADC_IsEnabled>
 80014b4:	4604      	mov	r4, r0
 80014b6:	4860      	ldr	r0, [pc, #384]	; (8001638 <HAL_ADC_Init+0x29c>)
 80014b8:	f7ff ff36 	bl	8001328 <LL_ADC_IsEnabled>
 80014bc:	4603      	mov	r3, r0
 80014be:	4323      	orrs	r3, r4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf0c      	ite	eq
 80014c4:	2301      	moveq	r3, #1
 80014c6:	2300      	movne	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	e008      	b.n	80014de <HAL_ADC_Init+0x142>
 80014cc:	485b      	ldr	r0, [pc, #364]	; (800163c <HAL_ADC_Init+0x2a0>)
 80014ce:	f7ff ff2b 	bl	8001328 <LL_ADC_IsEnabled>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	bf0c      	ite	eq
 80014d8:	2301      	moveq	r3, #1
 80014da:	2300      	movne	r3, #0
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d012      	beq.n	8001508 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a53      	ldr	r2, [pc, #332]	; (8001634 <HAL_ADC_Init+0x298>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d004      	beq.n	80014f6 <HAL_ADC_Init+0x15a>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a51      	ldr	r2, [pc, #324]	; (8001638 <HAL_ADC_Init+0x29c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d101      	bne.n	80014fa <HAL_ADC_Init+0x15e>
 80014f6:	4a52      	ldr	r2, [pc, #328]	; (8001640 <HAL_ADC_Init+0x2a4>)
 80014f8:	e000      	b.n	80014fc <HAL_ADC_Init+0x160>
 80014fa:	4a52      	ldr	r2, [pc, #328]	; (8001644 <HAL_ADC_Init+0x2a8>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4619      	mov	r1, r3
 8001502:	4610      	mov	r0, r2
 8001504:	f7ff fdbe 	bl	8001084 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001508:	f7ff fdb0 	bl	800106c <HAL_GetREVID>
 800150c:	4603      	mov	r3, r0
 800150e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001512:	4293      	cmp	r3, r2
 8001514:	d914      	bls.n	8001540 <HAL_ADC_Init+0x1a4>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b10      	cmp	r3, #16
 800151c:	d110      	bne.n	8001540 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	7d5b      	ldrb	r3, [r3, #21]
 8001522:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001528:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800152e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7f1b      	ldrb	r3, [r3, #28]
 8001534:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001536:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001538:	f043 030c 	orr.w	r3, r3, #12
 800153c:	61bb      	str	r3, [r7, #24]
 800153e:	e00d      	b.n	800155c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	7d5b      	ldrb	r3, [r3, #21]
 8001544:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800154a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001550:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	7f1b      	ldrb	r3, [r3, #28]
 8001556:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	7f1b      	ldrb	r3, [r3, #28]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d106      	bne.n	8001572 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	3b01      	subs	r3, #1
 800156a:	045b      	lsls	r3, r3, #17
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4313      	orrs	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001576:	2b00      	cmp	r3, #0
 8001578:	d009      	beq.n	800158e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <HAL_ADC_Init+0x2ac>)
 8001596:	4013      	ands	r3, r2
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6812      	ldr	r2, [r2, #0]
 800159c:	69b9      	ldr	r1, [r7, #24]
 800159e:	430b      	orrs	r3, r1
 80015a0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff fed1 	bl	800134e <LL_ADC_REG_IsConversionOngoing>
 80015ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fede 	bl	8001374 <LL_ADC_INJ_IsConversionOngoing>
 80015b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d15f      	bne.n	8001680 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d15c      	bne.n	8001680 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7d1b      	ldrb	r3, [r3, #20]
 80015ca:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68da      	ldr	r2, [r3, #12]
 80015da:	4b1c      	ldr	r3, [pc, #112]	; (800164c <HAL_ADC_Init+0x2b0>)
 80015dc:	4013      	ands	r3, r2
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	69b9      	ldr	r1, [r7, #24]
 80015e4:	430b      	orrs	r3, r1
 80015e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d130      	bne.n	8001654 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	691a      	ldr	r2, [r3, #16]
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_ADC_Init+0x2b4>)
 8001600:	4013      	ands	r3, r2
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001606:	3a01      	subs	r2, #1
 8001608:	0411      	lsls	r1, r2, #16
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800160e:	4311      	orrs	r1, r2
 8001610:	687a      	ldr	r2, [r7, #4]
 8001612:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001614:	4311      	orrs	r1, r2
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800161a:	430a      	orrs	r2, r1
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f042 0201 	orr.w	r2, r2, #1
 8001626:	611a      	str	r2, [r3, #16]
 8001628:	e01c      	b.n	8001664 <HAL_ADC_Init+0x2c8>
 800162a:	bf00      	nop
 800162c:	24000000 	.word	0x24000000
 8001630:	053e2d63 	.word	0x053e2d63
 8001634:	40022000 	.word	0x40022000
 8001638:	40022100 	.word	0x40022100
 800163c:	58026000 	.word	0x58026000
 8001640:	40022300 	.word	0x40022300
 8001644:	58026300 	.word	0x58026300
 8001648:	fff0c003 	.word	0xfff0c003
 800164c:	ffffbffc 	.word	0xffffbffc
 8001650:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 0201 	bic.w	r2, r2, #1
 8001662:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	430a      	orrs	r2, r1
 8001678:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f000 fb80 	bl	8001d80 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68db      	ldr	r3, [r3, #12]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d10c      	bne.n	80016a2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f023 010f 	bic.w	r1, r3, #15
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	1e5a      	subs	r2, r3, #1
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	430a      	orrs	r2, r1
 800169e:	631a      	str	r2, [r3, #48]	; 0x30
 80016a0:	e007      	b.n	80016b2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f022 020f 	bic.w	r2, r2, #15
 80016b0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016b6:	f023 0303 	bic.w	r3, r3, #3
 80016ba:	f043 0201 	orr.w	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	655a      	str	r2, [r3, #84]	; 0x54
 80016c2:	e007      	b.n	80016d4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c8:	f043 0210 	orr.w	r2, r3, #16
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80016d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd90      	pop	{r4, r7, pc}
 80016de:	bf00      	nop

080016e0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b0a1      	sub	sp, #132	; 0x84
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016ea:	2300      	movs	r3, #0
 80016ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4a9d      	ldr	r2, [pc, #628]	; (8001970 <HAL_ADC_ConfigChannel+0x290>)
 80016fa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_ADC_ConfigChannel+0x2a>
 8001706:	2302      	movs	r3, #2
 8001708:	e321      	b.n	8001d4e <HAL_ADC_ConfigChannel+0x66e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2201      	movs	r2, #1
 800170e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff fe19 	bl	800134e <LL_ADC_REG_IsConversionOngoing>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	f040 8306 	bne.w	8001d30 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800172c:	2b00      	cmp	r3, #0
 800172e:	d108      	bne.n	8001742 <HAL_ADC_ConfigChannel+0x62>
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	0e9b      	lsrs	r3, r3, #26
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	2201      	movs	r2, #1
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	e016      	b.n	8001770 <HAL_ADC_ConfigChannel+0x90>
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800174a:	fa93 f3a3 	rbit	r3, r3
 800174e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001750:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001752:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001754:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001756:	2b00      	cmp	r3, #0
 8001758:	d101      	bne.n	800175e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 800175a:	2320      	movs	r3, #32
 800175c:	e003      	b.n	8001766 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 800175e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001760:	fab3 f383 	clz	r3, r3
 8001764:	b2db      	uxtb	r3, r3
 8001766:	f003 031f 	and.w	r3, r3, #31
 800176a:	2201      	movs	r2, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	69d1      	ldr	r1, [r2, #28]
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	430b      	orrs	r3, r1
 800177c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	6859      	ldr	r1, [r3, #4]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	461a      	mov	r2, r3
 800178c:	f7ff fd02 	bl	8001194 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff fdda 	bl	800134e <LL_ADC_REG_IsConversionOngoing>
 800179a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fde7 	bl	8001374 <LL_ADC_INJ_IsConversionOngoing>
 80017a6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f040 80b3 	bne.w	8001916 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f040 80af 	bne.w	8001916 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	6819      	ldr	r1, [r3, #0]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	461a      	mov	r2, r3
 80017c6:	f7ff fd11 	bl	80011ec <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80017ca:	4b6a      	ldr	r3, [pc, #424]	; (8001974 <HAL_ADC_ConfigChannel+0x294>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80017d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017d6:	d10b      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x110>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	695a      	ldr	r2, [r3, #20]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	089b      	lsrs	r3, r3, #2
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	e01d      	b.n	800182c <HAL_ADC_ConfigChannel+0x14c>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	f003 0310 	and.w	r3, r3, #16
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d10b      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x136>
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	089b      	lsrs	r3, r3, #2
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	e00a      	b.n	800182c <HAL_ADC_ConfigChannel+0x14c>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	695a      	ldr	r2, [r3, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	089b      	lsrs	r3, r3, #2
 8001822:	f003 0304 	and.w	r3, r3, #4
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	2b04      	cmp	r3, #4
 8001834:	d027      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6818      	ldr	r0, [r3, #0]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	6919      	ldr	r1, [r3, #16]
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001844:	f7ff fc52 	bl	80010ec <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6818      	ldr	r0, [r3, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	6919      	ldr	r1, [r3, #16]
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	7e5b      	ldrb	r3, [r3, #25]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d102      	bne.n	800185e <HAL_ADC_ConfigChannel+0x17e>
 8001858:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800185c:	e000      	b.n	8001860 <HAL_ADC_ConfigChannel+0x180>
 800185e:	2300      	movs	r3, #0
 8001860:	461a      	mov	r2, r3
 8001862:	f7ff fc7c 	bl	800115e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	6919      	ldr	r1, [r3, #16]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	7e1b      	ldrb	r3, [r3, #24]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d102      	bne.n	800187c <HAL_ADC_ConfigChannel+0x19c>
 8001876:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800187a:	e000      	b.n	800187e <HAL_ADC_ConfigChannel+0x19e>
 800187c:	2300      	movs	r3, #0
 800187e:	461a      	mov	r2, r3
 8001880:	f7ff fc54 	bl	800112c <LL_ADC_SetDataRightShift>
 8001884:	e047      	b.n	8001916 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	069b      	lsls	r3, r3, #26
 8001896:	429a      	cmp	r2, r3
 8001898:	d107      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018a8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80018b0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	069b      	lsls	r3, r3, #26
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d107      	bne.n	80018ce <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018cc:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80018d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	069b      	lsls	r3, r3, #26
 80018de:	429a      	cmp	r2, r3
 80018e0:	d107      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80018f0:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	069b      	lsls	r3, r3, #26
 8001902:	429a      	cmp	r2, r3
 8001904:	d107      	bne.n	8001916 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001914:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff fd04 	bl	8001328 <LL_ADC_IsEnabled>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	f040 820d 	bne.w	8001d42 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6818      	ldr	r0, [r3, #0]
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	6819      	ldr	r1, [r3, #0]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	461a      	mov	r2, r3
 8001936:	f7ff fc85 	bl	8001244 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <HAL_ADC_ConfigChannel+0x290>)
 8001940:	4293      	cmp	r3, r2
 8001942:	f040 8133 	bne.w	8001bac <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001952:	2b00      	cmp	r3, #0
 8001954:	d110      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x298>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	0e9b      	lsrs	r3, r3, #26
 800195c:	3301      	adds	r3, #1
 800195e:	f003 031f 	and.w	r3, r3, #31
 8001962:	2b09      	cmp	r3, #9
 8001964:	bf94      	ite	ls
 8001966:	2301      	movls	r3, #1
 8001968:	2300      	movhi	r3, #0
 800196a:	b2db      	uxtb	r3, r3
 800196c:	e01e      	b.n	80019ac <HAL_ADC_ConfigChannel+0x2cc>
 800196e:	bf00      	nop
 8001970:	47ff0000 	.word	0x47ff0000
 8001974:	5c001000 	.word	0x5c001000
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001980:	fa93 f3a3 	rbit	r3, r3
 8001984:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001986:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001988:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800198a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8001990:	2320      	movs	r3, #32
 8001992:	e003      	b.n	800199c <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8001994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001996:	fab3 f383 	clz	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	3301      	adds	r3, #1
 800199e:	f003 031f 	and.w	r3, r3, #31
 80019a2:	2b09      	cmp	r3, #9
 80019a4:	bf94      	ite	ls
 80019a6:	2301      	movls	r3, #1
 80019a8:	2300      	movhi	r3, #0
 80019aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d079      	beq.n	8001aa4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d107      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x2ec>
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	0e9b      	lsrs	r3, r3, #26
 80019c2:	3301      	adds	r3, #1
 80019c4:	069b      	lsls	r3, r3, #26
 80019c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019ca:	e015      	b.n	80019f8 <HAL_ADC_ConfigChannel+0x318>
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80019da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019dc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80019de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d101      	bne.n	80019e8 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80019e4:	2320      	movs	r3, #32
 80019e6:	e003      	b.n	80019f0 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80019e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019ea:	fab3 f383 	clz	r3, r3
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	3301      	adds	r3, #1
 80019f2:	069b      	lsls	r3, r3, #26
 80019f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d109      	bne.n	8001a18 <HAL_ADC_ConfigChannel+0x338>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	0e9b      	lsrs	r3, r3, #26
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	2101      	movs	r1, #1
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	e017      	b.n	8001a48 <HAL_ADC_ConfigChannel+0x368>
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a20:	fa93 f3a3 	rbit	r3, r3
 8001a24:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a28:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8001a30:	2320      	movs	r3, #32
 8001a32:	e003      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8001a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a36:	fab3 f383 	clz	r3, r3
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	f003 031f 	and.w	r3, r3, #31
 8001a42:	2101      	movs	r1, #1
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	ea42 0103 	orr.w	r1, r2, r3
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d10a      	bne.n	8001a6e <HAL_ADC_ConfigChannel+0x38e>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	0e9b      	lsrs	r3, r3, #26
 8001a5e:	3301      	adds	r3, #1
 8001a60:	f003 021f 	and.w	r2, r3, #31
 8001a64:	4613      	mov	r3, r2
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	4413      	add	r3, r2
 8001a6a:	051b      	lsls	r3, r3, #20
 8001a6c:	e018      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x3c0>
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a76:	fa93 f3a3 	rbit	r3, r3
 8001a7a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8001a86:	2320      	movs	r3, #32
 8001a88:	e003      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8001a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a8c:	fab3 f383 	clz	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	3301      	adds	r3, #1
 8001a94:	f003 021f 	and.w	r2, r3, #31
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001aa0:	430b      	orrs	r3, r1
 8001aa2:	e07e      	b.n	8001ba2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d107      	bne.n	8001ac0 <HAL_ADC_ConfigChannel+0x3e0>
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	0e9b      	lsrs	r3, r3, #26
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	069b      	lsls	r3, r3, #26
 8001aba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001abe:	e015      	b.n	8001aec <HAL_ADC_ConfigChannel+0x40c>
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ac8:	fa93 f3a3 	rbit	r3, r3
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001ad8:	2320      	movs	r3, #32
 8001ada:	e003      	b.n	8001ae4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ade:	fab3 f383 	clz	r3, r3
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	3301      	adds	r3, #1
 8001ae6:	069b      	lsls	r3, r3, #26
 8001ae8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d109      	bne.n	8001b0c <HAL_ADC_ConfigChannel+0x42c>
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0e9b      	lsrs	r3, r3, #26
 8001afe:	3301      	adds	r3, #1
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f303 	lsl.w	r3, r1, r3
 8001b0a:	e017      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x45c>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	fa93 f3a3 	rbit	r3, r3
 8001b18:	61bb      	str	r3, [r7, #24]
  return result;
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001b1e:	6a3b      	ldr	r3, [r7, #32]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8001b24:	2320      	movs	r3, #32
 8001b26:	e003      	b.n	8001b30 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8001b28:	6a3b      	ldr	r3, [r7, #32]
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	3301      	adds	r3, #1
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	2101      	movs	r1, #1
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	ea42 0103 	orr.w	r1, r2, r3
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d10d      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x488>
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	0e9b      	lsrs	r3, r3, #26
 8001b52:	3301      	adds	r3, #1
 8001b54:	f003 021f 	and.w	r2, r3, #31
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	3b1e      	subs	r3, #30
 8001b60:	051b      	lsls	r3, r3, #20
 8001b62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b66:	e01b      	b.n	8001ba0 <HAL_ADC_ConfigChannel+0x4c0>
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	60fb      	str	r3, [r7, #12]
  return result;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8001b80:	2320      	movs	r3, #32
 8001b82:	e003      	b.n	8001b8c <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	f003 021f 	and.w	r2, r3, #31
 8001b92:	4613      	mov	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	4413      	add	r3, r2
 8001b98:	3b1e      	subs	r3, #30
 8001b9a:	051b      	lsls	r3, r3, #20
 8001b9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001ba0:	430b      	orrs	r3, r1
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	6892      	ldr	r2, [r2, #8]
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f7ff fb20 	bl	80011ec <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f280 80c6 	bge.w	8001d42 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a67      	ldr	r2, [pc, #412]	; (8001d58 <HAL_ADC_ConfigChannel+0x678>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d004      	beq.n	8001bca <HAL_ADC_ConfigChannel+0x4ea>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a65      	ldr	r2, [pc, #404]	; (8001d5c <HAL_ADC_ConfigChannel+0x67c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d101      	bne.n	8001bce <HAL_ADC_ConfigChannel+0x4ee>
 8001bca:	4b65      	ldr	r3, [pc, #404]	; (8001d60 <HAL_ADC_ConfigChannel+0x680>)
 8001bcc:	e000      	b.n	8001bd0 <HAL_ADC_ConfigChannel+0x4f0>
 8001bce:	4b65      	ldr	r3, [pc, #404]	; (8001d64 <HAL_ADC_ConfigChannel+0x684>)
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff fa7d 	bl	80010d0 <LL_ADC_GetCommonPathInternalCh>
 8001bd6:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a5e      	ldr	r2, [pc, #376]	; (8001d58 <HAL_ADC_ConfigChannel+0x678>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d004      	beq.n	8001bec <HAL_ADC_ConfigChannel+0x50c>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a5d      	ldr	r2, [pc, #372]	; (8001d5c <HAL_ADC_ConfigChannel+0x67c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d10e      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x52a>
 8001bec:	485a      	ldr	r0, [pc, #360]	; (8001d58 <HAL_ADC_ConfigChannel+0x678>)
 8001bee:	f7ff fb9b 	bl	8001328 <LL_ADC_IsEnabled>
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	4859      	ldr	r0, [pc, #356]	; (8001d5c <HAL_ADC_ConfigChannel+0x67c>)
 8001bf6:	f7ff fb97 	bl	8001328 <LL_ADC_IsEnabled>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4323      	orrs	r3, r4
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf0c      	ite	eq
 8001c02:	2301      	moveq	r3, #1
 8001c04:	2300      	movne	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	e008      	b.n	8001c1c <HAL_ADC_ConfigChannel+0x53c>
 8001c0a:	4857      	ldr	r0, [pc, #348]	; (8001d68 <HAL_ADC_ConfigChannel+0x688>)
 8001c0c:	f7ff fb8c 	bl	8001328 <LL_ADC_IsEnabled>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	bf0c      	ite	eq
 8001c16:	2301      	moveq	r3, #1
 8001c18:	2300      	movne	r3, #0
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d07d      	beq.n	8001d1c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a51      	ldr	r2, [pc, #324]	; (8001d6c <HAL_ADC_ConfigChannel+0x68c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d130      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x5ac>
 8001c2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d12b      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a4b      	ldr	r2, [pc, #300]	; (8001d68 <HAL_ADC_ConfigChannel+0x688>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	f040 8081 	bne.w	8001d42 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a44      	ldr	r2, [pc, #272]	; (8001d58 <HAL_ADC_ConfigChannel+0x678>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d004      	beq.n	8001c54 <HAL_ADC_ConfigChannel+0x574>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a43      	ldr	r2, [pc, #268]	; (8001d5c <HAL_ADC_ConfigChannel+0x67c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d101      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x578>
 8001c54:	4a42      	ldr	r2, [pc, #264]	; (8001d60 <HAL_ADC_ConfigChannel+0x680>)
 8001c56:	e000      	b.n	8001c5a <HAL_ADC_ConfigChannel+0x57a>
 8001c58:	4a42      	ldr	r2, [pc, #264]	; (8001d64 <HAL_ADC_ConfigChannel+0x684>)
 8001c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c60:	4619      	mov	r1, r3
 8001c62:	4610      	mov	r0, r2
 8001c64:	f7ff fa21 	bl	80010aa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c68:	4b41      	ldr	r3, [pc, #260]	; (8001d70 <HAL_ADC_ConfigChannel+0x690>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	099b      	lsrs	r3, r3, #6
 8001c6e:	4a41      	ldr	r2, [pc, #260]	; (8001d74 <HAL_ADC_ConfigChannel+0x694>)
 8001c70:	fba2 2303 	umull	r2, r3, r2, r3
 8001c74:	099b      	lsrs	r3, r3, #6
 8001c76:	3301      	adds	r3, #1
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001c7c:	e002      	b.n	8001c84 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d1f9      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001c8a:	e05a      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a39      	ldr	r2, [pc, #228]	; (8001d78 <HAL_ADC_ConfigChannel+0x698>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d11e      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x5f4>
 8001c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d119      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a30      	ldr	r2, [pc, #192]	; (8001d68 <HAL_ADC_ConfigChannel+0x688>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d14b      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a2a      	ldr	r2, [pc, #168]	; (8001d58 <HAL_ADC_ConfigChannel+0x678>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d004      	beq.n	8001cbe <HAL_ADC_ConfigChannel+0x5de>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a28      	ldr	r2, [pc, #160]	; (8001d5c <HAL_ADC_ConfigChannel+0x67c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d101      	bne.n	8001cc2 <HAL_ADC_ConfigChannel+0x5e2>
 8001cbe:	4a28      	ldr	r2, [pc, #160]	; (8001d60 <HAL_ADC_ConfigChannel+0x680>)
 8001cc0:	e000      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x5e4>
 8001cc2:	4a28      	ldr	r2, [pc, #160]	; (8001d64 <HAL_ADC_ConfigChannel+0x684>)
 8001cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4610      	mov	r0, r2
 8001cce:	f7ff f9ec 	bl	80010aa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001cd2:	e036      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a28      	ldr	r2, [pc, #160]	; (8001d7c <HAL_ADC_ConfigChannel+0x69c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d131      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x662>
 8001cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d12c      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1e      	ldr	r2, [pc, #120]	; (8001d68 <HAL_ADC_ConfigChannel+0x688>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d127      	bne.n	8001d42 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a18      	ldr	r2, [pc, #96]	; (8001d58 <HAL_ADC_ConfigChannel+0x678>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d004      	beq.n	8001d06 <HAL_ADC_ConfigChannel+0x626>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a16      	ldr	r2, [pc, #88]	; (8001d5c <HAL_ADC_ConfigChannel+0x67c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x62a>
 8001d06:	4a16      	ldr	r2, [pc, #88]	; (8001d60 <HAL_ADC_ConfigChannel+0x680>)
 8001d08:	e000      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x62c>
 8001d0a:	4a16      	ldr	r2, [pc, #88]	; (8001d64 <HAL_ADC_ConfigChannel+0x684>)
 8001d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d12:	4619      	mov	r1, r3
 8001d14:	4610      	mov	r0, r2
 8001d16:	f7ff f9c8 	bl	80010aa <LL_ADC_SetCommonPathInternalCh>
 8001d1a:	e012      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d20:	f043 0220 	orr.w	r2, r3, #32
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8001d2e:	e008      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d34:	f043 0220 	orr.w	r2, r3, #32
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001d4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3784      	adds	r7, #132	; 0x84
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd90      	pop	{r4, r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40022000 	.word	0x40022000
 8001d5c:	40022100 	.word	0x40022100
 8001d60:	40022300 	.word	0x40022300
 8001d64:	58026300 	.word	0x58026300
 8001d68:	58026000 	.word	0x58026000
 8001d6c:	cb840000 	.word	0xcb840000
 8001d70:	24000000 	.word	0x24000000
 8001d74:	053e2d63 	.word	0x053e2d63
 8001d78:	c7520000 	.word	0xc7520000
 8001d7c:	cfb80000 	.word	0xcfb80000

08001d80 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a79      	ldr	r2, [pc, #484]	; (8001f74 <ADC_ConfigureBoostMode+0x1f4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d004      	beq.n	8001d9c <ADC_ConfigureBoostMode+0x1c>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a78      	ldr	r2, [pc, #480]	; (8001f78 <ADC_ConfigureBoostMode+0x1f8>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d109      	bne.n	8001db0 <ADC_ConfigureBoostMode+0x30>
 8001d9c:	4b77      	ldr	r3, [pc, #476]	; (8001f7c <ADC_ConfigureBoostMode+0x1fc>)
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf14      	ite	ne
 8001da8:	2301      	movne	r3, #1
 8001daa:	2300      	moveq	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	e008      	b.n	8001dc2 <ADC_ConfigureBoostMode+0x42>
 8001db0:	4b73      	ldr	r3, [pc, #460]	; (8001f80 <ADC_ConfigureBoostMode+0x200>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	bf14      	ite	ne
 8001dbc:	2301      	movne	r3, #1
 8001dbe:	2300      	moveq	r3, #0
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d01c      	beq.n	8001e00 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001dc6:	f001 fc63 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 8001dca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001dd4:	d010      	beq.n	8001df8 <ADC_ConfigureBoostMode+0x78>
 8001dd6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001dda:	d871      	bhi.n	8001ec0 <ADC_ConfigureBoostMode+0x140>
 8001ddc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001de0:	d002      	beq.n	8001de8 <ADC_ConfigureBoostMode+0x68>
 8001de2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001de6:	d16b      	bne.n	8001ec0 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	0c1b      	lsrs	r3, r3, #16
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df4:	60fb      	str	r3, [r7, #12]
        break;
 8001df6:	e066      	b.n	8001ec6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	60fb      	str	r3, [r7, #12]
        break;
 8001dfe:	e062      	b.n	8001ec6 <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001e00:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001e04:	f002 fbe6 	bl	80045d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e08:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001e12:	d051      	beq.n	8001eb8 <ADC_ConfigureBoostMode+0x138>
 8001e14:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001e18:	d854      	bhi.n	8001ec4 <ADC_ConfigureBoostMode+0x144>
 8001e1a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001e1e:	d047      	beq.n	8001eb0 <ADC_ConfigureBoostMode+0x130>
 8001e20:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001e24:	d84e      	bhi.n	8001ec4 <ADC_ConfigureBoostMode+0x144>
 8001e26:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001e2a:	d03d      	beq.n	8001ea8 <ADC_ConfigureBoostMode+0x128>
 8001e2c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001e30:	d848      	bhi.n	8001ec4 <ADC_ConfigureBoostMode+0x144>
 8001e32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e36:	d033      	beq.n	8001ea0 <ADC_ConfigureBoostMode+0x120>
 8001e38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001e3c:	d842      	bhi.n	8001ec4 <ADC_ConfigureBoostMode+0x144>
 8001e3e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001e42:	d029      	beq.n	8001e98 <ADC_ConfigureBoostMode+0x118>
 8001e44:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001e48:	d83c      	bhi.n	8001ec4 <ADC_ConfigureBoostMode+0x144>
 8001e4a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001e4e:	d01a      	beq.n	8001e86 <ADC_ConfigureBoostMode+0x106>
 8001e50:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001e54:	d836      	bhi.n	8001ec4 <ADC_ConfigureBoostMode+0x144>
 8001e56:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001e5a:	d014      	beq.n	8001e86 <ADC_ConfigureBoostMode+0x106>
 8001e5c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001e60:	d830      	bhi.n	8001ec4 <ADC_ConfigureBoostMode+0x144>
 8001e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e66:	d00e      	beq.n	8001e86 <ADC_ConfigureBoostMode+0x106>
 8001e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e6c:	d82a      	bhi.n	8001ec4 <ADC_ConfigureBoostMode+0x144>
 8001e6e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001e72:	d008      	beq.n	8001e86 <ADC_ConfigureBoostMode+0x106>
 8001e74:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001e78:	d824      	bhi.n	8001ec4 <ADC_ConfigureBoostMode+0x144>
 8001e7a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e7e:	d002      	beq.n	8001e86 <ADC_ConfigureBoostMode+0x106>
 8001e80:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e84:	d11e      	bne.n	8001ec4 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	0c9b      	lsrs	r3, r3, #18
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e94:	60fb      	str	r3, [r7, #12]
        break;
 8001e96:	e016      	b.n	8001ec6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	091b      	lsrs	r3, r3, #4
 8001e9c:	60fb      	str	r3, [r7, #12]
        break;
 8001e9e:	e012      	b.n	8001ec6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	095b      	lsrs	r3, r3, #5
 8001ea4:	60fb      	str	r3, [r7, #12]
        break;
 8001ea6:	e00e      	b.n	8001ec6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	099b      	lsrs	r3, r3, #6
 8001eac:	60fb      	str	r3, [r7, #12]
        break;
 8001eae:	e00a      	b.n	8001ec6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	09db      	lsrs	r3, r3, #7
 8001eb4:	60fb      	str	r3, [r7, #12]
        break;
 8001eb6:	e006      	b.n	8001ec6 <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	60fb      	str	r3, [r7, #12]
        break;
 8001ebe:	e002      	b.n	8001ec6 <ADC_ConfigureBoostMode+0x146>
        break;
 8001ec0:	bf00      	nop
 8001ec2:	e000      	b.n	8001ec6 <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8001ec4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8001ec6:	f7ff f8d1 	bl	800106c <HAL_GetREVID>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d815      	bhi.n	8001f00 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4a2b      	ldr	r2, [pc, #172]	; (8001f84 <ADC_ConfigureBoostMode+0x204>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d908      	bls.n	8001eee <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eea:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8001eec:	e03e      	b.n	8001f6c <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001efc:	609a      	str	r2, [r3, #8]
}
 8001efe:	e035      	b.n	8001f6c <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	085b      	lsrs	r3, r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	4a1f      	ldr	r2, [pc, #124]	; (8001f88 <ADC_ConfigureBoostMode+0x208>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d808      	bhi.n	8001f20 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f1c:	609a      	str	r2, [r3, #8]
}
 8001f1e:	e025      	b.n	8001f6c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4a1a      	ldr	r2, [pc, #104]	; (8001f8c <ADC_ConfigureBoostMode+0x20c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d80a      	bhi.n	8001f3e <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f3a:	609a      	str	r2, [r3, #8]
}
 8001f3c:	e016      	b.n	8001f6c <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4a13      	ldr	r2, [pc, #76]	; (8001f90 <ADC_ConfigureBoostMode+0x210>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d80a      	bhi.n	8001f5c <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f58:	609a      	str	r2, [r3, #8]
}
 8001f5a:	e007      	b.n	8001f6c <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001f6a:	609a      	str	r2, [r3, #8]
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40022000 	.word	0x40022000
 8001f78:	40022100 	.word	0x40022100
 8001f7c:	40022300 	.word	0x40022300
 8001f80:	58026300 	.word	0x58026300
 8001f84:	01312d00 	.word	0x01312d00
 8001f88:	005f5e10 	.word	0x005f5e10
 8001f8c:	00bebc20 	.word	0x00bebc20
 8001f90:	017d7840 	.word	0x017d7840

08001f94 <LL_ADC_IsEnabled>:
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d101      	bne.n	8001fac <LL_ADC_IsEnabled+0x18>
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e000      	b.n	8001fae <LL_ADC_IsEnabled+0x1a>
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <LL_ADC_REG_IsConversionOngoing>:
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d101      	bne.n	8001fd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e000      	b.n	8001fd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8001fe0:	b590      	push	{r4, r7, lr}
 8001fe2:	b09f      	sub	sp, #124	; 0x7c
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d101      	bne.n	8001ffe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e0be      	b.n	800217c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8002006:	2300      	movs	r3, #0
 8002008:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800200a:	2300      	movs	r3, #0
 800200c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a5c      	ldr	r2, [pc, #368]	; (8002184 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d102      	bne.n	800201e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002018:	4b5b      	ldr	r3, [pc, #364]	; (8002188 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800201a:	60bb      	str	r3, [r7, #8]
 800201c:	e001      	b.n	8002022 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800201e:	2300      	movs	r3, #0
 8002020:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10b      	bne.n	8002040 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202c:	f043 0220 	orr.w	r2, r3, #32
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e09d      	b.n	800217c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff ffb9 	bl	8001fba <LL_ADC_REG_IsConversionOngoing>
 8002048:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ffb3 	bl	8001fba <LL_ADC_REG_IsConversionOngoing>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d17f      	bne.n	800215a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800205a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800205c:	2b00      	cmp	r3, #0
 800205e:	d17c      	bne.n	800215a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a47      	ldr	r2, [pc, #284]	; (8002184 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d004      	beq.n	8002074 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a46      	ldr	r2, [pc, #280]	; (8002188 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d101      	bne.n	8002078 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8002074:	4b45      	ldr	r3, [pc, #276]	; (800218c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8002076:	e000      	b.n	800207a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8002078:	4b45      	ldr	r3, [pc, #276]	; (8002190 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800207a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d039      	beq.n	80020f8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	431a      	orrs	r2, r3
 8002092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002094:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a3a      	ldr	r2, [pc, #232]	; (8002184 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d004      	beq.n	80020aa <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a38      	ldr	r2, [pc, #224]	; (8002188 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d10e      	bne.n	80020c8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80020aa:	4836      	ldr	r0, [pc, #216]	; (8002184 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80020ac:	f7ff ff72 	bl	8001f94 <LL_ADC_IsEnabled>
 80020b0:	4604      	mov	r4, r0
 80020b2:	4835      	ldr	r0, [pc, #212]	; (8002188 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80020b4:	f7ff ff6e 	bl	8001f94 <LL_ADC_IsEnabled>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4323      	orrs	r3, r4
 80020bc:	2b00      	cmp	r3, #0
 80020be:	bf0c      	ite	eq
 80020c0:	2301      	moveq	r3, #1
 80020c2:	2300      	movne	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	e008      	b.n	80020da <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80020c8:	4832      	ldr	r0, [pc, #200]	; (8002194 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80020ca:	f7ff ff63 	bl	8001f94 <LL_ADC_IsEnabled>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bf0c      	ite	eq
 80020d4:	2301      	moveq	r3, #1
 80020d6:	2300      	movne	r3, #0
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d047      	beq.n	800216e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80020de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	4b2d      	ldr	r3, [pc, #180]	; (8002198 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80020e4:	4013      	ands	r3, r2
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	6811      	ldr	r1, [r2, #0]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	6892      	ldr	r2, [r2, #8]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	431a      	orrs	r2, r3
 80020f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020f4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80020f6:	e03a      	b.n	800216e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80020f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002100:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002102:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a1e      	ldr	r2, [pc, #120]	; (8002184 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d004      	beq.n	8002118 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d10e      	bne.n	8002136 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002118:	481a      	ldr	r0, [pc, #104]	; (8002184 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800211a:	f7ff ff3b 	bl	8001f94 <LL_ADC_IsEnabled>
 800211e:	4604      	mov	r4, r0
 8002120:	4819      	ldr	r0, [pc, #100]	; (8002188 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002122:	f7ff ff37 	bl	8001f94 <LL_ADC_IsEnabled>
 8002126:	4603      	mov	r3, r0
 8002128:	4323      	orrs	r3, r4
 800212a:	2b00      	cmp	r3, #0
 800212c:	bf0c      	ite	eq
 800212e:	2301      	moveq	r3, #1
 8002130:	2300      	movne	r3, #0
 8002132:	b2db      	uxtb	r3, r3
 8002134:	e008      	b.n	8002148 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002136:	4817      	ldr	r0, [pc, #92]	; (8002194 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002138:	f7ff ff2c 	bl	8001f94 <LL_ADC_IsEnabled>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	bf0c      	ite	eq
 8002142:	2301      	moveq	r3, #1
 8002144:	2300      	movne	r3, #0
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d010      	beq.n	800216e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800214c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002152:	4013      	ands	r3, r2
 8002154:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002156:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002158:	e009      	b.n	800216e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215e:	f043 0220 	orr.w	r2, r3, #32
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800216c:	e000      	b.n	8002170 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800216e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002178:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800217c:	4618      	mov	r0, r3
 800217e:	377c      	adds	r7, #124	; 0x7c
 8002180:	46bd      	mov	sp, r7
 8002182:	bd90      	pop	{r4, r7, pc}
 8002184:	40022000 	.word	0x40022000
 8002188:	40022100 	.word	0x40022100
 800218c:	40022300 	.word	0x40022300
 8002190:	58026300 	.word	0x58026300
 8002194:	58026000 	.word	0x58026000
 8002198:	fffff0e0 	.word	0xfffff0e0

0800219c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <__NVIC_SetPriorityGrouping+0x40>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021b8:	4013      	ands	r3, r2
 80021ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <__NVIC_SetPriorityGrouping+0x44>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ca:	4a04      	ldr	r2, [pc, #16]	; (80021dc <__NVIC_SetPriorityGrouping+0x40>)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	60d3      	str	r3, [r2, #12]
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000ed00 	.word	0xe000ed00
 80021e0:	05fa0000 	.word	0x05fa0000

080021e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021e8:	4b04      	ldr	r3, [pc, #16]	; (80021fc <__NVIC_GetPriorityGrouping+0x18>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	0a1b      	lsrs	r3, r3, #8
 80021ee:	f003 0307 	and.w	r3, r3, #7
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	4603      	mov	r3, r0
 8002208:	6039      	str	r1, [r7, #0]
 800220a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800220c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002210:	2b00      	cmp	r3, #0
 8002212:	db0a      	blt.n	800222a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	490c      	ldr	r1, [pc, #48]	; (800224c <__NVIC_SetPriority+0x4c>)
 800221a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800221e:	0112      	lsls	r2, r2, #4
 8002220:	b2d2      	uxtb	r2, r2
 8002222:	440b      	add	r3, r1
 8002224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002228:	e00a      	b.n	8002240 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4908      	ldr	r1, [pc, #32]	; (8002250 <__NVIC_SetPriority+0x50>)
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	3b04      	subs	r3, #4
 8002238:	0112      	lsls	r2, r2, #4
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	440b      	add	r3, r1
 800223e:	761a      	strb	r2, [r3, #24]
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000e100 	.word	0xe000e100
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002254:	b480      	push	{r7}
 8002256:	b089      	sub	sp, #36	; 0x24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f1c3 0307 	rsb	r3, r3, #7
 800226e:	2b04      	cmp	r3, #4
 8002270:	bf28      	it	cs
 8002272:	2304      	movcs	r3, #4
 8002274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	3304      	adds	r3, #4
 800227a:	2b06      	cmp	r3, #6
 800227c:	d902      	bls.n	8002284 <NVIC_EncodePriority+0x30>
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3b03      	subs	r3, #3
 8002282:	e000      	b.n	8002286 <NVIC_EncodePriority+0x32>
 8002284:	2300      	movs	r3, #0
 8002286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002288:	f04f 32ff 	mov.w	r2, #4294967295
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	43da      	mvns	r2, r3
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	401a      	ands	r2, r3
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	fa01 f303 	lsl.w	r3, r1, r3
 80022a6:	43d9      	mvns	r1, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ac:	4313      	orrs	r3, r2
         );
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3724      	adds	r7, #36	; 0x24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
	...

080022bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022cc:	d301      	bcc.n	80022d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00f      	b.n	80022f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <SysTick_Config+0x40>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022da:	210f      	movs	r1, #15
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	f7ff ff8e 	bl	8002200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <SysTick_Config+0x40>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <SysTick_Config+0x40>)
 80022ec:	2207      	movs	r2, #7
 80022ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	e000e010 	.word	0xe000e010

08002300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff47 	bl	800219c <__NVIC_SetPriorityGrouping>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002324:	f7ff ff5e 	bl	80021e4 <__NVIC_GetPriorityGrouping>
 8002328:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	68b9      	ldr	r1, [r7, #8]
 800232e:	6978      	ldr	r0, [r7, #20]
 8002330:	f7ff ff90 	bl	8002254 <NVIC_EncodePriority>
 8002334:	4602      	mov	r2, r0
 8002336:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff ff5f 	bl	8002200 <__NVIC_SetPriority>
}
 8002342:	bf00      	nop
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ffb2 	bl	80022bc <SysTick_Config>
 8002358:	4603      	mov	r3, r0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3708      	adds	r7, #8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
	...

08002364 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002364:	b480      	push	{r7}
 8002366:	b089      	sub	sp, #36	; 0x24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002372:	4b89      	ldr	r3, [pc, #548]	; (8002598 <HAL_GPIO_Init+0x234>)
 8002374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002376:	e194      	b.n	80026a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	2101      	movs	r1, #1
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	fa01 f303 	lsl.w	r3, r1, r3
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f000 8186 	beq.w	800269c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b01      	cmp	r3, #1
 800239a:	d005      	beq.n	80023a8 <HAL_GPIO_Init+0x44>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d130      	bne.n	800240a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	2203      	movs	r2, #3
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4013      	ands	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68da      	ldr	r2, [r3, #12]
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023de:	2201      	movs	r2, #1
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	f003 0201 	and.w	r2, r3, #1
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b03      	cmp	r3, #3
 8002414:	d017      	beq.n	8002446 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d123      	bne.n	800249a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	08da      	lsrs	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3208      	adds	r2, #8
 800245a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	220f      	movs	r2, #15
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	691a      	ldr	r2, [r3, #16]
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	08da      	lsrs	r2, r3, #3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3208      	adds	r2, #8
 8002494:	69b9      	ldr	r1, [r7, #24]
 8002496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 0203 	and.w	r2, r3, #3
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	fa02 f303 	lsl.w	r3, r2, r3
 80024c2:	69ba      	ldr	r2, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 80e0 	beq.w	800269c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024dc:	4b2f      	ldr	r3, [pc, #188]	; (800259c <HAL_GPIO_Init+0x238>)
 80024de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024e2:	4a2e      	ldr	r2, [pc, #184]	; (800259c <HAL_GPIO_Init+0x238>)
 80024e4:	f043 0302 	orr.w	r3, r3, #2
 80024e8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80024ec:	4b2b      	ldr	r3, [pc, #172]	; (800259c <HAL_GPIO_Init+0x238>)
 80024ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80024f2:	f003 0302 	and.w	r3, r3, #2
 80024f6:	60fb      	str	r3, [r7, #12]
 80024f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024fa:	4a29      	ldr	r2, [pc, #164]	; (80025a0 <HAL_GPIO_Init+0x23c>)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	089b      	lsrs	r3, r3, #2
 8002500:	3302      	adds	r3, #2
 8002502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002506:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	220f      	movs	r2, #15
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43db      	mvns	r3, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4013      	ands	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a20      	ldr	r2, [pc, #128]	; (80025a4 <HAL_GPIO_Init+0x240>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d052      	beq.n	80025cc <HAL_GPIO_Init+0x268>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a1f      	ldr	r2, [pc, #124]	; (80025a8 <HAL_GPIO_Init+0x244>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d031      	beq.n	8002592 <HAL_GPIO_Init+0x22e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a1e      	ldr	r2, [pc, #120]	; (80025ac <HAL_GPIO_Init+0x248>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d02b      	beq.n	800258e <HAL_GPIO_Init+0x22a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a1d      	ldr	r2, [pc, #116]	; (80025b0 <HAL_GPIO_Init+0x24c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d025      	beq.n	800258a <HAL_GPIO_Init+0x226>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a1c      	ldr	r2, [pc, #112]	; (80025b4 <HAL_GPIO_Init+0x250>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d01f      	beq.n	8002586 <HAL_GPIO_Init+0x222>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <HAL_GPIO_Init+0x254>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d019      	beq.n	8002582 <HAL_GPIO_Init+0x21e>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a1a      	ldr	r2, [pc, #104]	; (80025bc <HAL_GPIO_Init+0x258>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d013      	beq.n	800257e <HAL_GPIO_Init+0x21a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a19      	ldr	r2, [pc, #100]	; (80025c0 <HAL_GPIO_Init+0x25c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d00d      	beq.n	800257a <HAL_GPIO_Init+0x216>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a18      	ldr	r2, [pc, #96]	; (80025c4 <HAL_GPIO_Init+0x260>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d007      	beq.n	8002576 <HAL_GPIO_Init+0x212>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a17      	ldr	r2, [pc, #92]	; (80025c8 <HAL_GPIO_Init+0x264>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d101      	bne.n	8002572 <HAL_GPIO_Init+0x20e>
 800256e:	2309      	movs	r3, #9
 8002570:	e02d      	b.n	80025ce <HAL_GPIO_Init+0x26a>
 8002572:	230a      	movs	r3, #10
 8002574:	e02b      	b.n	80025ce <HAL_GPIO_Init+0x26a>
 8002576:	2308      	movs	r3, #8
 8002578:	e029      	b.n	80025ce <HAL_GPIO_Init+0x26a>
 800257a:	2307      	movs	r3, #7
 800257c:	e027      	b.n	80025ce <HAL_GPIO_Init+0x26a>
 800257e:	2306      	movs	r3, #6
 8002580:	e025      	b.n	80025ce <HAL_GPIO_Init+0x26a>
 8002582:	2305      	movs	r3, #5
 8002584:	e023      	b.n	80025ce <HAL_GPIO_Init+0x26a>
 8002586:	2304      	movs	r3, #4
 8002588:	e021      	b.n	80025ce <HAL_GPIO_Init+0x26a>
 800258a:	2303      	movs	r3, #3
 800258c:	e01f      	b.n	80025ce <HAL_GPIO_Init+0x26a>
 800258e:	2302      	movs	r3, #2
 8002590:	e01d      	b.n	80025ce <HAL_GPIO_Init+0x26a>
 8002592:	2301      	movs	r3, #1
 8002594:	e01b      	b.n	80025ce <HAL_GPIO_Init+0x26a>
 8002596:	bf00      	nop
 8002598:	58000080 	.word	0x58000080
 800259c:	58024400 	.word	0x58024400
 80025a0:	58000400 	.word	0x58000400
 80025a4:	58020000 	.word	0x58020000
 80025a8:	58020400 	.word	0x58020400
 80025ac:	58020800 	.word	0x58020800
 80025b0:	58020c00 	.word	0x58020c00
 80025b4:	58021000 	.word	0x58021000
 80025b8:	58021400 	.word	0x58021400
 80025bc:	58021800 	.word	0x58021800
 80025c0:	58021c00 	.word	0x58021c00
 80025c4:	58022000 	.word	0x58022000
 80025c8:	58022400 	.word	0x58022400
 80025cc:	2300      	movs	r3, #0
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	f002 0203 	and.w	r2, r2, #3
 80025d4:	0092      	lsls	r2, r2, #2
 80025d6:	4093      	lsls	r3, r2
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025de:	4938      	ldr	r1, [pc, #224]	; (80026c0 <HAL_GPIO_Init+0x35c>)
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	089b      	lsrs	r3, r3, #2
 80025e4:	3302      	adds	r3, #2
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4313      	orrs	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002612:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800261a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	43db      	mvns	r3, r3
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	4013      	ands	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d003      	beq.n	8002640 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	4313      	orrs	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002640:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	3301      	adds	r3, #1
 80026a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	fa22 f303 	lsr.w	r3, r2, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f47f ae63 	bne.w	8002378 <HAL_GPIO_Init+0x14>
  }
}
 80026b2:	bf00      	nop
 80026b4:	bf00      	nop
 80026b6:	3724      	adds	r7, #36	; 0x24
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	58000400 	.word	0x58000400

080026c4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80026cc:	4a08      	ldr	r2, [pc, #32]	; (80026f0 <HAL_HSEM_FastTake+0x2c>)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3320      	adds	r3, #32
 80026d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d6:	4a07      	ldr	r2, [pc, #28]	; (80026f4 <HAL_HSEM_FastTake+0x30>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d101      	bne.n	80026e0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	e000      	b.n	80026e2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	58026400 	.word	0x58026400
 80026f4:	80000300 	.word	0x80000300

080026f8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002702:	4906      	ldr	r1, [pc, #24]	; (800271c <HAL_HSEM_Release+0x24>)
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	58026400 	.word	0x58026400

08002720 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002728:	4b29      	ldr	r3, [pc, #164]	; (80027d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	2b06      	cmp	r3, #6
 8002732:	d00a      	beq.n	800274a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002734:	4b26      	ldr	r3, [pc, #152]	; (80027d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	429a      	cmp	r2, r3
 8002740:	d001      	beq.n	8002746 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e040      	b.n	80027c8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e03e      	b.n	80027c8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800274a:	4b21      	ldr	r3, [pc, #132]	; (80027d0 <HAL_PWREx_ConfigSupply+0xb0>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002752:	491f      	ldr	r1, [pc, #124]	; (80027d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4313      	orrs	r3, r2
 8002758:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800275a:	f7fe fc57 	bl	800100c <HAL_GetTick>
 800275e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002760:	e009      	b.n	8002776 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002762:	f7fe fc53 	bl	800100c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002770:	d901      	bls.n	8002776 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e028      	b.n	80027c8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002776:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800277e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002782:	d1ee      	bne.n	8002762 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b1e      	cmp	r3, #30
 8002788:	d008      	beq.n	800279c <HAL_PWREx_ConfigSupply+0x7c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2b2e      	cmp	r3, #46	; 0x2e
 800278e:	d005      	beq.n	800279c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b1d      	cmp	r3, #29
 8002794:	d002      	beq.n	800279c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b2d      	cmp	r3, #45	; 0x2d
 800279a:	d114      	bne.n	80027c6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800279c:	f7fe fc36 	bl	800100c <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80027a2:	e009      	b.n	80027b8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80027a4:	f7fe fc32 	bl	800100c <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80027b2:	d901      	bls.n	80027b8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e007      	b.n	80027c8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80027b8:	4b05      	ldr	r3, [pc, #20]	; (80027d0 <HAL_PWREx_ConfigSupply+0xb0>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c4:	d1ee      	bne.n	80027a4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	58024800 	.word	0x58024800

080027d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b08c      	sub	sp, #48	; 0x30
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	f000 bc1d 	b.w	8003022 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 8087 	beq.w	8002904 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f6:	4b99      	ldr	r3, [pc, #612]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002800:	4b96      	ldr	r3, [pc, #600]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002808:	2b10      	cmp	r3, #16
 800280a:	d007      	beq.n	800281c <HAL_RCC_OscConfig+0x48>
 800280c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280e:	2b18      	cmp	r3, #24
 8002810:	d110      	bne.n	8002834 <HAL_RCC_OscConfig+0x60>
 8002812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d10b      	bne.n	8002834 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	4b8f      	ldr	r3, [pc, #572]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d06c      	beq.n	8002902 <HAL_RCC_OscConfig+0x12e>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d168      	bne.n	8002902 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e3f6      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283c:	d106      	bne.n	800284c <HAL_RCC_OscConfig+0x78>
 800283e:	4b87      	ldr	r3, [pc, #540]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a86      	ldr	r2, [pc, #536]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e02e      	b.n	80028aa <HAL_RCC_OscConfig+0xd6>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d10c      	bne.n	800286e <HAL_RCC_OscConfig+0x9a>
 8002854:	4b81      	ldr	r3, [pc, #516]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a80      	ldr	r2, [pc, #512]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 800285a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	4b7e      	ldr	r3, [pc, #504]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a7d      	ldr	r2, [pc, #500]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002866:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800286a:	6013      	str	r3, [r2, #0]
 800286c:	e01d      	b.n	80028aa <HAL_RCC_OscConfig+0xd6>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002876:	d10c      	bne.n	8002892 <HAL_RCC_OscConfig+0xbe>
 8002878:	4b78      	ldr	r3, [pc, #480]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a77      	ldr	r2, [pc, #476]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 800287e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b75      	ldr	r3, [pc, #468]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a74      	ldr	r2, [pc, #464]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 800288a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800288e:	6013      	str	r3, [r2, #0]
 8002890:	e00b      	b.n	80028aa <HAL_RCC_OscConfig+0xd6>
 8002892:	4b72      	ldr	r3, [pc, #456]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a71      	ldr	r2, [pc, #452]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002898:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b6f      	ldr	r3, [pc, #444]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6e      	ldr	r2, [pc, #440]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 80028a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d013      	beq.n	80028da <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b2:	f7fe fbab 	bl	800100c <HAL_GetTick>
 80028b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028ba:	f7fe fba7 	bl	800100c <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b64      	cmp	r3, #100	; 0x64
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e3aa      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028cc:	4b63      	ldr	r3, [pc, #396]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0xe6>
 80028d8:	e014      	b.n	8002904 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7fe fb97 	bl	800100c <HAL_GetTick>
 80028de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e2:	f7fe fb93 	bl	800100c <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b64      	cmp	r3, #100	; 0x64
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e396      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028f4:	4b59      	ldr	r3, [pc, #356]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1f0      	bne.n	80028e2 <HAL_RCC_OscConfig+0x10e>
 8002900:	e000      	b.n	8002904 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002902:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 80cb 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002912:	4b52      	ldr	r3, [pc, #328]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800291a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800291c:	4b4f      	ldr	r3, [pc, #316]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d007      	beq.n	8002938 <HAL_RCC_OscConfig+0x164>
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	2b18      	cmp	r3, #24
 800292c:	d156      	bne.n	80029dc <HAL_RCC_OscConfig+0x208>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b00      	cmp	r3, #0
 8002936:	d151      	bne.n	80029dc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002938:	4b48      	ldr	r3, [pc, #288]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d005      	beq.n	8002950 <HAL_RCC_OscConfig+0x17c>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e368      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002950:	4b42      	ldr	r3, [pc, #264]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 0219 	bic.w	r2, r3, #25
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	493f      	ldr	r1, [pc, #252]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 800295e:	4313      	orrs	r3, r2
 8002960:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002962:	f7fe fb53 	bl	800100c <HAL_GetTick>
 8002966:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800296a:	f7fe fb4f 	bl	800100c <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e352      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800297c:	4b37      	ldr	r3, [pc, #220]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002988:	f7fe fb70 	bl	800106c <HAL_GetREVID>
 800298c:	4603      	mov	r3, r0
 800298e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002992:	4293      	cmp	r3, r2
 8002994:	d817      	bhi.n	80029c6 <HAL_RCC_OscConfig+0x1f2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b40      	cmp	r3, #64	; 0x40
 800299c:	d108      	bne.n	80029b0 <HAL_RCC_OscConfig+0x1dc>
 800299e:	4b2f      	ldr	r3, [pc, #188]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80029a6:	4a2d      	ldr	r2, [pc, #180]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ac:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029ae:	e07b      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b0:	4b2a      	ldr	r3, [pc, #168]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	031b      	lsls	r3, r3, #12
 80029be:	4927      	ldr	r1, [pc, #156]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c4:	e070      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c6:	4b25      	ldr	r3, [pc, #148]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	061b      	lsls	r3, r3, #24
 80029d4:	4921      	ldr	r1, [pc, #132]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029da:	e065      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d048      	beq.n	8002a76 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80029e4:	4b1d      	ldr	r3, [pc, #116]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f023 0219 	bic.w	r2, r3, #25
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	491a      	ldr	r1, [pc, #104]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f6:	f7fe fb09 	bl	800100c <HAL_GetTick>
 80029fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029fe:	f7fe fb05 	bl	800100c <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e308      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a10:	4b12      	ldr	r3, [pc, #72]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1c:	f7fe fb26 	bl	800106c <HAL_GetREVID>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d81a      	bhi.n	8002a60 <HAL_RCC_OscConfig+0x28c>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b40      	cmp	r3, #64	; 0x40
 8002a30:	d108      	bne.n	8002a44 <HAL_RCC_OscConfig+0x270>
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a3a:	4a08      	ldr	r2, [pc, #32]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a40:	6053      	str	r3, [r2, #4]
 8002a42:	e031      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	691b      	ldr	r3, [r3, #16]
 8002a50:	031b      	lsls	r3, r3, #12
 8002a52:	4902      	ldr	r1, [pc, #8]	; (8002a5c <HAL_RCC_OscConfig+0x288>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
 8002a58:	e026      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
 8002a5a:	bf00      	nop
 8002a5c:	58024400 	.word	0x58024400
 8002a60:	4b9a      	ldr	r3, [pc, #616]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	691b      	ldr	r3, [r3, #16]
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	4997      	ldr	r1, [pc, #604]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
 8002a74:	e018      	b.n	8002aa8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a76:	4b95      	ldr	r3, [pc, #596]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a94      	ldr	r2, [pc, #592]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a82:	f7fe fac3 	bl	800100c <HAL_GetTick>
 8002a86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a88:	e008      	b.n	8002a9c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a8a:	f7fe fabf 	bl	800100c <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e2c2      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002a9c:	4b8b      	ldr	r3, [pc, #556]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1f0      	bne.n	8002a8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 80a9 	beq.w	8002c08 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab6:	4b85      	ldr	r3, [pc, #532]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002abe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ac0:	4b82      	ldr	r3, [pc, #520]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002ac6:	69bb      	ldr	r3, [r7, #24]
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d007      	beq.n	8002adc <HAL_RCC_OscConfig+0x308>
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2b18      	cmp	r3, #24
 8002ad0:	d13a      	bne.n	8002b48 <HAL_RCC_OscConfig+0x374>
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d135      	bne.n	8002b48 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002adc:	4b7b      	ldr	r3, [pc, #492]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d005      	beq.n	8002af4 <HAL_RCC_OscConfig+0x320>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	2b80      	cmp	r3, #128	; 0x80
 8002aee:	d001      	beq.n	8002af4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e296      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002af4:	f7fe faba 	bl	800106c <HAL_GetREVID>
 8002af8:	4603      	mov	r3, r0
 8002afa:	f241 0203 	movw	r2, #4099	; 0x1003
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d817      	bhi.n	8002b32 <HAL_RCC_OscConfig+0x35e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	2b20      	cmp	r3, #32
 8002b08:	d108      	bne.n	8002b1c <HAL_RCC_OscConfig+0x348>
 8002b0a:	4b70      	ldr	r3, [pc, #448]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b12:	4a6e      	ldr	r2, [pc, #440]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b18:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b1a:	e075      	b.n	8002c08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b1c:	4b6b      	ldr	r3, [pc, #428]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	069b      	lsls	r3, r3, #26
 8002b2a:	4968      	ldr	r1, [pc, #416]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b30:	e06a      	b.n	8002c08 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b32:	4b66      	ldr	r3, [pc, #408]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	061b      	lsls	r3, r3, #24
 8002b40:	4962      	ldr	r1, [pc, #392]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002b46:	e05f      	b.n	8002c08 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d042      	beq.n	8002bd6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002b50:	4b5e      	ldr	r3, [pc, #376]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a5d      	ldr	r2, [pc, #372]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fa56 	bl	800100c <HAL_GetTick>
 8002b60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002b64:	f7fe fa52 	bl	800100c <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e255      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b76:	4b55      	ldr	r3, [pc, #340]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0f0      	beq.n	8002b64 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b82:	f7fe fa73 	bl	800106c <HAL_GetREVID>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f241 0203 	movw	r2, #4099	; 0x1003
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d817      	bhi.n	8002bc0 <HAL_RCC_OscConfig+0x3ec>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a1b      	ldr	r3, [r3, #32]
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d108      	bne.n	8002baa <HAL_RCC_OscConfig+0x3d6>
 8002b98:	4b4c      	ldr	r3, [pc, #304]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002ba0:	4a4a      	ldr	r2, [pc, #296]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002ba2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ba6:	6053      	str	r3, [r2, #4]
 8002ba8:	e02e      	b.n	8002c08 <HAL_RCC_OscConfig+0x434>
 8002baa:	4b48      	ldr	r3, [pc, #288]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	069b      	lsls	r3, r3, #26
 8002bb8:	4944      	ldr	r1, [pc, #272]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	604b      	str	r3, [r1, #4]
 8002bbe:	e023      	b.n	8002c08 <HAL_RCC_OscConfig+0x434>
 8002bc0:	4b42      	ldr	r3, [pc, #264]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	061b      	lsls	r3, r3, #24
 8002bce:	493f      	ldr	r1, [pc, #252]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60cb      	str	r3, [r1, #12]
 8002bd4:	e018      	b.n	8002c08 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002bd6:	4b3d      	ldr	r3, [pc, #244]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a3c      	ldr	r2, [pc, #240]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002be0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be2:	f7fe fa13 	bl	800100c <HAL_GetTick>
 8002be6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002be8:	e008      	b.n	8002bfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002bea:	f7fe fa0f 	bl	800100c <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e212      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002bfc:	4b33      	ldr	r3, [pc, #204]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1f0      	bne.n	8002bea <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d036      	beq.n	8002c82 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	695b      	ldr	r3, [r3, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d019      	beq.n	8002c50 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c1c:	4b2b      	ldr	r3, [pc, #172]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c20:	4a2a      	ldr	r2, [pc, #168]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c28:	f7fe f9f0 	bl	800100c <HAL_GetTick>
 8002c2c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c30:	f7fe f9ec 	bl	800100c <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e1ef      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002c42:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCC_OscConfig+0x45c>
 8002c4e:	e018      	b.n	8002c82 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c50:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c54:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5c:	f7fe f9d6 	bl	800100c <HAL_GetTick>
 8002c60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c64:	f7fe f9d2 	bl	800100c <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e1d5      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002c76:	4b15      	ldr	r3, [pc, #84]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d1f0      	bne.n	8002c64 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0320 	and.w	r3, r3, #32
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d039      	beq.n	8002d02 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d01c      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c96:	4b0d      	ldr	r3, [pc, #52]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a0c      	ldr	r2, [pc, #48]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002c9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ca0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ca2:	f7fe f9b3 	bl	800100c <HAL_GetTick>
 8002ca6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002caa:	f7fe f9af 	bl	800100c <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e1b2      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002cbc:	4b03      	ldr	r3, [pc, #12]	; (8002ccc <HAL_RCC_OscConfig+0x4f8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x4d6>
 8002cc8:	e01b      	b.n	8002d02 <HAL_RCC_OscConfig+0x52e>
 8002cca:	bf00      	nop
 8002ccc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cd0:	4b9b      	ldr	r3, [pc, #620]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a9a      	ldr	r2, [pc, #616]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002cd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002cda:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002cdc:	f7fe f996 	bl	800100c <HAL_GetTick>
 8002ce0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002ce4:	f7fe f992 	bl	800100c <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e195      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002cf6:	4b92      	ldr	r3, [pc, #584]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1f0      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	f000 8081 	beq.w	8002e12 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d10:	4b8c      	ldr	r3, [pc, #560]	; (8002f44 <HAL_RCC_OscConfig+0x770>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a8b      	ldr	r2, [pc, #556]	; (8002f44 <HAL_RCC_OscConfig+0x770>)
 8002d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d1c:	f7fe f976 	bl	800100c <HAL_GetTick>
 8002d20:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d24:	f7fe f972 	bl	800100c <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e175      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d36:	4b83      	ldr	r3, [pc, #524]	; (8002f44 <HAL_RCC_OscConfig+0x770>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d106      	bne.n	8002d58 <HAL_RCC_OscConfig+0x584>
 8002d4a:	4b7d      	ldr	r3, [pc, #500]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	4a7c      	ldr	r2, [pc, #496]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d50:	f043 0301 	orr.w	r3, r3, #1
 8002d54:	6713      	str	r3, [r2, #112]	; 0x70
 8002d56:	e02d      	b.n	8002db4 <HAL_RCC_OscConfig+0x5e0>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10c      	bne.n	8002d7a <HAL_RCC_OscConfig+0x5a6>
 8002d60:	4b77      	ldr	r3, [pc, #476]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d64:	4a76      	ldr	r2, [pc, #472]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d66:	f023 0301 	bic.w	r3, r3, #1
 8002d6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d6c:	4b74      	ldr	r3, [pc, #464]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d70:	4a73      	ldr	r2, [pc, #460]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d72:	f023 0304 	bic.w	r3, r3, #4
 8002d76:	6713      	str	r3, [r2, #112]	; 0x70
 8002d78:	e01c      	b.n	8002db4 <HAL_RCC_OscConfig+0x5e0>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b05      	cmp	r3, #5
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0x5c8>
 8002d82:	4b6f      	ldr	r3, [pc, #444]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d86:	4a6e      	ldr	r2, [pc, #440]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d88:	f043 0304 	orr.w	r3, r3, #4
 8002d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8002d8e:	4b6c      	ldr	r3, [pc, #432]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d92:	4a6b      	ldr	r2, [pc, #428]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d94:	f043 0301 	orr.w	r3, r3, #1
 8002d98:	6713      	str	r3, [r2, #112]	; 0x70
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0x5e0>
 8002d9c:	4b68      	ldr	r3, [pc, #416]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da0:	4a67      	ldr	r2, [pc, #412]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002da2:	f023 0301 	bic.w	r3, r3, #1
 8002da6:	6713      	str	r3, [r2, #112]	; 0x70
 8002da8:	4b65      	ldr	r3, [pc, #404]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	4a64      	ldr	r2, [pc, #400]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002dae:	f023 0304 	bic.w	r3, r3, #4
 8002db2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d015      	beq.n	8002de8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7fe f926 	bl	800100c <HAL_GetTick>
 8002dc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dc2:	e00a      	b.n	8002dda <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc4:	f7fe f922 	bl	800100c <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e123      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dda:	4b59      	ldr	r3, [pc, #356]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0ee      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x5f0>
 8002de6:	e014      	b.n	8002e12 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002de8:	f7fe f910 	bl	800100c <HAL_GetTick>
 8002dec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002dee:	e00a      	b.n	8002e06 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df0:	f7fe f90c 	bl	800100c <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e10d      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002e06:	4b4e      	ldr	r3, [pc, #312]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ee      	bne.n	8002df0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 8102 	beq.w	8003020 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002e1c:	4b48      	ldr	r3, [pc, #288]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e24:	2b18      	cmp	r3, #24
 8002e26:	f000 80bd 	beq.w	8002fa4 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	f040 809e 	bne.w	8002f70 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e34:	4b42      	ldr	r3, [pc, #264]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a41      	ldr	r2, [pc, #260]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fe f8e4 	bl	800100c <HAL_GetTick>
 8002e44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e48:	f7fe f8e0 	bl	800100c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e0e3      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e5a:	4b39      	ldr	r3, [pc, #228]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e66:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e6a:	4b37      	ldr	r3, [pc, #220]	; (8002f48 <HAL_RCC_OscConfig+0x774>)
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002e72:	687a      	ldr	r2, [r7, #4]
 8002e74:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002e76:	0112      	lsls	r2, r2, #4
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	4931      	ldr	r1, [pc, #196]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	628b      	str	r3, [r1, #40]	; 0x28
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	3b01      	subs	r3, #1
 8002e86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	025b      	lsls	r3, r3, #9
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	431a      	orrs	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9a:	3b01      	subs	r3, #1
 8002e9c:	041b      	lsls	r3, r3, #16
 8002e9e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	061b      	lsls	r3, r3, #24
 8002eac:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002eb0:	4923      	ldr	r1, [pc, #140]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002eb6:	4b22      	ldr	r3, [pc, #136]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eba:	4a21      	ldr	r2, [pc, #132]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ebc:	f023 0301 	bic.w	r3, r3, #1
 8002ec0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ec2:	4b1f      	ldr	r3, [pc, #124]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ec6:	4b21      	ldr	r3, [pc, #132]	; (8002f4c <HAL_RCC_OscConfig+0x778>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ece:	00d2      	lsls	r2, r2, #3
 8002ed0:	491b      	ldr	r1, [pc, #108]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ed6:	4b1a      	ldr	r3, [pc, #104]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eda:	f023 020c 	bic.w	r2, r3, #12
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	4917      	ldr	r1, [pc, #92]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ee8:	4b15      	ldr	r3, [pc, #84]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eec:	f023 0202 	bic.w	r2, r3, #2
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	4912      	ldr	r1, [pc, #72]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	4a10      	ldr	r2, [pc, #64]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f06:	4b0e      	ldr	r3, [pc, #56]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f0a:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f10:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002f12:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002f1e:	4b08      	ldr	r3, [pc, #32]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f22:	4a07      	ldr	r2, [pc, #28]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f2a:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <HAL_RCC_OscConfig+0x76c>)
 8002f30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f36:	f7fe f869 	bl	800100c <HAL_GetTick>
 8002f3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f3c:	e011      	b.n	8002f62 <HAL_RCC_OscConfig+0x78e>
 8002f3e:	bf00      	nop
 8002f40:	58024400 	.word	0x58024400
 8002f44:	58024800 	.word	0x58024800
 8002f48:	fffffc0c 	.word	0xfffffc0c
 8002f4c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe f85c 	bl	800100c <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e05f      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f62:	4b32      	ldr	r3, [pc, #200]	; (800302c <HAL_RCC_OscConfig+0x858>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x77c>
 8002f6e:	e057      	b.n	8003020 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f70:	4b2e      	ldr	r3, [pc, #184]	; (800302c <HAL_RCC_OscConfig+0x858>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a2d      	ldr	r2, [pc, #180]	; (800302c <HAL_RCC_OscConfig+0x858>)
 8002f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7fe f846 	bl	800100c <HAL_GetTick>
 8002f80:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f84:	f7fe f842 	bl	800100c <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e045      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f96:	4b25      	ldr	r3, [pc, #148]	; (800302c <HAL_RCC_OscConfig+0x858>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x7b0>
 8002fa2:	e03d      	b.n	8003020 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002fa4:	4b21      	ldr	r3, [pc, #132]	; (800302c <HAL_RCC_OscConfig+0x858>)
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002faa:	4b20      	ldr	r3, [pc, #128]	; (800302c <HAL_RCC_OscConfig+0x858>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d031      	beq.n	800301c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	f003 0203 	and.w	r2, r3, #3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d12a      	bne.n	800301c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	091b      	lsrs	r3, r3, #4
 8002fca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d122      	bne.n	800301c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d11a      	bne.n	800301c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	0a5b      	lsrs	r3, r3, #9
 8002fea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ff2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d111      	bne.n	800301c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	0c1b      	lsrs	r3, r3, #16
 8002ffc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003006:	429a      	cmp	r2, r3
 8003008:	d108      	bne.n	800301c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	0e1b      	lsrs	r3, r3, #24
 800300e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003016:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003018:	429a      	cmp	r2, r3
 800301a:	d001      	beq.n	8003020 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8003020:	2300      	movs	r3, #0
}
 8003022:	4618      	mov	r0, r3
 8003024:	3730      	adds	r7, #48	; 0x30
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	58024400 	.word	0x58024400

08003030 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e19c      	b.n	800337e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003044:	4b8a      	ldr	r3, [pc, #552]	; (8003270 <HAL_RCC_ClockConfig+0x240>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d910      	bls.n	8003074 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b87      	ldr	r3, [pc, #540]	; (8003270 <HAL_RCC_ClockConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f023 020f 	bic.w	r2, r3, #15
 800305a:	4985      	ldr	r1, [pc, #532]	; (8003270 <HAL_RCC_ClockConfig+0x240>)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	4313      	orrs	r3, r2
 8003060:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003062:	4b83      	ldr	r3, [pc, #524]	; (8003270 <HAL_RCC_ClockConfig+0x240>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 030f 	and.w	r3, r3, #15
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d001      	beq.n	8003074 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e184      	b.n	800337e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d010      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	4b7b      	ldr	r3, [pc, #492]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800308c:	429a      	cmp	r2, r3
 800308e:	d908      	bls.n	80030a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003090:	4b78      	ldr	r3, [pc, #480]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	4975      	ldr	r1, [pc, #468]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d010      	beq.n	80030d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	4b70      	ldr	r3, [pc, #448]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d908      	bls.n	80030d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030be:	4b6d      	ldr	r3, [pc, #436]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	496a      	ldr	r1, [pc, #424]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d010      	beq.n	80030fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	699a      	ldr	r2, [r3, #24]
 80030e0:	4b64      	ldr	r3, [pc, #400]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 80030e2:	69db      	ldr	r3, [r3, #28]
 80030e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d908      	bls.n	80030fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030ec:	4b61      	ldr	r3, [pc, #388]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	495e      	ldr	r1, [pc, #376]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	d010      	beq.n	800312c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69da      	ldr	r2, [r3, #28]
 800310e:	4b59      	ldr	r3, [pc, #356]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003116:	429a      	cmp	r2, r3
 8003118:	d908      	bls.n	800312c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800311a:	4b56      	ldr	r3, [pc, #344]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	4953      	ldr	r1, [pc, #332]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 8003128:	4313      	orrs	r3, r2
 800312a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 0302 	and.w	r3, r3, #2
 8003134:	2b00      	cmp	r3, #0
 8003136:	d010      	beq.n	800315a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	68da      	ldr	r2, [r3, #12]
 800313c:	4b4d      	ldr	r3, [pc, #308]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	429a      	cmp	r2, r3
 8003146:	d908      	bls.n	800315a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003148:	4b4a      	ldr	r3, [pc, #296]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	f023 020f 	bic.w	r2, r3, #15
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4947      	ldr	r1, [pc, #284]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 8003156:	4313      	orrs	r3, r2
 8003158:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d055      	beq.n	8003212 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003166:	4b43      	ldr	r3, [pc, #268]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 8003168:	699b      	ldr	r3, [r3, #24]
 800316a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	4940      	ldr	r1, [pc, #256]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 8003174:	4313      	orrs	r3, r2
 8003176:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b02      	cmp	r3, #2
 800317e:	d107      	bne.n	8003190 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003180:	4b3c      	ldr	r3, [pc, #240]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d121      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0f6      	b.n	800337e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b03      	cmp	r3, #3
 8003196:	d107      	bne.n	80031a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003198:	4b36      	ldr	r3, [pc, #216]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d115      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0ea      	b.n	800337e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d107      	bne.n	80031c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031b0:	4b30      	ldr	r3, [pc, #192]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d109      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e0de      	b.n	800337e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80031c0:	4b2c      	ldr	r3, [pc, #176]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d101      	bne.n	80031d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e0d6      	b.n	800337e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031d0:	4b28      	ldr	r3, [pc, #160]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	f023 0207 	bic.w	r2, r3, #7
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	4925      	ldr	r1, [pc, #148]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e2:	f7fd ff13 	bl	800100c <HAL_GetTick>
 80031e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e8:	e00a      	b.n	8003200 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ea:	f7fd ff0f 	bl	800100c <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d901      	bls.n	8003200 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e0be      	b.n	800337e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003200:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 8003202:	691b      	ldr	r3, [r3, #16]
 8003204:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	429a      	cmp	r2, r3
 8003210:	d1eb      	bne.n	80031ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d010      	beq.n	8003240 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	4b14      	ldr	r3, [pc, #80]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	429a      	cmp	r2, r3
 800322c:	d208      	bcs.n	8003240 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	f023 020f 	bic.w	r2, r3, #15
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	490e      	ldr	r1, [pc, #56]	; (8003274 <HAL_RCC_ClockConfig+0x244>)
 800323c:	4313      	orrs	r3, r2
 800323e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_RCC_ClockConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 030f 	and.w	r3, r3, #15
 8003248:	683a      	ldr	r2, [r7, #0]
 800324a:	429a      	cmp	r2, r3
 800324c:	d214      	bcs.n	8003278 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324e:	4b08      	ldr	r3, [pc, #32]	; (8003270 <HAL_RCC_ClockConfig+0x240>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f023 020f 	bic.w	r2, r3, #15
 8003256:	4906      	ldr	r1, [pc, #24]	; (8003270 <HAL_RCC_ClockConfig+0x240>)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	4313      	orrs	r3, r2
 800325c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	4b04      	ldr	r3, [pc, #16]	; (8003270 <HAL_RCC_ClockConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d005      	beq.n	8003278 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e086      	b.n	800337e <HAL_RCC_ClockConfig+0x34e>
 8003270:	52002000 	.word	0x52002000
 8003274:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0304 	and.w	r3, r3, #4
 8003280:	2b00      	cmp	r3, #0
 8003282:	d010      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <HAL_RCC_ClockConfig+0x358>)
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003290:	429a      	cmp	r2, r3
 8003292:	d208      	bcs.n	80032a6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003294:	4b3c      	ldr	r3, [pc, #240]	; (8003388 <HAL_RCC_ClockConfig+0x358>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	4939      	ldr	r1, [pc, #228]	; (8003388 <HAL_RCC_ClockConfig+0x358>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0308 	and.w	r3, r3, #8
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d010      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	4b34      	ldr	r3, [pc, #208]	; (8003388 <HAL_RCC_ClockConfig+0x358>)
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032be:	429a      	cmp	r2, r3
 80032c0:	d208      	bcs.n	80032d4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032c2:	4b31      	ldr	r3, [pc, #196]	; (8003388 <HAL_RCC_ClockConfig+0x358>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	492e      	ldr	r1, [pc, #184]	; (8003388 <HAL_RCC_ClockConfig+0x358>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0310 	and.w	r3, r3, #16
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d010      	beq.n	8003302 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699a      	ldr	r2, [r3, #24]
 80032e4:	4b28      	ldr	r3, [pc, #160]	; (8003388 <HAL_RCC_ClockConfig+0x358>)
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d208      	bcs.n	8003302 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80032f0:	4b25      	ldr	r3, [pc, #148]	; (8003388 <HAL_RCC_ClockConfig+0x358>)
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	4922      	ldr	r1, [pc, #136]	; (8003388 <HAL_RCC_ClockConfig+0x358>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0320 	and.w	r3, r3, #32
 800330a:	2b00      	cmp	r3, #0
 800330c:	d010      	beq.n	8003330 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69da      	ldr	r2, [r3, #28]
 8003312:	4b1d      	ldr	r3, [pc, #116]	; (8003388 <HAL_RCC_ClockConfig+0x358>)
 8003314:	6a1b      	ldr	r3, [r3, #32]
 8003316:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800331a:	429a      	cmp	r2, r3
 800331c:	d208      	bcs.n	8003330 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800331e:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <HAL_RCC_ClockConfig+0x358>)
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	69db      	ldr	r3, [r3, #28]
 800332a:	4917      	ldr	r1, [pc, #92]	; (8003388 <HAL_RCC_ClockConfig+0x358>)
 800332c:	4313      	orrs	r3, r2
 800332e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003330:	f000 f834 	bl	800339c <HAL_RCC_GetSysClockFreq>
 8003334:	4602      	mov	r2, r0
 8003336:	4b14      	ldr	r3, [pc, #80]	; (8003388 <HAL_RCC_ClockConfig+0x358>)
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	0a1b      	lsrs	r3, r3, #8
 800333c:	f003 030f 	and.w	r3, r3, #15
 8003340:	4912      	ldr	r1, [pc, #72]	; (800338c <HAL_RCC_ClockConfig+0x35c>)
 8003342:	5ccb      	ldrb	r3, [r1, r3]
 8003344:	f003 031f 	and.w	r3, r3, #31
 8003348:	fa22 f303 	lsr.w	r3, r2, r3
 800334c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800334e:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <HAL_RCC_ClockConfig+0x358>)
 8003350:	699b      	ldr	r3, [r3, #24]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	4a0d      	ldr	r2, [pc, #52]	; (800338c <HAL_RCC_ClockConfig+0x35c>)
 8003358:	5cd3      	ldrb	r3, [r2, r3]
 800335a:	f003 031f 	and.w	r3, r3, #31
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	fa22 f303 	lsr.w	r3, r2, r3
 8003364:	4a0a      	ldr	r2, [pc, #40]	; (8003390 <HAL_RCC_ClockConfig+0x360>)
 8003366:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003368:	4a0a      	ldr	r2, [pc, #40]	; (8003394 <HAL_RCC_ClockConfig+0x364>)
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800336e:	4b0a      	ldr	r3, [pc, #40]	; (8003398 <HAL_RCC_ClockConfig+0x368>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd fe00 	bl	8000f78 <HAL_InitTick>
 8003378:	4603      	mov	r3, r0
 800337a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800337c:	7bfb      	ldrb	r3, [r7, #15]
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	58024400 	.word	0x58024400
 800338c:	08007cd8 	.word	0x08007cd8
 8003390:	24000004 	.word	0x24000004
 8003394:	24000000 	.word	0x24000000
 8003398:	24000008 	.word	0x24000008

0800339c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800339c:	b480      	push	{r7}
 800339e:	b089      	sub	sp, #36	; 0x24
 80033a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033a2:	4bb3      	ldr	r3, [pc, #716]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033aa:	2b18      	cmp	r3, #24
 80033ac:	f200 8155 	bhi.w	800365a <HAL_RCC_GetSysClockFreq+0x2be>
 80033b0:	a201      	add	r2, pc, #4	; (adr r2, 80033b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80033b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b6:	bf00      	nop
 80033b8:	0800341d 	.word	0x0800341d
 80033bc:	0800365b 	.word	0x0800365b
 80033c0:	0800365b 	.word	0x0800365b
 80033c4:	0800365b 	.word	0x0800365b
 80033c8:	0800365b 	.word	0x0800365b
 80033cc:	0800365b 	.word	0x0800365b
 80033d0:	0800365b 	.word	0x0800365b
 80033d4:	0800365b 	.word	0x0800365b
 80033d8:	08003443 	.word	0x08003443
 80033dc:	0800365b 	.word	0x0800365b
 80033e0:	0800365b 	.word	0x0800365b
 80033e4:	0800365b 	.word	0x0800365b
 80033e8:	0800365b 	.word	0x0800365b
 80033ec:	0800365b 	.word	0x0800365b
 80033f0:	0800365b 	.word	0x0800365b
 80033f4:	0800365b 	.word	0x0800365b
 80033f8:	08003449 	.word	0x08003449
 80033fc:	0800365b 	.word	0x0800365b
 8003400:	0800365b 	.word	0x0800365b
 8003404:	0800365b 	.word	0x0800365b
 8003408:	0800365b 	.word	0x0800365b
 800340c:	0800365b 	.word	0x0800365b
 8003410:	0800365b 	.word	0x0800365b
 8003414:	0800365b 	.word	0x0800365b
 8003418:	0800344f 	.word	0x0800344f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800341c:	4b94      	ldr	r3, [pc, #592]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0320 	and.w	r3, r3, #32
 8003424:	2b00      	cmp	r3, #0
 8003426:	d009      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003428:	4b91      	ldr	r3, [pc, #580]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	08db      	lsrs	r3, r3, #3
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	4a90      	ldr	r2, [pc, #576]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
 8003438:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800343a:	e111      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800343c:	4b8d      	ldr	r3, [pc, #564]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800343e:	61bb      	str	r3, [r7, #24]
    break;
 8003440:	e10e      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003442:	4b8d      	ldr	r3, [pc, #564]	; (8003678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003444:	61bb      	str	r3, [r7, #24]
    break;
 8003446:	e10b      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003448:	4b8c      	ldr	r3, [pc, #560]	; (800367c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800344a:	61bb      	str	r3, [r7, #24]
    break;
 800344c:	e108      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800344e:	4b88      	ldr	r3, [pc, #544]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003458:	4b85      	ldr	r3, [pc, #532]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003462:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003464:	4b82      	ldr	r3, [pc, #520]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800346e:	4b80      	ldr	r3, [pc, #512]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003472:	08db      	lsrs	r3, r3, #3
 8003474:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	fb02 f303 	mul.w	r3, r2, r3
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003486:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80e1 	beq.w	8003654 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b02      	cmp	r3, #2
 8003496:	f000 8083 	beq.w	80035a0 <HAL_RCC_GetSysClockFreq+0x204>
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b02      	cmp	r3, #2
 800349e:	f200 80a1 	bhi.w	80035e4 <HAL_RCC_GetSysClockFreq+0x248>
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <HAL_RCC_GetSysClockFreq+0x114>
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d056      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0x1c0>
 80034ae:	e099      	b.n	80035e4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034b0:	4b6f      	ldr	r3, [pc, #444]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0320 	and.w	r3, r3, #32
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d02d      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80034bc:	4b6c      	ldr	r3, [pc, #432]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	08db      	lsrs	r3, r3, #3
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	4a6b      	ldr	r2, [pc, #428]	; (8003674 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80034c8:	fa22 f303 	lsr.w	r3, r2, r3
 80034cc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	ee07 3a90 	vmov	s15, r3
 80034d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034e6:	4b62      	ldr	r3, [pc, #392]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034ee:	ee07 3a90 	vmov	s15, r3
 80034f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034fa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003680 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003502:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003506:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800350a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800350e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003512:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003516:	e087      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003522:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003684 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003526:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800352a:	4b51      	ldr	r3, [pc, #324]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800352c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003532:	ee07 3a90 	vmov	s15, r3
 8003536:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800353a:	ed97 6a02 	vldr	s12, [r7, #8]
 800353e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003680 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003542:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003546:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800354a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800354e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003552:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003556:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800355a:	e065      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	ee07 3a90 	vmov	s15, r3
 8003562:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003566:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003688 <HAL_RCC_GetSysClockFreq+0x2ec>
 800356a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800356e:	4b40      	ldr	r3, [pc, #256]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800357e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003582:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003680 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003586:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800358a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800358e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003592:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800359e:	e043      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	ee07 3a90 	vmov	s15, r3
 80035a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035aa:	eddf 6a38 	vldr	s13, [pc, #224]	; 800368c <HAL_RCC_GetSysClockFreq+0x2f0>
 80035ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035b2:	4b2f      	ldr	r3, [pc, #188]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ba:	ee07 3a90 	vmov	s15, r3
 80035be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80035c6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003680 <HAL_RCC_GetSysClockFreq+0x2e4>
 80035ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80035e2:	e021      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	ee07 3a90 	vmov	s15, r3
 80035ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035ee:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003688 <HAL_RCC_GetSysClockFreq+0x2ec>
 80035f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035f6:	4b1e      	ldr	r3, [pc, #120]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003606:	ed97 6a02 	vldr	s12, [r7, #8]
 800360a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003680 <HAL_RCC_GetSysClockFreq+0x2e4>
 800360e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800361a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800361e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003622:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003626:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003628:	4b11      	ldr	r3, [pc, #68]	; (8003670 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	0a5b      	lsrs	r3, r3, #9
 800362e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003632:	3301      	adds	r3, #1
 8003634:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	ee07 3a90 	vmov	s15, r3
 800363c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003640:	edd7 6a07 	vldr	s13, [r7, #28]
 8003644:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003648:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800364c:	ee17 3a90 	vmov	r3, s15
 8003650:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003652:	e005      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	61bb      	str	r3, [r7, #24]
    break;
 8003658:	e002      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800365a:	4b07      	ldr	r3, [pc, #28]	; (8003678 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800365c:	61bb      	str	r3, [r7, #24]
    break;
 800365e:	bf00      	nop
  }

  return sysclockfreq;
 8003660:	69bb      	ldr	r3, [r7, #24]
}
 8003662:	4618      	mov	r0, r3
 8003664:	3724      	adds	r7, #36	; 0x24
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	58024400 	.word	0x58024400
 8003674:	03d09000 	.word	0x03d09000
 8003678:	003d0900 	.word	0x003d0900
 800367c:	007a1200 	.word	0x007a1200
 8003680:	46000000 	.word	0x46000000
 8003684:	4c742400 	.word	0x4c742400
 8003688:	4a742400 	.word	0x4a742400
 800368c:	4af42400 	.word	0x4af42400

08003690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003696:	f7ff fe81 	bl	800339c <HAL_RCC_GetSysClockFreq>
 800369a:	4602      	mov	r2, r0
 800369c:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <HAL_RCC_GetHCLKFreq+0x50>)
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	0a1b      	lsrs	r3, r3, #8
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	490f      	ldr	r1, [pc, #60]	; (80036e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80036a8:	5ccb      	ldrb	r3, [r1, r3]
 80036aa:	f003 031f 	and.w	r3, r3, #31
 80036ae:	fa22 f303 	lsr.w	r3, r2, r3
 80036b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80036b4:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <HAL_RCC_GetHCLKFreq+0x50>)
 80036b6:	699b      	ldr	r3, [r3, #24]
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	4a09      	ldr	r2, [pc, #36]	; (80036e4 <HAL_RCC_GetHCLKFreq+0x54>)
 80036be:	5cd3      	ldrb	r3, [r2, r3]
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	687a      	ldr	r2, [r7, #4]
 80036c6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ca:	4a07      	ldr	r2, [pc, #28]	; (80036e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80036cc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80036ce:	4a07      	ldr	r2, [pc, #28]	; (80036ec <HAL_RCC_GetHCLKFreq+0x5c>)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80036d4:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <HAL_RCC_GetHCLKFreq+0x58>)
 80036d6:	681b      	ldr	r3, [r3, #0]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	58024400 	.word	0x58024400
 80036e4:	08007cd8 	.word	0x08007cd8
 80036e8:	24000004 	.word	0x24000004
 80036ec:	24000000 	.word	0x24000000

080036f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80036f4:	f7ff ffcc 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 80036f8:	4602      	mov	r2, r0
 80036fa:	4b06      	ldr	r3, [pc, #24]	; (8003714 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	091b      	lsrs	r3, r3, #4
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	4904      	ldr	r1, [pc, #16]	; (8003718 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003706:	5ccb      	ldrb	r3, [r1, r3]
 8003708:	f003 031f 	and.w	r3, r3, #31
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003710:	4618      	mov	r0, r3
 8003712:	bd80      	pop	{r7, pc}
 8003714:	58024400 	.word	0x58024400
 8003718:	08007cd8 	.word	0x08007cd8

0800371c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003720:	f7ff ffb6 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 8003724:	4602      	mov	r2, r0
 8003726:	4b06      	ldr	r3, [pc, #24]	; (8003740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	0a1b      	lsrs	r3, r3, #8
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	4904      	ldr	r1, [pc, #16]	; (8003744 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003732:	5ccb      	ldrb	r3, [r1, r3]
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800373c:	4618      	mov	r0, r3
 800373e:	bd80      	pop	{r7, pc}
 8003740:	58024400 	.word	0x58024400
 8003744:	08007cd8 	.word	0x08007cd8

08003748 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003750:	2300      	movs	r3, #0
 8003752:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003754:	2300      	movs	r3, #0
 8003756:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d03f      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003768:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800376c:	d02a      	beq.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800376e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003772:	d824      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003774:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003778:	d018      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800377a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800377e:	d81e      	bhi.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003784:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003788:	d007      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800378a:	e018      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800378c:	4ba3      	ldr	r3, [pc, #652]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800378e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003790:	4aa2      	ldr	r2, [pc, #648]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003796:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003798:	e015      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	3304      	adds	r3, #4
 800379e:	2102      	movs	r1, #2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f001 fff9 	bl	8005798 <RCCEx_PLL2_Config>
 80037a6:	4603      	mov	r3, r0
 80037a8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037aa:	e00c      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3324      	adds	r3, #36	; 0x24
 80037b0:	2102      	movs	r1, #2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f002 f8a2 	bl	80058fc <RCCEx_PLL3_Config>
 80037b8:	4603      	mov	r3, r0
 80037ba:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80037bc:	e003      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	75fb      	strb	r3, [r7, #23]
      break;
 80037c2:	e000      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80037c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037c6:	7dfb      	ldrb	r3, [r7, #23]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d109      	bne.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80037cc:	4b93      	ldr	r3, [pc, #588]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037d8:	4990      	ldr	r1, [pc, #576]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	650b      	str	r3, [r1, #80]	; 0x50
 80037de:	e001      	b.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e0:	7dfb      	ldrb	r3, [r7, #23]
 80037e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d03d      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d826      	bhi.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80037f8:	a201      	add	r2, pc, #4	; (adr r2, 8003800 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80037fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037fe:	bf00      	nop
 8003800:	08003815 	.word	0x08003815
 8003804:	08003823 	.word	0x08003823
 8003808:	08003835 	.word	0x08003835
 800380c:	0800384d 	.word	0x0800384d
 8003810:	0800384d 	.word	0x0800384d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003814:	4b81      	ldr	r3, [pc, #516]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003818:	4a80      	ldr	r2, [pc, #512]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800381a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003820:	e015      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3304      	adds	r3, #4
 8003826:	2100      	movs	r1, #0
 8003828:	4618      	mov	r0, r3
 800382a:	f001 ffb5 	bl	8005798 <RCCEx_PLL2_Config>
 800382e:	4603      	mov	r3, r0
 8003830:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003832:	e00c      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3324      	adds	r3, #36	; 0x24
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f002 f85e 	bl	80058fc <RCCEx_PLL3_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003844:	e003      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	75fb      	strb	r3, [r7, #23]
      break;
 800384a:	e000      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800384c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800384e:	7dfb      	ldrb	r3, [r7, #23]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d109      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003854:	4b71      	ldr	r3, [pc, #452]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003858:	f023 0207 	bic.w	r2, r3, #7
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003860:	496e      	ldr	r1, [pc, #440]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003862:	4313      	orrs	r3, r2
 8003864:	650b      	str	r3, [r1, #80]	; 0x50
 8003866:	e001      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	7dfb      	ldrb	r3, [r7, #23]
 800386a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003874:	2b00      	cmp	r3, #0
 8003876:	d042      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003880:	d02b      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003886:	d825      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003888:	2bc0      	cmp	r3, #192	; 0xc0
 800388a:	d028      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x196>
 800388c:	2bc0      	cmp	r3, #192	; 0xc0
 800388e:	d821      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003890:	2b80      	cmp	r3, #128	; 0x80
 8003892:	d016      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003894:	2b80      	cmp	r3, #128	; 0x80
 8003896:	d81d      	bhi.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800389c:	2b40      	cmp	r3, #64	; 0x40
 800389e:	d007      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80038a0:	e018      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038a2:	4b5e      	ldr	r3, [pc, #376]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	4a5d      	ldr	r2, [pc, #372]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038ae:	e017      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3304      	adds	r3, #4
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f001 ff6e 	bl	8005798 <RCCEx_PLL2_Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038c0:	e00e      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	3324      	adds	r3, #36	; 0x24
 80038c6:	2100      	movs	r1, #0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f002 f817 	bl	80058fc <RCCEx_PLL3_Config>
 80038ce:	4603      	mov	r3, r0
 80038d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80038d2:	e005      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	75fb      	strb	r3, [r7, #23]
      break;
 80038d8:	e002      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80038da:	bf00      	nop
 80038dc:	e000      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80038de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038e0:	7dfb      	ldrb	r3, [r7, #23]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80038e6:	4b4d      	ldr	r3, [pc, #308]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ea:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038f2:	494a      	ldr	r1, [pc, #296]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	650b      	str	r3, [r1, #80]	; 0x50
 80038f8:	e001      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fa:	7dfb      	ldrb	r3, [r7, #23]
 80038fc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003906:	2b00      	cmp	r3, #0
 8003908:	d049      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003910:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003914:	d030      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003916:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800391a:	d82a      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800391c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003920:	d02c      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003922:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003926:	d824      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003928:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800392c:	d018      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800392e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003932:	d81e      	bhi.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003938:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800393c:	d007      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800393e:	e018      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003940:	4b36      	ldr	r3, [pc, #216]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	4a35      	ldr	r2, [pc, #212]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003946:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800394a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800394c:	e017      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3304      	adds	r3, #4
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f001 ff1f 	bl	8005798 <RCCEx_PLL2_Config>
 800395a:	4603      	mov	r3, r0
 800395c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800395e:	e00e      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3324      	adds	r3, #36	; 0x24
 8003964:	2100      	movs	r1, #0
 8003966:	4618      	mov	r0, r3
 8003968:	f001 ffc8 	bl	80058fc <RCCEx_PLL3_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003970:	e005      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
      break;
 8003976:	e002      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003978:	bf00      	nop
 800397a:	e000      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800397c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800397e:	7dfb      	ldrb	r3, [r7, #23]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003984:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003988:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003992:	4922      	ldr	r1, [pc, #136]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003994:	4313      	orrs	r3, r2
 8003996:	658b      	str	r3, [r1, #88]	; 0x58
 8003998:	e001      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800399a:	7dfb      	ldrb	r3, [r7, #23]
 800399c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d04b      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80039b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039b4:	d030      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80039b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80039ba:	d82a      	bhi.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039bc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039c0:	d02e      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80039c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80039c6:	d824      	bhi.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039cc:	d018      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80039ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80039d2:	d81e      	bhi.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80039d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039dc:	d007      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80039de:	e018      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e0:	4b0e      	ldr	r3, [pc, #56]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	4a0d      	ldr	r2, [pc, #52]	; (8003a1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80039e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80039ec:	e019      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	3304      	adds	r3, #4
 80039f2:	2100      	movs	r1, #0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f001 fecf 	bl	8005798 <RCCEx_PLL2_Config>
 80039fa:	4603      	mov	r3, r0
 80039fc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80039fe:	e010      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	3324      	adds	r3, #36	; 0x24
 8003a04:	2100      	movs	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 ff78 	bl	80058fc <RCCEx_PLL3_Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a10:	e007      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	75fb      	strb	r3, [r7, #23]
      break;
 8003a16:	e004      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003a18:	bf00      	nop
 8003a1a:	e002      	b.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003a1c:	58024400 	.word	0x58024400
      break;
 8003a20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a22:	7dfb      	ldrb	r3, [r7, #23]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10a      	bne.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003a28:	4b99      	ldr	r3, [pc, #612]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a36:	4996      	ldr	r1, [pc, #600]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	658b      	str	r3, [r1, #88]	; 0x58
 8003a3c:	e001      	b.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a3e:	7dfb      	ldrb	r3, [r7, #23]
 8003a40:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d032      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a52:	2b30      	cmp	r3, #48	; 0x30
 8003a54:	d01c      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8003a56:	2b30      	cmp	r3, #48	; 0x30
 8003a58:	d817      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003a5a:	2b20      	cmp	r3, #32
 8003a5c:	d00c      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8003a5e:	2b20      	cmp	r3, #32
 8003a60:	d813      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d016      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003a66:	2b10      	cmp	r3, #16
 8003a68:	d10f      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a6a:	4b89      	ldr	r3, [pc, #548]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	4a88      	ldr	r2, [pc, #544]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a74:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a76:	e00e      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 fe8a 	bl	8005798 <RCCEx_PLL2_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003a88:	e005      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a8e:	e002      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003a90:	bf00      	nop
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003a94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d109      	bne.n	8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a9c:	4b7c      	ldr	r3, [pc, #496]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa8:	4979      	ldr	r1, [pc, #484]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003aae:	e001      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab0:	7dfb      	ldrb	r3, [r7, #23]
 8003ab2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d047      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ac8:	d030      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003aca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ace:	d82a      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003ad0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ad4:	d02c      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003ad6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ada:	d824      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae0:	d018      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae6:	d81e      	bhi.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d003      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af0:	d007      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003af2:	e018      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af4:	4b66      	ldr	r3, [pc, #408]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af8:	4a65      	ldr	r2, [pc, #404]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003afa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003afe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b00:	e017      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	3304      	adds	r3, #4
 8003b06:	2100      	movs	r1, #0
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f001 fe45 	bl	8005798 <RCCEx_PLL2_Config>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b12:	e00e      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	3324      	adds	r3, #36	; 0x24
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 feee 	bl	80058fc <RCCEx_PLL3_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003b24:	e005      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	75fb      	strb	r3, [r7, #23]
      break;
 8003b2a:	e002      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003b2c:	bf00      	nop
 8003b2e:	e000      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003b30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d109      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b38:	4b55      	ldr	r3, [pc, #340]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	4952      	ldr	r1, [pc, #328]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	650b      	str	r3, [r1, #80]	; 0x50
 8003b4a:	e001      	b.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b4c:	7dfb      	ldrb	r3, [r7, #23]
 8003b4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d049      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b64:	d02e      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003b66:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b6a:	d828      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003b6c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b70:	d02a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8003b72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b76:	d822      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003b78:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b7c:	d026      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003b7e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003b82:	d81c      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003b84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b88:	d010      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003b8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b8e:	d816      	bhi.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01d      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b98:	d111      	bne.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	3304      	adds	r3, #4
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f001 fdf9 	bl	8005798 <RCCEx_PLL2_Config>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003baa:	e012      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3324      	adds	r3, #36	; 0x24
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f001 fea2 	bl	80058fc <RCCEx_PLL3_Config>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003bbc:	e009      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	75fb      	strb	r3, [r7, #23]
      break;
 8003bc2:	e006      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003bc4:	bf00      	nop
 8003bc6:	e004      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003bc8:	bf00      	nop
 8003bca:	e002      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003bcc:	bf00      	nop
 8003bce:	e000      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003bd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bd2:	7dfb      	ldrb	r3, [r7, #23]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d109      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003bd8:	4b2d      	ldr	r3, [pc, #180]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bdc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be4:	492a      	ldr	r1, [pc, #168]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	650b      	str	r3, [r1, #80]	; 0x50
 8003bea:	e001      	b.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bec:	7dfb      	ldrb	r3, [r7, #23]
 8003bee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d04d      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c02:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c06:	d02e      	beq.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c0c:	d828      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c12:	d02a      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c18:	d822      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003c1a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c1e:	d026      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003c20:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003c24:	d81c      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003c26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c2a:	d010      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c30:	d816      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01d      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003c36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c3a:	d111      	bne.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	2101      	movs	r1, #1
 8003c42:	4618      	mov	r0, r3
 8003c44:	f001 fda8 	bl	8005798 <RCCEx_PLL2_Config>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c4c:	e012      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3324      	adds	r3, #36	; 0x24
 8003c52:	2101      	movs	r1, #1
 8003c54:	4618      	mov	r0, r3
 8003c56:	f001 fe51 	bl	80058fc <RCCEx_PLL3_Config>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003c5e:	e009      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	75fb      	strb	r3, [r7, #23]
      break;
 8003c64:	e006      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003c66:	bf00      	nop
 8003c68:	e004      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003c6a:	bf00      	nop
 8003c6c:	e002      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003c6e:	bf00      	nop
 8003c70:	e000      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003c72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10c      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c7e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c88:	4901      	ldr	r1, [pc, #4]	; (8003c90 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	658b      	str	r3, [r1, #88]	; 0x58
 8003c8e:	e003      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003c90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c94:	7dfb      	ldrb	r3, [r7, #23]
 8003c96:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d02f      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cac:	d00e      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003cae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb2:	d814      	bhi.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d015      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003cb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cbc:	d10f      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cbe:	4baf      	ldr	r3, [pc, #700]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc2:	4aae      	ldr	r2, [pc, #696]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003cca:	e00c      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f001 fd60 	bl	8005798 <RCCEx_PLL2_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003cdc:	e003      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ce2:	e000      	b.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003ce4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ce6:	7dfb      	ldrb	r3, [r7, #23]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d109      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cec:	4ba3      	ldr	r3, [pc, #652]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf8:	49a0      	ldr	r1, [pc, #640]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	650b      	str	r3, [r1, #80]	; 0x50
 8003cfe:	e001      	b.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d00:	7dfb      	ldrb	r3, [r7, #23]
 8003d02:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d032      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d81b      	bhi.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003d18:	a201      	add	r2, pc, #4	; (adr r2, 8003d20 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1e:	bf00      	nop
 8003d20:	08003d57 	.word	0x08003d57
 8003d24:	08003d31 	.word	0x08003d31
 8003d28:	08003d3f 	.word	0x08003d3f
 8003d2c:	08003d57 	.word	0x08003d57
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d30:	4b92      	ldr	r3, [pc, #584]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d34:	4a91      	ldr	r2, [pc, #580]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d3c:	e00c      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3304      	adds	r3, #4
 8003d42:	2102      	movs	r1, #2
 8003d44:	4618      	mov	r0, r3
 8003d46:	f001 fd27 	bl	8005798 <RCCEx_PLL2_Config>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003d4e:	e003      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	75fb      	strb	r3, [r7, #23]
      break;
 8003d54:	e000      	b.n	8003d58 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003d56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d58:	7dfb      	ldrb	r3, [r7, #23]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d5e:	4b87      	ldr	r3, [pc, #540]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d62:	f023 0203 	bic.w	r2, r3, #3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d6a:	4984      	ldr	r1, [pc, #528]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003d70:	e001      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d72:	7dfb      	ldrb	r3, [r7, #23]
 8003d74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 8086 	beq.w	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d84:	4b7e      	ldr	r3, [pc, #504]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a7d      	ldr	r2, [pc, #500]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d90:	f7fd f93c 	bl	800100c <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d96:	e009      	b.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d98:	f7fd f938 	bl	800100c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d902      	bls.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	75fb      	strb	r3, [r7, #23]
        break;
 8003daa:	e005      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dac:	4b74      	ldr	r3, [pc, #464]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d0ef      	beq.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003db8:	7dfb      	ldrb	r3, [r7, #23]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d166      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003dbe:	4b6f      	ldr	r3, [pc, #444]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dc0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003dc8:	4053      	eors	r3, r2
 8003dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d013      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dd2:	4b6a      	ldr	r3, [pc, #424]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dda:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ddc:	4b67      	ldr	r3, [pc, #412]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de0:	4a66      	ldr	r2, [pc, #408]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003de8:	4b64      	ldr	r3, [pc, #400]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	4a63      	ldr	r2, [pc, #396]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003df2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003df4:	4a61      	ldr	r2, [pc, #388]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e04:	d115      	bne.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e06:	f7fd f901 	bl	800100c <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e0c:	e00b      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e0e:	f7fd f8fd 	bl	800100c <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d902      	bls.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003e20:	2303      	movs	r3, #3
 8003e22:	75fb      	strb	r3, [r7, #23]
            break;
 8003e24:	e005      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e26:	4b55      	ldr	r3, [pc, #340]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0ed      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d126      	bne.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e46:	d10d      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003e48:	4b4c      	ldr	r3, [pc, #304]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e56:	0919      	lsrs	r1, r3, #4
 8003e58:	4b4a      	ldr	r3, [pc, #296]	; (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003e5a:	400b      	ands	r3, r1
 8003e5c:	4947      	ldr	r1, [pc, #284]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	610b      	str	r3, [r1, #16]
 8003e62:	e005      	b.n	8003e70 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003e64:	4b45      	ldr	r3, [pc, #276]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	4a44      	ldr	r2, [pc, #272]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e6e:	6113      	str	r3, [r2, #16]
 8003e70:	4b42      	ldr	r3, [pc, #264]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e7e:	493f      	ldr	r1, [pc, #252]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	670b      	str	r3, [r1, #112]	; 0x70
 8003e84:	e004      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e86:	7dfb      	ldrb	r3, [r7, #23]
 8003e88:	75bb      	strb	r3, [r7, #22]
 8003e8a:	e001      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
 8003e8e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	f000 8085 	beq.w	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ea2:	2b28      	cmp	r3, #40	; 0x28
 8003ea4:	d866      	bhi.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003ea6:	a201      	add	r2, pc, #4	; (adr r2, 8003eac <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eac:	08003f89 	.word	0x08003f89
 8003eb0:	08003f75 	.word	0x08003f75
 8003eb4:	08003f75 	.word	0x08003f75
 8003eb8:	08003f75 	.word	0x08003f75
 8003ebc:	08003f75 	.word	0x08003f75
 8003ec0:	08003f75 	.word	0x08003f75
 8003ec4:	08003f75 	.word	0x08003f75
 8003ec8:	08003f75 	.word	0x08003f75
 8003ecc:	08003f51 	.word	0x08003f51
 8003ed0:	08003f75 	.word	0x08003f75
 8003ed4:	08003f75 	.word	0x08003f75
 8003ed8:	08003f75 	.word	0x08003f75
 8003edc:	08003f75 	.word	0x08003f75
 8003ee0:	08003f75 	.word	0x08003f75
 8003ee4:	08003f75 	.word	0x08003f75
 8003ee8:	08003f75 	.word	0x08003f75
 8003eec:	08003f63 	.word	0x08003f63
 8003ef0:	08003f75 	.word	0x08003f75
 8003ef4:	08003f75 	.word	0x08003f75
 8003ef8:	08003f75 	.word	0x08003f75
 8003efc:	08003f75 	.word	0x08003f75
 8003f00:	08003f75 	.word	0x08003f75
 8003f04:	08003f75 	.word	0x08003f75
 8003f08:	08003f75 	.word	0x08003f75
 8003f0c:	08003f89 	.word	0x08003f89
 8003f10:	08003f75 	.word	0x08003f75
 8003f14:	08003f75 	.word	0x08003f75
 8003f18:	08003f75 	.word	0x08003f75
 8003f1c:	08003f75 	.word	0x08003f75
 8003f20:	08003f75 	.word	0x08003f75
 8003f24:	08003f75 	.word	0x08003f75
 8003f28:	08003f75 	.word	0x08003f75
 8003f2c:	08003f89 	.word	0x08003f89
 8003f30:	08003f75 	.word	0x08003f75
 8003f34:	08003f75 	.word	0x08003f75
 8003f38:	08003f75 	.word	0x08003f75
 8003f3c:	08003f75 	.word	0x08003f75
 8003f40:	08003f75 	.word	0x08003f75
 8003f44:	08003f75 	.word	0x08003f75
 8003f48:	08003f75 	.word	0x08003f75
 8003f4c:	08003f89 	.word	0x08003f89
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3304      	adds	r3, #4
 8003f54:	2101      	movs	r1, #1
 8003f56:	4618      	mov	r0, r3
 8003f58:	f001 fc1e 	bl	8005798 <RCCEx_PLL2_Config>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f60:	e013      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3324      	adds	r3, #36	; 0x24
 8003f66:	2101      	movs	r1, #1
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f001 fcc7 	bl	80058fc <RCCEx_PLL3_Config>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003f72:	e00a      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	75fb      	strb	r3, [r7, #23]
      break;
 8003f78:	e007      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003f7a:	bf00      	nop
 8003f7c:	58024400 	.word	0x58024400
 8003f80:	58024800 	.word	0x58024800
 8003f84:	00ffffcf 	.word	0x00ffffcf
      break;
 8003f88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f8a:	7dfb      	ldrb	r3, [r7, #23]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d109      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f90:	4b96      	ldr	r3, [pc, #600]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f94:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f9c:	4993      	ldr	r1, [pc, #588]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	654b      	str	r3, [r1, #84]	; 0x54
 8003fa2:	e001      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa4:	7dfb      	ldrb	r3, [r7, #23]
 8003fa6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d038      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb8:	2b05      	cmp	r3, #5
 8003fba:	d821      	bhi.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003fbc:	a201      	add	r2, pc, #4	; (adr r2, 8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	08004007 	.word	0x08004007
 8003fc8:	08003fdd 	.word	0x08003fdd
 8003fcc:	08003fef 	.word	0x08003fef
 8003fd0:	08004007 	.word	0x08004007
 8003fd4:	08004007 	.word	0x08004007
 8003fd8:	08004007 	.word	0x08004007
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f001 fbd8 	bl	8005798 <RCCEx_PLL2_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003fec:	e00c      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3324      	adds	r3, #36	; 0x24
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f001 fc81 	bl	80058fc <RCCEx_PLL3_Config>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003ffe:	e003      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	75fb      	strb	r3, [r7, #23]
      break;
 8004004:	e000      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8004006:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004008:	7dfb      	ldrb	r3, [r7, #23]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d109      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800400e:	4b77      	ldr	r3, [pc, #476]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004012:	f023 0207 	bic.w	r2, r3, #7
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800401a:	4974      	ldr	r1, [pc, #464]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800401c:	4313      	orrs	r3, r2
 800401e:	654b      	str	r3, [r1, #84]	; 0x54
 8004020:	e001      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004022:	7dfb      	ldrb	r3, [r7, #23]
 8004024:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d03a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004038:	2b05      	cmp	r3, #5
 800403a:	d821      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800403c:	a201      	add	r2, pc, #4	; (adr r2, 8004044 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800403e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004042:	bf00      	nop
 8004044:	08004087 	.word	0x08004087
 8004048:	0800405d 	.word	0x0800405d
 800404c:	0800406f 	.word	0x0800406f
 8004050:	08004087 	.word	0x08004087
 8004054:	08004087 	.word	0x08004087
 8004058:	08004087 	.word	0x08004087
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	3304      	adds	r3, #4
 8004060:	2101      	movs	r1, #1
 8004062:	4618      	mov	r0, r3
 8004064:	f001 fb98 	bl	8005798 <RCCEx_PLL2_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800406c:	e00c      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3324      	adds	r3, #36	; 0x24
 8004072:	2101      	movs	r1, #1
 8004074:	4618      	mov	r0, r3
 8004076:	f001 fc41 	bl	80058fc <RCCEx_PLL3_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800407e:	e003      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	75fb      	strb	r3, [r7, #23]
      break;
 8004084:	e000      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8004086:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004088:	7dfb      	ldrb	r3, [r7, #23]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10a      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800408e:	4b57      	ldr	r3, [pc, #348]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004092:	f023 0207 	bic.w	r2, r3, #7
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409c:	4953      	ldr	r1, [pc, #332]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	658b      	str	r3, [r1, #88]	; 0x58
 80040a2:	e001      	b.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a4:	7dfb      	ldrb	r3, [r7, #23]
 80040a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0320 	and.w	r3, r3, #32
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d04b      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040be:	d02e      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80040c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040c4:	d828      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80040c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040ca:	d02a      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80040cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040d0:	d822      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80040d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040d6:	d026      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80040d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80040dc:	d81c      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80040de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e2:	d010      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80040e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e8:	d816      	bhi.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d01d      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80040ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040f2:	d111      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3304      	adds	r3, #4
 80040f8:	2100      	movs	r1, #0
 80040fa:	4618      	mov	r0, r3
 80040fc:	f001 fb4c 	bl	8005798 <RCCEx_PLL2_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004104:	e012      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	3324      	adds	r3, #36	; 0x24
 800410a:	2102      	movs	r1, #2
 800410c:	4618      	mov	r0, r3
 800410e:	f001 fbf5 	bl	80058fc <RCCEx_PLL3_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004116:	e009      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	75fb      	strb	r3, [r7, #23]
      break;
 800411c:	e006      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800411e:	bf00      	nop
 8004120:	e004      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004122:	bf00      	nop
 8004124:	e002      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8004126:	bf00      	nop
 8004128:	e000      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800412a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800412c:	7dfb      	ldrb	r3, [r7, #23]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10a      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004132:	4b2e      	ldr	r3, [pc, #184]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004136:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004140:	492a      	ldr	r1, [pc, #168]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004142:	4313      	orrs	r3, r2
 8004144:	654b      	str	r3, [r1, #84]	; 0x54
 8004146:	e001      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004148:	7dfb      	ldrb	r3, [r7, #23]
 800414a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	d04d      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800415e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004162:	d02e      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8004164:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004168:	d828      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800416a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416e:	d02a      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8004170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004174:	d822      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004176:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800417a:	d026      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800417c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004180:	d81c      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004186:	d010      	beq.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800418c:	d816      	bhi.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800418e:	2b00      	cmp	r3, #0
 8004190:	d01d      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8004192:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004196:	d111      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3304      	adds	r3, #4
 800419c:	2100      	movs	r1, #0
 800419e:	4618      	mov	r0, r3
 80041a0:	f001 fafa 	bl	8005798 <RCCEx_PLL2_Config>
 80041a4:	4603      	mov	r3, r0
 80041a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80041a8:	e012      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	3324      	adds	r3, #36	; 0x24
 80041ae:	2102      	movs	r1, #2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f001 fba3 	bl	80058fc <RCCEx_PLL3_Config>
 80041b6:	4603      	mov	r3, r0
 80041b8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80041ba:	e009      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	75fb      	strb	r3, [r7, #23]
      break;
 80041c0:	e006      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80041c2:	bf00      	nop
 80041c4:	e004      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80041c6:	bf00      	nop
 80041c8:	e002      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80041ca:	bf00      	nop
 80041cc:	e000      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80041ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041d0:	7dfb      	ldrb	r3, [r7, #23]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10c      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041d6:	4b05      	ldr	r3, [pc, #20]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041e4:	4901      	ldr	r1, [pc, #4]	; (80041ec <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	658b      	str	r3, [r1, #88]	; 0x58
 80041ea:	e003      	b.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80041ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041f0:	7dfb      	ldrb	r3, [r7, #23]
 80041f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d04b      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004206:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800420a:	d02e      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800420c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004210:	d828      	bhi.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004212:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004216:	d02a      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004218:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800421c:	d822      	bhi.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800421e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004222:	d026      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004224:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004228:	d81c      	bhi.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800422a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800422e:	d010      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004234:	d816      	bhi.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004236:	2b00      	cmp	r3, #0
 8004238:	d01d      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800423a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800423e:	d111      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3304      	adds	r3, #4
 8004244:	2100      	movs	r1, #0
 8004246:	4618      	mov	r0, r3
 8004248:	f001 faa6 	bl	8005798 <RCCEx_PLL2_Config>
 800424c:	4603      	mov	r3, r0
 800424e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004250:	e012      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3324      	adds	r3, #36	; 0x24
 8004256:	2102      	movs	r1, #2
 8004258:	4618      	mov	r0, r3
 800425a:	f001 fb4f 	bl	80058fc <RCCEx_PLL3_Config>
 800425e:	4603      	mov	r3, r0
 8004260:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004262:	e009      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	75fb      	strb	r3, [r7, #23]
      break;
 8004268:	e006      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800426a:	bf00      	nop
 800426c:	e004      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800426e:	bf00      	nop
 8004270:	e002      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004272:	bf00      	nop
 8004274:	e000      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004276:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004278:	7dfb      	ldrb	r3, [r7, #23]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10a      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800427e:	4b9d      	ldr	r3, [pc, #628]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004282:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800428c:	4999      	ldr	r1, [pc, #612]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800428e:	4313      	orrs	r3, r2
 8004290:	658b      	str	r3, [r1, #88]	; 0x58
 8004292:	e001      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d01a      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ae:	d10a      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3324      	adds	r3, #36	; 0x24
 80042b4:	2102      	movs	r1, #2
 80042b6:	4618      	mov	r0, r3
 80042b8:	f001 fb20 	bl	80058fc <RCCEx_PLL3_Config>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80042c6:	4b8b      	ldr	r3, [pc, #556]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042d4:	4987      	ldr	r1, [pc, #540]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01a      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f0:	d10a      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3324      	adds	r3, #36	; 0x24
 80042f6:	2102      	movs	r1, #2
 80042f8:	4618      	mov	r0, r3
 80042fa:	f001 faff 	bl	80058fc <RCCEx_PLL3_Config>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004308:	4b7a      	ldr	r3, [pc, #488]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800430a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004316:	4977      	ldr	r1, [pc, #476]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004318:	4313      	orrs	r3, r2
 800431a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004324:	2b00      	cmp	r3, #0
 8004326:	d034      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800432e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004332:	d01d      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004338:	d817      	bhi.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800433e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004342:	d009      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8004344:	e011      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	3304      	adds	r3, #4
 800434a:	2100      	movs	r1, #0
 800434c:	4618      	mov	r0, r3
 800434e:	f001 fa23 	bl	8005798 <RCCEx_PLL2_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004356:	e00c      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	3324      	adds	r3, #36	; 0x24
 800435c:	2102      	movs	r1, #2
 800435e:	4618      	mov	r0, r3
 8004360:	f001 facc 	bl	80058fc <RCCEx_PLL3_Config>
 8004364:	4603      	mov	r3, r0
 8004366:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004368:	e003      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	75fb      	strb	r3, [r7, #23]
      break;
 800436e:	e000      	b.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8004370:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004372:	7dfb      	ldrb	r3, [r7, #23]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10a      	bne.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004378:	4b5e      	ldr	r3, [pc, #376]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004386:	495b      	ldr	r1, [pc, #364]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004388:	4313      	orrs	r3, r2
 800438a:	658b      	str	r3, [r1, #88]	; 0x58
 800438c:	e001      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438e:	7dfb      	ldrb	r3, [r7, #23]
 8004390:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d033      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043a8:	d01c      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80043aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043ae:	d816      	bhi.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80043b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b4:	d003      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80043b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043ba:	d007      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80043bc:	e00f      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043be:	4b4d      	ldr	r3, [pc, #308]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c2:	4a4c      	ldr	r2, [pc, #304]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043c8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80043ca:	e00c      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	3324      	adds	r3, #36	; 0x24
 80043d0:	2101      	movs	r1, #1
 80043d2:	4618      	mov	r0, r3
 80043d4:	f001 fa92 	bl	80058fc <RCCEx_PLL3_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80043dc:	e003      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	75fb      	strb	r3, [r7, #23]
      break;
 80043e2:	e000      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80043e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043e6:	7dfb      	ldrb	r3, [r7, #23]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d10a      	bne.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043ec:	4b41      	ldr	r3, [pc, #260]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043fa:	493e      	ldr	r1, [pc, #248]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	654b      	str	r3, [r1, #84]	; 0x54
 8004400:	e001      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004402:	7dfb      	ldrb	r3, [r7, #23]
 8004404:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d029      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800441a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441e:	d007      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004420:	e00f      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004422:	4b34      	ldr	r3, [pc, #208]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	4a33      	ldr	r2, [pc, #204]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004428:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800442e:	e00b      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3304      	adds	r3, #4
 8004434:	2102      	movs	r1, #2
 8004436:	4618      	mov	r0, r3
 8004438:	f001 f9ae 	bl	8005798 <RCCEx_PLL2_Config>
 800443c:	4603      	mov	r3, r0
 800443e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004440:	e002      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	75fb      	strb	r3, [r7, #23]
      break;
 8004446:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d109      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800444e:	4b29      	ldr	r3, [pc, #164]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004452:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445a:	4926      	ldr	r1, [pc, #152]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800445c:	4313      	orrs	r3, r2
 800445e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004460:	e001      	b.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004462:	7dfb      	ldrb	r3, [r7, #23]
 8004464:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3324      	adds	r3, #36	; 0x24
 8004476:	2102      	movs	r1, #2
 8004478:	4618      	mov	r0, r3
 800447a:	f001 fa3f 	bl	80058fc <RCCEx_PLL3_Config>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d033      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004498:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800449c:	d017      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800449e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044a2:	d811      	bhi.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80044a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044a8:	d013      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80044aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044ae:	d80b      	bhi.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d010      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80044b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b8:	d106      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044ba:	4b0e      	ldr	r3, [pc, #56]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	4a0d      	ldr	r2, [pc, #52]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044c4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80044c6:	e007      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	75fb      	strb	r3, [r7, #23]
      break;
 80044cc:	e004      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80044ce:	bf00      	nop
 80044d0:	e002      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80044d2:	bf00      	nop
 80044d4:	e000      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80044d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d8:	7dfb      	ldrb	r3, [r7, #23]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10c      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044de:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ea:	4902      	ldr	r1, [pc, #8]	; (80044f4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	654b      	str	r3, [r1, #84]	; 0x54
 80044f0:	e004      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80044f2:	bf00      	nop
 80044f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
 80044fa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d008      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004508:	4b31      	ldr	r3, [pc, #196]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800450a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800450c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004514:	492e      	ldr	r1, [pc, #184]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004516:	4313      	orrs	r3, r2
 8004518:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d009      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004526:	4b2a      	ldr	r3, [pc, #168]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004534:	4926      	ldr	r1, [pc, #152]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004536:	4313      	orrs	r3, r2
 8004538:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d008      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004546:	4b22      	ldr	r3, [pc, #136]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800454a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004552:	491f      	ldr	r1, [pc, #124]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004554:	4313      	orrs	r3, r2
 8004556:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00d      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004564:	4b1a      	ldr	r3, [pc, #104]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	4a19      	ldr	r2, [pc, #100]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800456a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800456e:	6113      	str	r3, [r2, #16]
 8004570:	4b17      	ldr	r3, [pc, #92]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004572:	691a      	ldr	r2, [r3, #16]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800457a:	4915      	ldr	r1, [pc, #84]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800457c:	4313      	orrs	r3, r2
 800457e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	da08      	bge.n	800459a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004588:	4b11      	ldr	r3, [pc, #68]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800458a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800458c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004594:	490e      	ldr	r1, [pc, #56]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004596:	4313      	orrs	r3, r2
 8004598:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045a6:	4b0a      	ldr	r3, [pc, #40]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b4:	4906      	ldr	r1, [pc, #24]	; (80045d0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80045ba:	7dbb      	ldrb	r3, [r7, #22]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80045c0:	2300      	movs	r3, #0
 80045c2:	e000      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3718      	adds	r7, #24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	58024400 	.word	0x58024400

080045d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b090      	sub	sp, #64	; 0x40
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045e2:	f040 8095 	bne.w	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80045e6:	4b97      	ldr	r3, [pc, #604]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80045e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80045f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	f200 8088 	bhi.w	8004708 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004615 	.word	0x08004615
 8004604:	0800463d 	.word	0x0800463d
 8004608:	08004665 	.word	0x08004665
 800460c:	08004701 	.word	0x08004701
 8004610:	0800468d 	.word	0x0800468d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004614:	4b8b      	ldr	r3, [pc, #556]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004620:	d108      	bne.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004626:	4618      	mov	r0, r3
 8004628:	f000 ff64 	bl	80054f4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 800462c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800462e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004630:	f000 bc94 	b.w	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004634:	2300      	movs	r3, #0
 8004636:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004638:	f000 bc90 	b.w	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800463c:	4b81      	ldr	r3, [pc, #516]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004644:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004648:	d108      	bne.n	800465c <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800464a:	f107 0318 	add.w	r3, r7, #24
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fca8 	bl	8004fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004658:	f000 bc80 	b.w	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004660:	f000 bc7c 	b.w	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004664:	4b77      	ldr	r3, [pc, #476]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800466c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004670:	d108      	bne.n	8004684 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004672:	f107 030c 	add.w	r3, r7, #12
 8004676:	4618      	mov	r0, r3
 8004678:	f000 fde8 	bl	800524c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004680:	f000 bc6c 	b.w	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004684:	2300      	movs	r3, #0
 8004686:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004688:	f000 bc68 	b.w	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800468c:	4b6d      	ldr	r3, [pc, #436]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800468e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004690:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004694:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004696:	4b6b      	ldr	r3, [pc, #428]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d10c      	bne.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 80046a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d109      	bne.n	80046bc <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80046a8:	4b66      	ldr	r3, [pc, #408]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	08db      	lsrs	r3, r3, #3
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	4a65      	ldr	r2, [pc, #404]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80046b4:	fa22 f303 	lsr.w	r3, r2, r3
 80046b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046ba:	e01f      	b.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80046bc:	4b61      	ldr	r3, [pc, #388]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c8:	d106      	bne.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 80046ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046d0:	d102      	bne.n	80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 80046d2:	4b5e      	ldr	r3, [pc, #376]	; (800484c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80046d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046d6:	e011      	b.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80046d8:	4b5a      	ldr	r3, [pc, #360]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046e4:	d106      	bne.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80046e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ec:	d102      	bne.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 80046ee:	4b58      	ldr	r3, [pc, #352]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80046f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046f2:	e003      	b.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 80046f8:	f000 bc30 	b.w	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80046fc:	f000 bc2e 	b.w	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004700:	4b54      	ldr	r3, [pc, #336]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004702:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004704:	f000 bc2a 	b.w	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800470c:	f000 bc26 	b.w	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004716:	f040 809f 	bne.w	8004858 <HAL_RCCEx_GetPeriphCLKFreq+0x284>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800471a:	4b4a      	ldr	r3, [pc, #296]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800471c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004722:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472a:	d04d      	beq.n	80047c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 800472c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004732:	f200 8084 	bhi.w	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004738:	2bc0      	cmp	r3, #192	; 0xc0
 800473a:	d07d      	beq.n	8004838 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	2bc0      	cmp	r3, #192	; 0xc0
 8004740:	d87d      	bhi.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	2b80      	cmp	r3, #128	; 0x80
 8004746:	d02d      	beq.n	80047a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474a:	2b80      	cmp	r3, #128	; 0x80
 800474c:	d877      	bhi.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 800474e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8004754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004756:	2b40      	cmp	r3, #64	; 0x40
 8004758:	d012      	beq.n	8004780 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800475a:	e070      	b.n	800483e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800475c:	4b39      	ldr	r3, [pc, #228]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004764:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004768:	d107      	bne.n	800477a <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800476a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800476e:	4618      	mov	r0, r3
 8004770:	f000 fec0 	bl	80054f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004776:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004778:	e3f0      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800477a:	2300      	movs	r3, #0
 800477c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800477e:	e3ed      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004780:	4b30      	ldr	r3, [pc, #192]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800478c:	d107      	bne.n	800479e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800478e:	f107 0318 	add.w	r3, r7, #24
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fc06 	bl	8004fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 800479c:	e3de      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 800479e:	2300      	movs	r3, #0
 80047a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047a2:	e3db      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80047a4:	4b27      	ldr	r3, [pc, #156]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047b0:	d107      	bne.n	80047c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80047b2:	f107 030c 	add.w	r3, r7, #12
 80047b6:	4618      	mov	r0, r3
 80047b8:	f000 fd48 	bl	800524c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80047c0:	e3cc      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80047c6:	e3c9      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80047c8:	4b1e      	ldr	r3, [pc, #120]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80047ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80047d0:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80047d2:	4b1c      	ldr	r3, [pc, #112]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d10c      	bne.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 80047de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047e4:	4b17      	ldr	r3, [pc, #92]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	08db      	lsrs	r3, r3, #3
 80047ea:	f003 0303 	and.w	r3, r3, #3
 80047ee:	4a16      	ldr	r2, [pc, #88]	; (8004848 <HAL_RCCEx_GetPeriphCLKFreq+0x274>)
 80047f0:	fa22 f303 	lsr.w	r3, r2, r3
 80047f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047f6:	e01e      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80047f8:	4b12      	ldr	r3, [pc, #72]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004800:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004804:	d106      	bne.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8004806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800480c:	d102      	bne.n	8004814 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 800480e:	4b0f      	ldr	r3, [pc, #60]	; (800484c <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004812:	e010      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <HAL_RCCEx_GetPeriphCLKFreq+0x270>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004820:	d106      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8004822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004824:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004828:	d102      	bne.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 800482a:	4b09      	ldr	r3, [pc, #36]	; (8004850 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800482c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800482e:	e002      	b.n	8004836 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004830:	2300      	movs	r3, #0
 8004832:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004834:	e392      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004836:	e391      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004838:	4b06      	ldr	r3, [pc, #24]	; (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800483a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800483c:	e38e      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 800483e:	2300      	movs	r3, #0
 8004840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004842:	e38b      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004844:	58024400 	.word	0x58024400
 8004848:	03d09000 	.word	0x03d09000
 800484c:	003d0900 	.word	0x003d0900
 8004850:	007a1200 	.word	0x007a1200
 8004854:	00bb8000 	.word	0x00bb8000
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800485e:	f040 809c 	bne.w	800499a <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8004862:	4b9d      	ldr	r3, [pc, #628]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004866:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800486a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800486c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800486e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004872:	d054      	beq.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0x34a>
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800487a:	f200 808b 	bhi.w	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800487e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004880:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004884:	f000 8083 	beq.w	800498e <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800488e:	f200 8081 	bhi.w	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 8004892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004898:	d02f      	beq.n	80048fa <HAL_RCCEx_GetPeriphCLKFreq+0x326>
 800489a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800489c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048a0:	d878      	bhi.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80048a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d004      	beq.n	80048b2 <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048ae:	d012      	beq.n	80048d6 <HAL_RCCEx_GetPeriphCLKFreq+0x302>
 80048b0:	e070      	b.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80048b2:	4b89      	ldr	r3, [pc, #548]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048be:	d107      	bne.n	80048d0 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048c4:	4618      	mov	r0, r3
 80048c6:	f000 fe15 	bl	80054f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048ce:	e345      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80048d0:	2300      	movs	r3, #0
 80048d2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048d4:	e342      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048d6:	4b80      	ldr	r3, [pc, #512]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80048de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048e2:	d107      	bne.n	80048f4 <HAL_RCCEx_GetPeriphCLKFreq+0x320>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048e4:	f107 0318 	add.w	r3, r7, #24
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 fb5b 	bl	8004fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 80048f2:	e333      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 80048f4:	2300      	movs	r3, #0
 80048f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80048f8:	e330      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80048fa:	4b77      	ldr	r3, [pc, #476]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004902:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004906:	d107      	bne.n	8004918 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004908:	f107 030c 	add.w	r3, r7, #12
 800490c:	4618      	mov	r0, r3
 800490e:	f000 fc9d 	bl	800524c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004916:	e321      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004918:	2300      	movs	r3, #0
 800491a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800491c:	e31e      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800491e:	4b6e      	ldr	r3, [pc, #440]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004922:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004926:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004928:	4b6b      	ldr	r3, [pc, #428]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0304 	and.w	r3, r3, #4
 8004930:	2b04      	cmp	r3, #4
 8004932:	d10c      	bne.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
 8004934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004936:	2b00      	cmp	r3, #0
 8004938:	d109      	bne.n	800494e <HAL_RCCEx_GetPeriphCLKFreq+0x37a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800493a:	4b67      	ldr	r3, [pc, #412]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	08db      	lsrs	r3, r3, #3
 8004940:	f003 0303 	and.w	r3, r3, #3
 8004944:	4a65      	ldr	r2, [pc, #404]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004946:	fa22 f303 	lsr.w	r3, r2, r3
 800494a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800494c:	e01e      	b.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800494e:	4b62      	ldr	r3, [pc, #392]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800495a:	d106      	bne.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800495c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004962:	d102      	bne.n	800496a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004964:	4b5e      	ldr	r3, [pc, #376]	; (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004966:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004968:	e010      	b.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800496a:	4b5b      	ldr	r3, [pc, #364]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004972:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004976:	d106      	bne.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8004978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800497e:	d102      	bne.n	8004986 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004980:	4b58      	ldr	r3, [pc, #352]	; (8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004982:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004984:	e002      	b.n	800498c <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004986:	2300      	movs	r3, #0
 8004988:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 800498a:	e2e7      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800498c:	e2e6      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800498e:	4b56      	ldr	r3, [pc, #344]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004990:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004992:	e2e3      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004998:	e2e0      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049a0:	f040 80a7 	bne.w	8004af2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80049a4:	4b4c      	ldr	r3, [pc, #304]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80049a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80049ac:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049b4:	d055      	beq.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 80049b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049bc:	f200 8096 	bhi.w	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049c6:	f000 8084 	beq.w	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 80049ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049d0:	f200 808c 	bhi.w	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80049d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049da:	d030      	beq.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80049dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049e2:	f200 8083 	bhi.w	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
 80049e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d004      	beq.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049f2:	d012      	beq.n	8004a1a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 80049f4:	e07a      	b.n	8004aec <HAL_RCCEx_GetPeriphCLKFreq+0x518>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80049f6:	4b38      	ldr	r3, [pc, #224]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a02:	d107      	bne.n	8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fd73 	bl	80054f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a12:	e2a3      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004a14:	2300      	movs	r3, #0
 8004a16:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a18:	e2a0      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a1a:	4b2f      	ldr	r3, [pc, #188]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a26:	d107      	bne.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a28:	f107 0318 	add.w	r3, r7, #24
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fab9 	bl	8004fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8004a36:	e291      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a3c:	e28e      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a3e:	4b26      	ldr	r3, [pc, #152]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a4a:	d107      	bne.n	8004a5c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a4c:	f107 030c 	add.w	r3, r7, #12
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fbfb 	bl	800524c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004a5a:	e27f      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004a60:	e27c      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004a62:	4b1d      	ldr	r3, [pc, #116]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a6a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004a6c:	4b1a      	ldr	r3, [pc, #104]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b04      	cmp	r3, #4
 8004a76:	d10c      	bne.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8004a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004a7e:	4b16      	ldr	r3, [pc, #88]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	08db      	lsrs	r3, r3, #3
 8004a84:	f003 0303 	and.w	r3, r3, #3
 8004a88:	4a14      	ldr	r2, [pc, #80]	; (8004adc <HAL_RCCEx_GetPeriphCLKFreq+0x508>)
 8004a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a90:	e01e      	b.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004a92:	4b11      	ldr	r3, [pc, #68]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a9e:	d106      	bne.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004aa6:	d102      	bne.n	8004aae <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004aa8:	4b0d      	ldr	r3, [pc, #52]	; (8004ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>)
 8004aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aac:	e010      	b.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004aae:	4b0a      	ldr	r3, [pc, #40]	; (8004ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x504>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aba:	d106      	bne.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 8004abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004abe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ac2:	d102      	bne.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004ac4:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x510>)
 8004ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac8:	e002      	b.n	8004ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004ace:	e245      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004ad0:	e244      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ad2:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ad6:	e241      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004ad8:	58024400 	.word	0x58024400
 8004adc:	03d09000 	.word	0x03d09000
 8004ae0:	003d0900 	.word	0x003d0900
 8004ae4:	007a1200 	.word	0x007a1200
 8004ae8:	00bb8000 	.word	0x00bb8000
        }

      default :
        {
          frequency = 0;
 8004aec:	2300      	movs	r3, #0
 8004aee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004af0:	e234      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af8:	f040 809c 	bne.w	8004c34 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8004afc:	4b9b      	ldr	r3, [pc, #620]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b00:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8004b04:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b0c:	d054      	beq.n	8004bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b14:	f200 808b 	bhi.w	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8004b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b1e:	f000 8083 	beq.w	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
 8004b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004b28:	f200 8081 	bhi.w	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8004b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b32:	d02f      	beq.n	8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8004b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b3a:	d878      	bhi.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
 8004b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d004      	beq.n	8004b4c <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8004b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b48:	d012      	beq.n	8004b70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
 8004b4a:	e070      	b.n	8004c2e <HAL_RCCEx_GetPeriphCLKFreq+0x65a>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b4c:	4b87      	ldr	r3, [pc, #540]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b58:	d107      	bne.n	8004b6a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f000 fcc8 	bl	80054f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b68:	e1f8      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b6e:	e1f5      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004b70:	4b7e      	ldr	r3, [pc, #504]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b7c:	d107      	bne.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x5ba>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b7e:	f107 0318 	add.w	r3, r7, #24
 8004b82:	4618      	mov	r0, r3
 8004b84:	f000 fa0e 	bl	8004fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004b8c:	e1e6      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004b92:	e1e3      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004b94:	4b75      	ldr	r3, [pc, #468]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ba0:	d107      	bne.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ba2:	f107 030c 	add.w	r3, r7, #12
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fb50 	bl	800524c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004bb0:	e1d4      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004bb6:	e1d1      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004bb8:	4b6c      	ldr	r3, [pc, #432]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004bc0:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004bc2:	4b6a      	ldr	r3, [pc, #424]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d10c      	bne.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d109      	bne.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bd4:	4b65      	ldr	r3, [pc, #404]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	08db      	lsrs	r3, r3, #3
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	4a64      	ldr	r2, [pc, #400]	; (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8004be0:	fa22 f303 	lsr.w	r3, r2, r3
 8004be4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004be6:	e01e      	b.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004be8:	4b60      	ldr	r3, [pc, #384]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bf0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bf4:	d106      	bne.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
 8004bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bfc:	d102      	bne.n	8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004bfe:	4b5d      	ldr	r3, [pc, #372]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8004c00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c02:	e010      	b.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c04:	4b59      	ldr	r3, [pc, #356]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c10:	d106      	bne.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8004c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c18:	d102      	bne.n	8004c20 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004c1a:	4b57      	ldr	r3, [pc, #348]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c1e:	e002      	b.n	8004c26 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004c20:	2300      	movs	r3, #0
 8004c22:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004c24:	e19a      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004c26:	e199      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8004c28:	4b54      	ldr	r3, [pc, #336]	; (8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c2c:	e196      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c32:	e193      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c3a:	d173      	bne.n	8004d24 <HAL_RCCEx_GetPeriphCLKFreq+0x750>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8004c3c:	4b4b      	ldr	r3, [pc, #300]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c44:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c4c:	d02f      	beq.n	8004cae <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c54:	d863      	bhi.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d004      	beq.n	8004c66 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c62:	d012      	beq.n	8004c8a <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8004c64:	e05b      	b.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004c66:	4b41      	ldr	r3, [pc, #260]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c72:	d107      	bne.n	8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c74:	f107 0318 	add.w	r3, r7, #24
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 f993 	bl	8004fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004c82:	e16b      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004c88:	e168      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004c8a:	4b38      	ldr	r3, [pc, #224]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c96:	d107      	bne.n	8004ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c98:	f107 030c 	add.w	r3, r7, #12
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 fad5 	bl	800524c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004ca6:	e159      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004cac:	e156      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004cae:	4b2f      	ldr	r3, [pc, #188]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cb6:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004cb8:	4b2c      	ldr	r3, [pc, #176]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b04      	cmp	r3, #4
 8004cc2:	d10c      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
 8004cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <HAL_RCCEx_GetPeriphCLKFreq+0x70a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004cca:	4b28      	ldr	r3, [pc, #160]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	08db      	lsrs	r3, r3, #3
 8004cd0:	f003 0303 	and.w	r3, r3, #3
 8004cd4:	4a26      	ldr	r2, [pc, #152]	; (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>)
 8004cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cdc:	e01e      	b.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004cde:	4b23      	ldr	r3, [pc, #140]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cea:	d106      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8004cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004cf2:	d102      	bne.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x726>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8004cf4:	4b1f      	ldr	r3, [pc, #124]	; (8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>)
 8004cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cf8:	e010      	b.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004cfa:	4b1c      	ldr	r3, [pc, #112]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d06:	d106      	bne.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
 8004d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d0e:	d102      	bne.n	8004d16 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8004d10:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>)
 8004d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d14:	e002      	b.n	8004d1c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8004d16:	2300      	movs	r3, #0
 8004d18:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8004d1a:	e11f      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004d1c:	e11e      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d22:	e11b      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d2a:	d13e      	bne.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 8004d2c:	4b0f      	ldr	r3, [pc, #60]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d34:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d004      	beq.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0x772>
 8004d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d42:	d01d      	beq.n	8004d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
 8004d44:	e02e      	b.n	8004da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d46:	4b09      	ldr	r3, [pc, #36]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x798>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d52:	d107      	bne.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fbcb 	bl	80054f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d60:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d62:	e0fb      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004d64:	2300      	movs	r3, #0
 8004d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004d68:	e0f8      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8004d6a:	bf00      	nop
 8004d6c:	58024400 	.word	0x58024400
 8004d70:	03d09000 	.word	0x03d09000
 8004d74:	003d0900 	.word	0x003d0900
 8004d78:	007a1200 	.word	0x007a1200
 8004d7c:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d80:	4b79      	ldr	r3, [pc, #484]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d8c:	d107      	bne.n	8004d9e <HAL_RCCEx_GetPeriphCLKFreq+0x7ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d8e:	f107 0318 	add.w	r3, r7, #24
 8004d92:	4618      	mov	r0, r3
 8004d94:	f000 f906 	bl	8004fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004d98:	6a3b      	ldr	r3, [r7, #32]
 8004d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004d9c:	e0de      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004da2:	e0db      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }

      default :
        {
          frequency = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004da8:	e0d8      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004db0:	f040 8085 	bne.w	8004ebe <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8004db4:	4b6c      	ldr	r3, [pc, #432]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004db8:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8004dbc:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dc4:	d06b      	beq.n	8004e9e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dcc:	d874      	bhi.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dd4:	d056      	beq.n	8004e84 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 8004dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ddc:	d86c      	bhi.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004de4:	d03b      	beq.n	8004e5e <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 8004de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dec:	d864      	bhi.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004df4:	d021      	beq.n	8004e3a <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 8004df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dfc:	d85c      	bhi.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 8004dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d004      	beq.n	8004e0e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8004e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e0a:	d004      	beq.n	8004e16 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8004e0c:	e054      	b.n	8004eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8004e0e:	f000 f8b3 	bl	8004f78 <HAL_RCCEx_GetD3PCLK1Freq>
 8004e12:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8004e14:	e0a2      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e16:	4b54      	ldr	r3, [pc, #336]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e22:	d107      	bne.n	8004e34 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e24:	f107 0318 	add.w	r3, r7, #24
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f000 f8bb 	bl	8004fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e32:	e093      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004e34:	2300      	movs	r3, #0
 8004e36:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e38:	e090      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e3a:	4b4b      	ldr	r3, [pc, #300]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e46:	d107      	bne.n	8004e58 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e48:	f107 030c 	add.w	r3, r7, #12
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 f9fd 	bl	800524c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e56:	e081      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e5c:	e07e      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e5e:	4b42      	ldr	r3, [pc, #264]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0304 	and.w	r3, r3, #4
 8004e66:	2b04      	cmp	r3, #4
 8004e68:	d109      	bne.n	8004e7e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e6a:	4b3f      	ldr	r3, [pc, #252]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	08db      	lsrs	r3, r3, #3
 8004e70:	f003 0303 	and.w	r3, r3, #3
 8004e74:	4a3d      	ldr	r2, [pc, #244]	; (8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 8004e76:	fa22 f303 	lsr.w	r3, r2, r3
 8004e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004e7c:	e06e      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e82:	e06b      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004e84:	4b38      	ldr	r3, [pc, #224]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e90:	d102      	bne.n	8004e98 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
         {
          frequency = CSI_VALUE;
 8004e92:	4b37      	ldr	r3, [pc, #220]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8004e94:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8004e96:	e061      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
           frequency = 0;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004e9c:	e05e      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004e9e:	4b32      	ldr	r3, [pc, #200]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004eaa:	d102      	bne.n	8004eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
         {
          frequency = HSE_VALUE;
 8004eac:	4b31      	ldr	r3, [pc, #196]	; (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004eae:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004eb0:	e054      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004eb6:	e051      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004ebc:	e04e      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec4:	d148      	bne.n	8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x984>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8004ec6:	4b28      	ldr	r3, [pc, #160]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ece:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8004ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ed6:	d02a      	beq.n	8004f2e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8004ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ede:	d838      	bhi.n	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d004      	beq.n	8004ef0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004eec:	d00d      	beq.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x936>
 8004eee:	e030      	b.n	8004f52 <HAL_RCCEx_GetPeriphCLKFreq+0x97e>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004ef0:	4b1d      	ldr	r3, [pc, #116]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004efc:	d102      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
         {
          frequency = HSE_VALUE;
 8004efe:	4b1d      	ldr	r3, [pc, #116]	; (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8004f00:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f02:	e02b      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f08:	e028      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004f0a:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f16:	d107      	bne.n	8004f28 <HAL_RCCEx_GetPeriphCLKFreq+0x954>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f000 fae9 	bl	80054f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f24:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f26:	e019      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f2c:	e016      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f2e:	4b0e      	ldr	r3, [pc, #56]	; (8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f3a:	d107      	bne.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0x978>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f3c:	f107 0318 	add.w	r3, r7, #24
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 f82f 	bl	8004fa4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8004f4a:	e007      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
          frequency = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f50:	e004      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      default :
        {
          frequency = 0;
 8004f52:	2300      	movs	r3, #0
 8004f54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8004f56:	e001      	b.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
        }
      }
    }
  else
    {
      frequency = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8004f5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3740      	adds	r7, #64	; 0x40
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	58024400 	.word	0x58024400
 8004f6c:	03d09000 	.word	0x03d09000
 8004f70:	003d0900 	.word	0x003d0900
 8004f74:	007a1200 	.word	0x007a1200

08004f78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004f7c:	f7fe fb88 	bl	8003690 <HAL_RCC_GetHCLKFreq>
 8004f80:	4602      	mov	r2, r0
 8004f82:	4b06      	ldr	r3, [pc, #24]	; (8004f9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	091b      	lsrs	r3, r3, #4
 8004f88:	f003 0307 	and.w	r3, r3, #7
 8004f8c:	4904      	ldr	r1, [pc, #16]	; (8004fa0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004f8e:	5ccb      	ldrb	r3, [r1, r3]
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	58024400 	.word	0x58024400
 8004fa0:	08007cd8 	.word	0x08007cd8

08004fa4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b089      	sub	sp, #36	; 0x24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004fac:	4ba1      	ldr	r3, [pc, #644]	; (8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb0:	f003 0303 	and.w	r3, r3, #3
 8004fb4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004fb6:	4b9f      	ldr	r3, [pc, #636]	; (8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	0b1b      	lsrs	r3, r3, #12
 8004fbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fc0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004fc2:	4b9c      	ldr	r3, [pc, #624]	; (8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	091b      	lsrs	r3, r3, #4
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004fce:	4b99      	ldr	r3, [pc, #612]	; (8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd2:	08db      	lsrs	r3, r3, #3
 8004fd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	fb02 f303 	mul.w	r3, r2, r3
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fe6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	f000 8111 	beq.w	8005214 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	f000 8083 	beq.w	8005100 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	f200 80a1 	bhi.w	8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d056      	beq.n	80050bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800500e:	e099      	b.n	8005144 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005010:	4b88      	ldr	r3, [pc, #544]	; (8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	2b00      	cmp	r3, #0
 800501a:	d02d      	beq.n	8005078 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800501c:	4b85      	ldr	r3, [pc, #532]	; (8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	08db      	lsrs	r3, r3, #3
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	4a84      	ldr	r2, [pc, #528]	; (8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
 800502c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	ee07 3a90 	vmov	s15, r3
 8005034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	ee07 3a90 	vmov	s15, r3
 800503e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005046:	4b7b      	ldr	r3, [pc, #492]	; (8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800504e:	ee07 3a90 	vmov	s15, r3
 8005052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005056:	ed97 6a03 	vldr	s12, [r7, #12]
 800505a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800523c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800505e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800506a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800506e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005072:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005076:	e087      	b.n	8005188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	ee07 3a90 	vmov	s15, r3
 800507e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005082:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005240 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800508a:	4b6a      	ldr	r3, [pc, #424]	; (8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005092:	ee07 3a90 	vmov	s15, r3
 8005096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800509a:	ed97 6a03 	vldr	s12, [r7, #12]
 800509e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800523c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050ba:	e065      	b.n	8005188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	ee07 3a90 	vmov	s15, r3
 80050c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050c6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80050ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ce:	4b59      	ldr	r3, [pc, #356]	; (8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d6:	ee07 3a90 	vmov	s15, r3
 80050da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050de:	ed97 6a03 	vldr	s12, [r7, #12]
 80050e2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800523c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80050e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80050fe:	e043      	b.n	8005188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	ee07 3a90 	vmov	s15, r3
 8005106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800510a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005248 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800510e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005112:	4b48      	ldr	r3, [pc, #288]	; (8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005122:	ed97 6a03 	vldr	s12, [r7, #12]
 8005126:	eddf 5a45 	vldr	s11, [pc, #276]	; 800523c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800512a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800512e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800513a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800513e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005142:	e021      	b.n	8005188 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	ee07 3a90 	vmov	s15, r3
 800514a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800514e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005244 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005156:	4b37      	ldr	r3, [pc, #220]	; (8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800515e:	ee07 3a90 	vmov	s15, r3
 8005162:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005166:	ed97 6a03 	vldr	s12, [r7, #12]
 800516a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800523c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800516e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005172:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800517a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800517e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005182:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005186:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005188:	4b2a      	ldr	r3, [pc, #168]	; (8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800518a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518c:	0a5b      	lsrs	r3, r3, #9
 800518e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005192:	ee07 3a90 	vmov	s15, r3
 8005196:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800519a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800519e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80051a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051ae:	ee17 2a90 	vmov	r2, s15
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80051b6:	4b1f      	ldr	r3, [pc, #124]	; (8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	0c1b      	lsrs	r3, r3, #16
 80051bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051c0:	ee07 3a90 	vmov	s15, r3
 80051c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80051d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80051d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051dc:	ee17 2a90 	vmov	r2, s15
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80051e4:	4b13      	ldr	r3, [pc, #76]	; (8005234 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	0e1b      	lsrs	r3, r3, #24
 80051ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051ee:	ee07 3a90 	vmov	s15, r3
 80051f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80051fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80051fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005202:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005206:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800520a:	ee17 2a90 	vmov	r2, s15
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005212:	e008      	b.n	8005226 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	609a      	str	r2, [r3, #8]
}
 8005226:	bf00      	nop
 8005228:	3724      	adds	r7, #36	; 0x24
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	58024400 	.word	0x58024400
 8005238:	03d09000 	.word	0x03d09000
 800523c:	46000000 	.word	0x46000000
 8005240:	4c742400 	.word	0x4c742400
 8005244:	4a742400 	.word	0x4a742400
 8005248:	4af42400 	.word	0x4af42400

0800524c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800524c:	b480      	push	{r7}
 800524e:	b089      	sub	sp, #36	; 0x24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005254:	4ba1      	ldr	r3, [pc, #644]	; (80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	f003 0303 	and.w	r3, r3, #3
 800525c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800525e:	4b9f      	ldr	r3, [pc, #636]	; (80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005262:	0d1b      	lsrs	r3, r3, #20
 8005264:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005268:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800526a:	4b9c      	ldr	r3, [pc, #624]	; (80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	0a1b      	lsrs	r3, r3, #8
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005276:	4b99      	ldr	r3, [pc, #612]	; (80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800527a:	08db      	lsrs	r3, r3, #3
 800527c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	fb02 f303 	mul.w	r3, r2, r3
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 8111 	beq.w	80054bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	2b02      	cmp	r3, #2
 800529e:	f000 8083 	beq.w	80053a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	f200 80a1 	bhi.w	80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d003      	beq.n	80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d056      	beq.n	8005364 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80052b6:	e099      	b.n	80053ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052b8:	4b88      	ldr	r3, [pc, #544]	; (80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0320 	and.w	r3, r3, #32
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d02d      	beq.n	8005320 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80052c4:	4b85      	ldr	r3, [pc, #532]	; (80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	08db      	lsrs	r3, r3, #3
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	4a84      	ldr	r2, [pc, #528]	; (80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80052d0:	fa22 f303 	lsr.w	r3, r2, r3
 80052d4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	ee07 3a90 	vmov	s15, r3
 80052dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052ee:	4b7b      	ldr	r3, [pc, #492]	; (80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f6:	ee07 3a90 	vmov	s15, r3
 80052fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005302:	eddf 5a78 	vldr	s11, [pc, #480]	; 80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800530a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800530e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800531a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800531e:	e087      	b.n	8005430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	ee07 3a90 	vmov	s15, r3
 8005326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800532a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80054e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800532e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005332:	4b6a      	ldr	r3, [pc, #424]	; (80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005342:	ed97 6a03 	vldr	s12, [r7, #12]
 8005346:	eddf 5a67 	vldr	s11, [pc, #412]	; 80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800534a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800534e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800535a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800535e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005362:	e065      	b.n	8005430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	ee07 3a90 	vmov	s15, r3
 800536a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005376:	4b59      	ldr	r3, [pc, #356]	; (80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800537e:	ee07 3a90 	vmov	s15, r3
 8005382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005386:	ed97 6a03 	vldr	s12, [r7, #12]
 800538a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800538e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800539a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800539e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053a6:	e043      	b.n	8005430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	ee07 3a90 	vmov	s15, r3
 80053ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80054f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80053b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053ba:	4b48      	ldr	r3, [pc, #288]	; (80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053c2:	ee07 3a90 	vmov	s15, r3
 80053c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80053ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80053ea:	e021      	b.n	8005430 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80054ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80053fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fe:	4b37      	ldr	r3, [pc, #220]	; (80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005406:	ee07 3a90 	vmov	s15, r3
 800540a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005412:	eddf 5a34 	vldr	s11, [pc, #208]	; 80054e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800541a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800542a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800542e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005430:	4b2a      	ldr	r3, [pc, #168]	; (80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	0a5b      	lsrs	r3, r3, #9
 8005436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005442:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005446:	ee37 7a87 	vadd.f32	s14, s15, s14
 800544a:	edd7 6a07 	vldr	s13, [r7, #28]
 800544e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005452:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005456:	ee17 2a90 	vmov	r2, s15
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800545e:	4b1f      	ldr	r3, [pc, #124]	; (80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005462:	0c1b      	lsrs	r3, r3, #16
 8005464:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005468:	ee07 3a90 	vmov	s15, r3
 800546c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005470:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005474:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005478:	edd7 6a07 	vldr	s13, [r7, #28]
 800547c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005480:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005484:	ee17 2a90 	vmov	r2, s15
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800548c:	4b13      	ldr	r3, [pc, #76]	; (80054dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800548e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005490:	0e1b      	lsrs	r3, r3, #24
 8005492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005496:	ee07 3a90 	vmov	s15, r3
 800549a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800549e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80054a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80054a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80054aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054b2:	ee17 2a90 	vmov	r2, s15
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80054ba:	e008      	b.n	80054ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	609a      	str	r2, [r3, #8]
}
 80054ce:	bf00      	nop
 80054d0:	3724      	adds	r7, #36	; 0x24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	58024400 	.word	0x58024400
 80054e0:	03d09000 	.word	0x03d09000
 80054e4:	46000000 	.word	0x46000000
 80054e8:	4c742400 	.word	0x4c742400
 80054ec:	4a742400 	.word	0x4a742400
 80054f0:	4af42400 	.word	0x4af42400

080054f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b089      	sub	sp, #36	; 0x24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80054fc:	4ba0      	ldr	r3, [pc, #640]	; (8005780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80054fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005500:	f003 0303 	and.w	r3, r3, #3
 8005504:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8005506:	4b9e      	ldr	r3, [pc, #632]	; (8005780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550a:	091b      	lsrs	r3, r3, #4
 800550c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005510:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005512:	4b9b      	ldr	r3, [pc, #620]	; (8005780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	f003 0301 	and.w	r3, r3, #1
 800551a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800551c:	4b98      	ldr	r3, [pc, #608]	; (8005780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800551e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005520:	08db      	lsrs	r3, r3, #3
 8005522:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	fb02 f303 	mul.w	r3, r2, r3
 800552c:	ee07 3a90 	vmov	s15, r3
 8005530:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005534:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 8111 	beq.w	8005762 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	2b02      	cmp	r3, #2
 8005544:	f000 8083 	beq.w	800564e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	2b02      	cmp	r3, #2
 800554c:	f200 80a1 	bhi.w	8005692 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d003      	beq.n	800555e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	2b01      	cmp	r3, #1
 800555a:	d056      	beq.n	800560a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800555c:	e099      	b.n	8005692 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800555e:	4b88      	ldr	r3, [pc, #544]	; (8005780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0320 	and.w	r3, r3, #32
 8005566:	2b00      	cmp	r3, #0
 8005568:	d02d      	beq.n	80055c6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800556a:	4b85      	ldr	r3, [pc, #532]	; (8005780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	08db      	lsrs	r3, r3, #3
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	4a83      	ldr	r2, [pc, #524]	; (8005784 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005576:	fa22 f303 	lsr.w	r3, r2, r3
 800557a:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	ee07 3a90 	vmov	s15, r3
 8005582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	ee07 3a90 	vmov	s15, r3
 800558c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005590:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005594:	4b7a      	ldr	r3, [pc, #488]	; (8005780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559c:	ee07 3a90 	vmov	s15, r3
 80055a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80055a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80055ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055c0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80055c4:	e087      	b.n	80056d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	ee07 3a90 	vmov	s15, r3
 80055cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800578c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80055d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055d8:	4b69      	ldr	r3, [pc, #420]	; (8005780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80055da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055e0:	ee07 3a90 	vmov	s15, r3
 80055e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80055ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80055f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80055fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005604:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005608:	e065      	b.n	80056d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	ee07 3a90 	vmov	s15, r3
 8005610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005614:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005790 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005618:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800561c:	4b58      	ldr	r3, [pc, #352]	; (8005780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005624:	ee07 3a90 	vmov	s15, r3
 8005628:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800562c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005630:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005634:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005638:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800563c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005640:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005648:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800564c:	e043      	b.n	80056d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	ee07 3a90 	vmov	s15, r3
 8005654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005658:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005794 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800565c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005660:	4b47      	ldr	r3, [pc, #284]	; (8005780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005668:	ee07 3a90 	vmov	s15, r3
 800566c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005670:	ed97 6a03 	vldr	s12, [r7, #12]
 8005674:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005678:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800567c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005680:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005684:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800568c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005690:	e021      	b.n	80056d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	ee07 3a90 	vmov	s15, r3
 8005698:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800578c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80056a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056a4:	4b36      	ldr	r3, [pc, #216]	; (8005780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ac:	ee07 3a90 	vmov	s15, r3
 80056b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80056b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005788 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80056bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80056c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80056d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80056d6:	4b2a      	ldr	r3, [pc, #168]	; (8005780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80056d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056da:	0a5b      	lsrs	r3, r3, #9
 80056dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056e0:	ee07 3a90 	vmov	s15, r3
 80056e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80056ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80056f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80056f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80056f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056fc:	ee17 2a90 	vmov	r2, s15
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8005704:	4b1e      	ldr	r3, [pc, #120]	; (8005780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	0c1b      	lsrs	r3, r3, #16
 800570a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800571a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800571e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005722:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800572a:	ee17 2a90 	vmov	r2, s15
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8005732:	4b13      	ldr	r3, [pc, #76]	; (8005780 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005736:	0e1b      	lsrs	r3, r3, #24
 8005738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800573c:	ee07 3a90 	vmov	s15, r3
 8005740:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005748:	ee37 7a87 	vadd.f32	s14, s15, s14
 800574c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005754:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005758:	ee17 2a90 	vmov	r2, s15
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005760:	e008      	b.n	8005774 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	609a      	str	r2, [r3, #8]
}
 8005774:	bf00      	nop
 8005776:	3724      	adds	r7, #36	; 0x24
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr
 8005780:	58024400 	.word	0x58024400
 8005784:	03d09000 	.word	0x03d09000
 8005788:	46000000 	.word	0x46000000
 800578c:	4c742400 	.word	0x4c742400
 8005790:	4a742400 	.word	0x4a742400
 8005794:	4af42400 	.word	0x4af42400

08005798 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80057a6:	4b53      	ldr	r3, [pc, #332]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 80057a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	d101      	bne.n	80057b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e099      	b.n	80058ea <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80057b6:	4b4f      	ldr	r3, [pc, #316]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a4e      	ldr	r2, [pc, #312]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 80057bc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80057c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057c2:	f7fb fc23 	bl	800100c <HAL_GetTick>
 80057c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80057c8:	e008      	b.n	80057dc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80057ca:	f7fb fc1f 	bl	800100c <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d901      	bls.n	80057dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e086      	b.n	80058ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80057dc:	4b45      	ldr	r3, [pc, #276]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1f0      	bne.n	80057ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80057e8:	4b42      	ldr	r3, [pc, #264]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 80057ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	031b      	lsls	r3, r3, #12
 80057f6:	493f      	ldr	r1, [pc, #252]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	628b      	str	r3, [r1, #40]	; 0x28
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	3b01      	subs	r3, #1
 8005802:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	3b01      	subs	r3, #1
 800580c:	025b      	lsls	r3, r3, #9
 800580e:	b29b      	uxth	r3, r3
 8005810:	431a      	orrs	r2, r3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	3b01      	subs	r3, #1
 8005818:	041b      	lsls	r3, r3, #16
 800581a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800581e:	431a      	orrs	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	691b      	ldr	r3, [r3, #16]
 8005824:	3b01      	subs	r3, #1
 8005826:	061b      	lsls	r3, r3, #24
 8005828:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800582c:	4931      	ldr	r1, [pc, #196]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 800582e:	4313      	orrs	r3, r2
 8005830:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005832:	4b30      	ldr	r3, [pc, #192]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 8005834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005836:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	695b      	ldr	r3, [r3, #20]
 800583e:	492d      	ldr	r1, [pc, #180]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 8005840:	4313      	orrs	r3, r2
 8005842:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005844:	4b2b      	ldr	r3, [pc, #172]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	f023 0220 	bic.w	r2, r3, #32
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	4928      	ldr	r1, [pc, #160]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 8005852:	4313      	orrs	r3, r2
 8005854:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005856:	4b27      	ldr	r3, [pc, #156]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 8005858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800585a:	4a26      	ldr	r2, [pc, #152]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 800585c:	f023 0310 	bic.w	r3, r3, #16
 8005860:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005862:	4b24      	ldr	r3, [pc, #144]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 8005864:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005866:	4b24      	ldr	r3, [pc, #144]	; (80058f8 <RCCEx_PLL2_Config+0x160>)
 8005868:	4013      	ands	r3, r2
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	69d2      	ldr	r2, [r2, #28]
 800586e:	00d2      	lsls	r2, r2, #3
 8005870:	4920      	ldr	r1, [pc, #128]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 8005872:	4313      	orrs	r3, r2
 8005874:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005876:	4b1f      	ldr	r3, [pc, #124]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 8005878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587a:	4a1e      	ldr	r2, [pc, #120]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 800587c:	f043 0310 	orr.w	r3, r3, #16
 8005880:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d106      	bne.n	8005896 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005888:	4b1a      	ldr	r3, [pc, #104]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	4a19      	ldr	r2, [pc, #100]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 800588e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005892:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005894:	e00f      	b.n	80058b6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d106      	bne.n	80058aa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800589c:	4b15      	ldr	r3, [pc, #84]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 800589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058a0:	4a14      	ldr	r2, [pc, #80]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 80058a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80058a8:	e005      	b.n	80058b6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80058aa:	4b12      	ldr	r3, [pc, #72]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 80058ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ae:	4a11      	ldr	r2, [pc, #68]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 80058b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80058b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80058b6:	4b0f      	ldr	r3, [pc, #60]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a0e      	ldr	r2, [pc, #56]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 80058bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c2:	f7fb fba3 	bl	800100c <HAL_GetTick>
 80058c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80058c8:	e008      	b.n	80058dc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80058ca:	f7fb fb9f 	bl	800100c <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b02      	cmp	r3, #2
 80058d6:	d901      	bls.n	80058dc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e006      	b.n	80058ea <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80058dc:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <RCCEx_PLL2_Config+0x15c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0f0      	beq.n	80058ca <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	58024400 	.word	0x58024400
 80058f8:	ffff0007 	.word	0xffff0007

080058fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800590a:	4b53      	ldr	r3, [pc, #332]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 800590c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590e:	f003 0303 	and.w	r3, r3, #3
 8005912:	2b03      	cmp	r3, #3
 8005914:	d101      	bne.n	800591a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e099      	b.n	8005a4e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800591a:	4b4f      	ldr	r3, [pc, #316]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a4e      	ldr	r2, [pc, #312]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 8005920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005924:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005926:	f7fb fb71 	bl	800100c <HAL_GetTick>
 800592a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800592c:	e008      	b.n	8005940 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800592e:	f7fb fb6d 	bl	800100c <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	2b02      	cmp	r3, #2
 800593a:	d901      	bls.n	8005940 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e086      	b.n	8005a4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005940:	4b45      	ldr	r3, [pc, #276]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1f0      	bne.n	800592e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800594c:	4b42      	ldr	r3, [pc, #264]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	051b      	lsls	r3, r3, #20
 800595a:	493f      	ldr	r1, [pc, #252]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 800595c:	4313      	orrs	r3, r2
 800595e:	628b      	str	r3, [r1, #40]	; 0x28
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	3b01      	subs	r3, #1
 8005966:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	3b01      	subs	r3, #1
 8005970:	025b      	lsls	r3, r3, #9
 8005972:	b29b      	uxth	r3, r3
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	3b01      	subs	r3, #1
 800597c:	041b      	lsls	r3, r3, #16
 800597e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005982:	431a      	orrs	r2, r3
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	3b01      	subs	r3, #1
 800598a:	061b      	lsls	r3, r3, #24
 800598c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005990:	4931      	ldr	r1, [pc, #196]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 8005992:	4313      	orrs	r3, r2
 8005994:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005996:	4b30      	ldr	r3, [pc, #192]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	492d      	ldr	r1, [pc, #180]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 80059a4:	4313      	orrs	r3, r2
 80059a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80059a8:	4b2b      	ldr	r3, [pc, #172]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 80059aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	4928      	ldr	r1, [pc, #160]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 80059b6:	4313      	orrs	r3, r2
 80059b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80059ba:	4b27      	ldr	r3, [pc, #156]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 80059bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059be:	4a26      	ldr	r2, [pc, #152]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 80059c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80059c6:	4b24      	ldr	r3, [pc, #144]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 80059c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80059ca:	4b24      	ldr	r3, [pc, #144]	; (8005a5c <RCCEx_PLL3_Config+0x160>)
 80059cc:	4013      	ands	r3, r2
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	69d2      	ldr	r2, [r2, #28]
 80059d2:	00d2      	lsls	r2, r2, #3
 80059d4:	4920      	ldr	r1, [pc, #128]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 80059d6:	4313      	orrs	r3, r2
 80059d8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80059da:	4b1f      	ldr	r3, [pc, #124]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 80059dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059de:	4a1e      	ldr	r2, [pc, #120]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 80059e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d106      	bne.n	80059fa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80059ec:	4b1a      	ldr	r3, [pc, #104]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 80059ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f0:	4a19      	ldr	r2, [pc, #100]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 80059f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80059f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80059f8:	e00f      	b.n	8005a1a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d106      	bne.n	8005a0e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005a00:	4b15      	ldr	r3, [pc, #84]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 8005a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a04:	4a14      	ldr	r2, [pc, #80]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 8005a06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a0a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005a0c:	e005      	b.n	8005a1a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005a0e:	4b12      	ldr	r3, [pc, #72]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	4a11      	ldr	r2, [pc, #68]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 8005a14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a18:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005a1a:	4b0f      	ldr	r3, [pc, #60]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a0e      	ldr	r2, [pc, #56]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 8005a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a26:	f7fb faf1 	bl	800100c <HAL_GetTick>
 8005a2a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a2c:	e008      	b.n	8005a40 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8005a2e:	f7fb faed 	bl	800100c <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e006      	b.n	8005a4e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005a40:	4b05      	ldr	r3, [pc, #20]	; (8005a58 <RCCEx_PLL3_Config+0x15c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	58024400 	.word	0x58024400
 8005a5c:	ffff0007 	.word	0xffff0007

08005a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e049      	b.n	8005b06 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d106      	bne.n	8005a8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fb f92a 	bl	8000ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	4610      	mov	r0, r2
 8005aa0:	f000 fbb0 	bl	8006204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2201      	movs	r2, #1
 8005ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2201      	movs	r2, #1
 8005ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b082      	sub	sp, #8
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d101      	bne.n	8005b20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	e049      	b.n	8005bb4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d106      	bne.n	8005b3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f841 	bl	8005bbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	3304      	adds	r3, #4
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	f000 fb59 	bl	8006204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2201      	movs	r2, #1
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d109      	bne.n	8005bf4 <HAL_TIM_PWM_Start+0x24>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	bf14      	ite	ne
 8005bec:	2301      	movne	r3, #1
 8005bee:	2300      	moveq	r3, #0
 8005bf0:	b2db      	uxtb	r3, r3
 8005bf2:	e03c      	b.n	8005c6e <HAL_TIM_PWM_Start+0x9e>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	d109      	bne.n	8005c0e <HAL_TIM_PWM_Start+0x3e>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	bf14      	ite	ne
 8005c06:	2301      	movne	r3, #1
 8005c08:	2300      	moveq	r3, #0
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	e02f      	b.n	8005c6e <HAL_TIM_PWM_Start+0x9e>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d109      	bne.n	8005c28 <HAL_TIM_PWM_Start+0x58>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	bf14      	ite	ne
 8005c20:	2301      	movne	r3, #1
 8005c22:	2300      	moveq	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	e022      	b.n	8005c6e <HAL_TIM_PWM_Start+0x9e>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b0c      	cmp	r3, #12
 8005c2c:	d109      	bne.n	8005c42 <HAL_TIM_PWM_Start+0x72>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	bf14      	ite	ne
 8005c3a:	2301      	movne	r3, #1
 8005c3c:	2300      	moveq	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	e015      	b.n	8005c6e <HAL_TIM_PWM_Start+0x9e>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b10      	cmp	r3, #16
 8005c46:	d109      	bne.n	8005c5c <HAL_TIM_PWM_Start+0x8c>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	bf14      	ite	ne
 8005c54:	2301      	movne	r3, #1
 8005c56:	2300      	moveq	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	e008      	b.n	8005c6e <HAL_TIM_PWM_Start+0x9e>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	bf14      	ite	ne
 8005c68:	2301      	movne	r3, #1
 8005c6a:	2300      	moveq	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e0a1      	b.n	8005dba <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d104      	bne.n	8005c86 <HAL_TIM_PWM_Start+0xb6>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c84:	e023      	b.n	8005cce <HAL_TIM_PWM_Start+0xfe>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d104      	bne.n	8005c96 <HAL_TIM_PWM_Start+0xc6>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c94:	e01b      	b.n	8005cce <HAL_TIM_PWM_Start+0xfe>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d104      	bne.n	8005ca6 <HAL_TIM_PWM_Start+0xd6>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ca4:	e013      	b.n	8005cce <HAL_TIM_PWM_Start+0xfe>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b0c      	cmp	r3, #12
 8005caa:	d104      	bne.n	8005cb6 <HAL_TIM_PWM_Start+0xe6>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cb4:	e00b      	b.n	8005cce <HAL_TIM_PWM_Start+0xfe>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b10      	cmp	r3, #16
 8005cba:	d104      	bne.n	8005cc6 <HAL_TIM_PWM_Start+0xf6>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cc4:	e003      	b.n	8005cce <HAL_TIM_PWM_Start+0xfe>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2202      	movs	r2, #2
 8005cca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 fea2 	bl	8006a20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a38      	ldr	r2, [pc, #224]	; (8005dc4 <HAL_TIM_PWM_Start+0x1f4>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d013      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x13e>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a37      	ldr	r2, [pc, #220]	; (8005dc8 <HAL_TIM_PWM_Start+0x1f8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00e      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x13e>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a35      	ldr	r2, [pc, #212]	; (8005dcc <HAL_TIM_PWM_Start+0x1fc>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d009      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x13e>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a34      	ldr	r2, [pc, #208]	; (8005dd0 <HAL_TIM_PWM_Start+0x200>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d004      	beq.n	8005d0e <HAL_TIM_PWM_Start+0x13e>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a32      	ldr	r2, [pc, #200]	; (8005dd4 <HAL_TIM_PWM_Start+0x204>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d101      	bne.n	8005d12 <HAL_TIM_PWM_Start+0x142>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <HAL_TIM_PWM_Start+0x144>
 8005d12:	2300      	movs	r3, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d007      	beq.n	8005d28 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d26:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a25      	ldr	r2, [pc, #148]	; (8005dc4 <HAL_TIM_PWM_Start+0x1f4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d022      	beq.n	8005d78 <HAL_TIM_PWM_Start+0x1a8>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d3a:	d01d      	beq.n	8005d78 <HAL_TIM_PWM_Start+0x1a8>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a25      	ldr	r2, [pc, #148]	; (8005dd8 <HAL_TIM_PWM_Start+0x208>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d018      	beq.n	8005d78 <HAL_TIM_PWM_Start+0x1a8>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a24      	ldr	r2, [pc, #144]	; (8005ddc <HAL_TIM_PWM_Start+0x20c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d013      	beq.n	8005d78 <HAL_TIM_PWM_Start+0x1a8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a22      	ldr	r2, [pc, #136]	; (8005de0 <HAL_TIM_PWM_Start+0x210>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00e      	beq.n	8005d78 <HAL_TIM_PWM_Start+0x1a8>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a1a      	ldr	r2, [pc, #104]	; (8005dc8 <HAL_TIM_PWM_Start+0x1f8>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d009      	beq.n	8005d78 <HAL_TIM_PWM_Start+0x1a8>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a1e      	ldr	r2, [pc, #120]	; (8005de4 <HAL_TIM_PWM_Start+0x214>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d004      	beq.n	8005d78 <HAL_TIM_PWM_Start+0x1a8>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a16      	ldr	r2, [pc, #88]	; (8005dcc <HAL_TIM_PWM_Start+0x1fc>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d115      	bne.n	8005da4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689a      	ldr	r2, [r3, #8]
 8005d7e:	4b1a      	ldr	r3, [pc, #104]	; (8005de8 <HAL_TIM_PWM_Start+0x218>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b06      	cmp	r3, #6
 8005d88:	d015      	beq.n	8005db6 <HAL_TIM_PWM_Start+0x1e6>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d90:	d011      	beq.n	8005db6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f042 0201 	orr.w	r2, r2, #1
 8005da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da2:	e008      	b.n	8005db6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f042 0201 	orr.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]
 8005db4:	e000      	b.n	8005db8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3710      	adds	r7, #16
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	40010000 	.word	0x40010000
 8005dc8:	40010400 	.word	0x40010400
 8005dcc:	40014000 	.word	0x40014000
 8005dd0:	40014400 	.word	0x40014400
 8005dd4:	40014800 	.word	0x40014800
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	40000800 	.word	0x40000800
 8005de0:	40000c00 	.word	0x40000c00
 8005de4:	40001800 	.word	0x40001800
 8005de8:	00010007 	.word	0x00010007

08005dec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d101      	bne.n	8005e0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e06:	2302      	movs	r3, #2
 8005e08:	e0ff      	b.n	800600a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b14      	cmp	r3, #20
 8005e16:	f200 80f0 	bhi.w	8005ffa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005e1a:	a201      	add	r2, pc, #4	; (adr r2, 8005e20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e20:	08005e75 	.word	0x08005e75
 8005e24:	08005ffb 	.word	0x08005ffb
 8005e28:	08005ffb 	.word	0x08005ffb
 8005e2c:	08005ffb 	.word	0x08005ffb
 8005e30:	08005eb5 	.word	0x08005eb5
 8005e34:	08005ffb 	.word	0x08005ffb
 8005e38:	08005ffb 	.word	0x08005ffb
 8005e3c:	08005ffb 	.word	0x08005ffb
 8005e40:	08005ef7 	.word	0x08005ef7
 8005e44:	08005ffb 	.word	0x08005ffb
 8005e48:	08005ffb 	.word	0x08005ffb
 8005e4c:	08005ffb 	.word	0x08005ffb
 8005e50:	08005f37 	.word	0x08005f37
 8005e54:	08005ffb 	.word	0x08005ffb
 8005e58:	08005ffb 	.word	0x08005ffb
 8005e5c:	08005ffb 	.word	0x08005ffb
 8005e60:	08005f79 	.word	0x08005f79
 8005e64:	08005ffb 	.word	0x08005ffb
 8005e68:	08005ffb 	.word	0x08005ffb
 8005e6c:	08005ffb 	.word	0x08005ffb
 8005e70:	08005fb9 	.word	0x08005fb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68b9      	ldr	r1, [r7, #8]
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 fa5c 	bl	8006338 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699a      	ldr	r2, [r3, #24]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f042 0208 	orr.w	r2, r2, #8
 8005e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	699a      	ldr	r2, [r3, #24]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0204 	bic.w	r2, r2, #4
 8005e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6999      	ldr	r1, [r3, #24]
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	691a      	ldr	r2, [r3, #16]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	619a      	str	r2, [r3, #24]
      break;
 8005eb2:	e0a5      	b.n	8006000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 facc 	bl	8006458 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	699a      	ldr	r2, [r3, #24]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	699a      	ldr	r2, [r3, #24]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6999      	ldr	r1, [r3, #24]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	021a      	lsls	r2, r3, #8
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	430a      	orrs	r2, r1
 8005ef2:	619a      	str	r2, [r3, #24]
      break;
 8005ef4:	e084      	b.n	8006000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68b9      	ldr	r1, [r7, #8]
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 fb35 	bl	800656c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	69da      	ldr	r2, [r3, #28]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0208 	orr.w	r2, r2, #8
 8005f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	69da      	ldr	r2, [r3, #28]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0204 	bic.w	r2, r2, #4
 8005f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	69d9      	ldr	r1, [r3, #28]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	691a      	ldr	r2, [r3, #16]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	61da      	str	r2, [r3, #28]
      break;
 8005f34:	e064      	b.n	8006000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68b9      	ldr	r1, [r7, #8]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f000 fb9d 	bl	800667c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	69da      	ldr	r2, [r3, #28]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69da      	ldr	r2, [r3, #28]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	69d9      	ldr	r1, [r3, #28]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	021a      	lsls	r2, r3, #8
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	430a      	orrs	r2, r1
 8005f74:	61da      	str	r2, [r3, #28]
      break;
 8005f76:	e043      	b.n	8006000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	68b9      	ldr	r1, [r7, #8]
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 fbe6 	bl	8006750 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0208 	orr.w	r2, r2, #8
 8005f92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f022 0204 	bic.w	r2, r2, #4
 8005fa2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	691a      	ldr	r2, [r3, #16]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	430a      	orrs	r2, r1
 8005fb4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005fb6:	e023      	b.n	8006000 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fc2a 	bl	8006818 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fd2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fe2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	021a      	lsls	r2, r3, #8
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	430a      	orrs	r2, r1
 8005ff6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ff8:	e002      	b.n	8006000 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	75fb      	strb	r3, [r7, #23]
      break;
 8005ffe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006008:	7dfb      	ldrb	r3, [r7, #23]
}
 800600a:	4618      	mov	r0, r3
 800600c:	3718      	adds	r7, #24
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop

08006014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800601e:	2300      	movs	r3, #0
 8006020:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006028:	2b01      	cmp	r3, #1
 800602a:	d101      	bne.n	8006030 <HAL_TIM_ConfigClockSource+0x1c>
 800602c:	2302      	movs	r3, #2
 800602e:	e0dc      	b.n	80061ea <HAL_TIM_ConfigClockSource+0x1d6>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2202      	movs	r2, #2
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	4b6a      	ldr	r3, [pc, #424]	; (80061f4 <HAL_TIM_ConfigClockSource+0x1e0>)
 800604c:	4013      	ands	r3, r2
 800604e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006056:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a64      	ldr	r2, [pc, #400]	; (80061f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	f000 80a9 	beq.w	80061be <HAL_TIM_ConfigClockSource+0x1aa>
 800606c:	4a62      	ldr	r2, [pc, #392]	; (80061f8 <HAL_TIM_ConfigClockSource+0x1e4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	f200 80ae 	bhi.w	80061d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006074:	4a61      	ldr	r2, [pc, #388]	; (80061fc <HAL_TIM_ConfigClockSource+0x1e8>)
 8006076:	4293      	cmp	r3, r2
 8006078:	f000 80a1 	beq.w	80061be <HAL_TIM_ConfigClockSource+0x1aa>
 800607c:	4a5f      	ldr	r2, [pc, #380]	; (80061fc <HAL_TIM_ConfigClockSource+0x1e8>)
 800607e:	4293      	cmp	r3, r2
 8006080:	f200 80a6 	bhi.w	80061d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006084:	4a5e      	ldr	r2, [pc, #376]	; (8006200 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006086:	4293      	cmp	r3, r2
 8006088:	f000 8099 	beq.w	80061be <HAL_TIM_ConfigClockSource+0x1aa>
 800608c:	4a5c      	ldr	r2, [pc, #368]	; (8006200 <HAL_TIM_ConfigClockSource+0x1ec>)
 800608e:	4293      	cmp	r3, r2
 8006090:	f200 809e 	bhi.w	80061d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006094:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006098:	f000 8091 	beq.w	80061be <HAL_TIM_ConfigClockSource+0x1aa>
 800609c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80060a0:	f200 8096 	bhi.w	80061d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80060a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060a8:	f000 8089 	beq.w	80061be <HAL_TIM_ConfigClockSource+0x1aa>
 80060ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060b0:	f200 808e 	bhi.w	80061d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80060b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060b8:	d03e      	beq.n	8006138 <HAL_TIM_ConfigClockSource+0x124>
 80060ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060be:	f200 8087 	bhi.w	80061d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80060c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060c6:	f000 8086 	beq.w	80061d6 <HAL_TIM_ConfigClockSource+0x1c2>
 80060ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ce:	d87f      	bhi.n	80061d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80060d0:	2b70      	cmp	r3, #112	; 0x70
 80060d2:	d01a      	beq.n	800610a <HAL_TIM_ConfigClockSource+0xf6>
 80060d4:	2b70      	cmp	r3, #112	; 0x70
 80060d6:	d87b      	bhi.n	80061d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80060d8:	2b60      	cmp	r3, #96	; 0x60
 80060da:	d050      	beq.n	800617e <HAL_TIM_ConfigClockSource+0x16a>
 80060dc:	2b60      	cmp	r3, #96	; 0x60
 80060de:	d877      	bhi.n	80061d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80060e0:	2b50      	cmp	r3, #80	; 0x50
 80060e2:	d03c      	beq.n	800615e <HAL_TIM_ConfigClockSource+0x14a>
 80060e4:	2b50      	cmp	r3, #80	; 0x50
 80060e6:	d873      	bhi.n	80061d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80060e8:	2b40      	cmp	r3, #64	; 0x40
 80060ea:	d058      	beq.n	800619e <HAL_TIM_ConfigClockSource+0x18a>
 80060ec:	2b40      	cmp	r3, #64	; 0x40
 80060ee:	d86f      	bhi.n	80061d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80060f0:	2b30      	cmp	r3, #48	; 0x30
 80060f2:	d064      	beq.n	80061be <HAL_TIM_ConfigClockSource+0x1aa>
 80060f4:	2b30      	cmp	r3, #48	; 0x30
 80060f6:	d86b      	bhi.n	80061d0 <HAL_TIM_ConfigClockSource+0x1bc>
 80060f8:	2b20      	cmp	r3, #32
 80060fa:	d060      	beq.n	80061be <HAL_TIM_ConfigClockSource+0x1aa>
 80060fc:	2b20      	cmp	r3, #32
 80060fe:	d867      	bhi.n	80061d0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006100:	2b00      	cmp	r3, #0
 8006102:	d05c      	beq.n	80061be <HAL_TIM_ConfigClockSource+0x1aa>
 8006104:	2b10      	cmp	r3, #16
 8006106:	d05a      	beq.n	80061be <HAL_TIM_ConfigClockSource+0x1aa>
 8006108:	e062      	b.n	80061d0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6818      	ldr	r0, [r3, #0]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	6899      	ldr	r1, [r3, #8]
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	685a      	ldr	r2, [r3, #4]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	f000 fc61 	bl	80069e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800612c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68ba      	ldr	r2, [r7, #8]
 8006134:	609a      	str	r2, [r3, #8]
      break;
 8006136:	e04f      	b.n	80061d8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6818      	ldr	r0, [r3, #0]
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	6899      	ldr	r1, [r3, #8]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685a      	ldr	r2, [r3, #4]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f000 fc4a 	bl	80069e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	689a      	ldr	r2, [r3, #8]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800615a:	609a      	str	r2, [r3, #8]
      break;
 800615c:	e03c      	b.n	80061d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6818      	ldr	r0, [r3, #0]
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	6859      	ldr	r1, [r3, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	461a      	mov	r2, r3
 800616c:	f000 fbba 	bl	80068e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2150      	movs	r1, #80	; 0x50
 8006176:	4618      	mov	r0, r3
 8006178:	f000 fc14 	bl	80069a4 <TIM_ITRx_SetConfig>
      break;
 800617c:	e02c      	b.n	80061d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6818      	ldr	r0, [r3, #0]
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	6859      	ldr	r1, [r3, #4]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	461a      	mov	r2, r3
 800618c:	f000 fbd9 	bl	8006942 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	2160      	movs	r1, #96	; 0x60
 8006196:	4618      	mov	r0, r3
 8006198:	f000 fc04 	bl	80069a4 <TIM_ITRx_SetConfig>
      break;
 800619c:	e01c      	b.n	80061d8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6818      	ldr	r0, [r3, #0]
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	6859      	ldr	r1, [r3, #4]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	461a      	mov	r2, r3
 80061ac:	f000 fb9a 	bl	80068e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2140      	movs	r1, #64	; 0x40
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 fbf4 	bl	80069a4 <TIM_ITRx_SetConfig>
      break;
 80061bc:	e00c      	b.n	80061d8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681a      	ldr	r2, [r3, #0]
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4619      	mov	r1, r3
 80061c8:	4610      	mov	r0, r2
 80061ca:	f000 fbeb 	bl	80069a4 <TIM_ITRx_SetConfig>
      break;
 80061ce:	e003      	b.n	80061d8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	73fb      	strb	r3, [r7, #15]
      break;
 80061d4:	e000      	b.n	80061d8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80061d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	ffceff88 	.word	0xffceff88
 80061f8:	00100040 	.word	0x00100040
 80061fc:	00100030 	.word	0x00100030
 8006200:	00100020 	.word	0x00100020

08006204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a40      	ldr	r2, [pc, #256]	; (8006318 <TIM_Base_SetConfig+0x114>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d013      	beq.n	8006244 <TIM_Base_SetConfig+0x40>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006222:	d00f      	beq.n	8006244 <TIM_Base_SetConfig+0x40>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a3d      	ldr	r2, [pc, #244]	; (800631c <TIM_Base_SetConfig+0x118>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d00b      	beq.n	8006244 <TIM_Base_SetConfig+0x40>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a3c      	ldr	r2, [pc, #240]	; (8006320 <TIM_Base_SetConfig+0x11c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d007      	beq.n	8006244 <TIM_Base_SetConfig+0x40>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a3b      	ldr	r2, [pc, #236]	; (8006324 <TIM_Base_SetConfig+0x120>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d003      	beq.n	8006244 <TIM_Base_SetConfig+0x40>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a3a      	ldr	r2, [pc, #232]	; (8006328 <TIM_Base_SetConfig+0x124>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d108      	bne.n	8006256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	4313      	orrs	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a2f      	ldr	r2, [pc, #188]	; (8006318 <TIM_Base_SetConfig+0x114>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d01f      	beq.n	800629e <TIM_Base_SetConfig+0x9a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006264:	d01b      	beq.n	800629e <TIM_Base_SetConfig+0x9a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a2c      	ldr	r2, [pc, #176]	; (800631c <TIM_Base_SetConfig+0x118>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d017      	beq.n	800629e <TIM_Base_SetConfig+0x9a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a2b      	ldr	r2, [pc, #172]	; (8006320 <TIM_Base_SetConfig+0x11c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d013      	beq.n	800629e <TIM_Base_SetConfig+0x9a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a2a      	ldr	r2, [pc, #168]	; (8006324 <TIM_Base_SetConfig+0x120>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d00f      	beq.n	800629e <TIM_Base_SetConfig+0x9a>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a29      	ldr	r2, [pc, #164]	; (8006328 <TIM_Base_SetConfig+0x124>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00b      	beq.n	800629e <TIM_Base_SetConfig+0x9a>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a28      	ldr	r2, [pc, #160]	; (800632c <TIM_Base_SetConfig+0x128>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d007      	beq.n	800629e <TIM_Base_SetConfig+0x9a>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a27      	ldr	r2, [pc, #156]	; (8006330 <TIM_Base_SetConfig+0x12c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d003      	beq.n	800629e <TIM_Base_SetConfig+0x9a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a26      	ldr	r2, [pc, #152]	; (8006334 <TIM_Base_SetConfig+0x130>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d108      	bne.n	80062b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	68db      	ldr	r3, [r3, #12]
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4313      	orrs	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68fa      	ldr	r2, [r7, #12]
 80062c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	689a      	ldr	r2, [r3, #8]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4a10      	ldr	r2, [pc, #64]	; (8006318 <TIM_Base_SetConfig+0x114>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d00f      	beq.n	80062fc <TIM_Base_SetConfig+0xf8>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a12      	ldr	r2, [pc, #72]	; (8006328 <TIM_Base_SetConfig+0x124>)
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d00b      	beq.n	80062fc <TIM_Base_SetConfig+0xf8>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a11      	ldr	r2, [pc, #68]	; (800632c <TIM_Base_SetConfig+0x128>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d007      	beq.n	80062fc <TIM_Base_SetConfig+0xf8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a10      	ldr	r2, [pc, #64]	; (8006330 <TIM_Base_SetConfig+0x12c>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d003      	beq.n	80062fc <TIM_Base_SetConfig+0xf8>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a0f      	ldr	r2, [pc, #60]	; (8006334 <TIM_Base_SetConfig+0x130>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d103      	bne.n	8006304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	615a      	str	r2, [r3, #20]
}
 800630a:	bf00      	nop
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40010000 	.word	0x40010000
 800631c:	40000400 	.word	0x40000400
 8006320:	40000800 	.word	0x40000800
 8006324:	40000c00 	.word	0x40000c00
 8006328:	40010400 	.word	0x40010400
 800632c:	40014000 	.word	0x40014000
 8006330:	40014400 	.word	0x40014400
 8006334:	40014800 	.word	0x40014800

08006338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	f023 0201 	bic.w	r2, r3, #1
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006360:	68fa      	ldr	r2, [r7, #12]
 8006362:	4b37      	ldr	r3, [pc, #220]	; (8006440 <TIM_OC1_SetConfig+0x108>)
 8006364:	4013      	ands	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	f023 0303 	bic.w	r3, r3, #3
 800636e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4313      	orrs	r3, r2
 8006378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	f023 0302 	bic.w	r3, r3, #2
 8006380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	4313      	orrs	r3, r2
 800638a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a2d      	ldr	r2, [pc, #180]	; (8006444 <TIM_OC1_SetConfig+0x10c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d00f      	beq.n	80063b4 <TIM_OC1_SetConfig+0x7c>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a2c      	ldr	r2, [pc, #176]	; (8006448 <TIM_OC1_SetConfig+0x110>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00b      	beq.n	80063b4 <TIM_OC1_SetConfig+0x7c>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a2b      	ldr	r2, [pc, #172]	; (800644c <TIM_OC1_SetConfig+0x114>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d007      	beq.n	80063b4 <TIM_OC1_SetConfig+0x7c>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a2a      	ldr	r2, [pc, #168]	; (8006450 <TIM_OC1_SetConfig+0x118>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d003      	beq.n	80063b4 <TIM_OC1_SetConfig+0x7c>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a29      	ldr	r2, [pc, #164]	; (8006454 <TIM_OC1_SetConfig+0x11c>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d10c      	bne.n	80063ce <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	f023 0308 	bic.w	r3, r3, #8
 80063ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f023 0304 	bic.w	r3, r3, #4
 80063cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a1c      	ldr	r2, [pc, #112]	; (8006444 <TIM_OC1_SetConfig+0x10c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d00f      	beq.n	80063f6 <TIM_OC1_SetConfig+0xbe>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a1b      	ldr	r2, [pc, #108]	; (8006448 <TIM_OC1_SetConfig+0x110>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d00b      	beq.n	80063f6 <TIM_OC1_SetConfig+0xbe>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a1a      	ldr	r2, [pc, #104]	; (800644c <TIM_OC1_SetConfig+0x114>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d007      	beq.n	80063f6 <TIM_OC1_SetConfig+0xbe>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a19      	ldr	r2, [pc, #100]	; (8006450 <TIM_OC1_SetConfig+0x118>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d003      	beq.n	80063f6 <TIM_OC1_SetConfig+0xbe>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a18      	ldr	r2, [pc, #96]	; (8006454 <TIM_OC1_SetConfig+0x11c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d111      	bne.n	800641a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	693a      	ldr	r2, [r7, #16]
 800640c:	4313      	orrs	r3, r2
 800640e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	697a      	ldr	r2, [r7, #20]
 8006432:	621a      	str	r2, [r3, #32]
}
 8006434:	bf00      	nop
 8006436:	371c      	adds	r7, #28
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	fffeff8f 	.word	0xfffeff8f
 8006444:	40010000 	.word	0x40010000
 8006448:	40010400 	.word	0x40010400
 800644c:	40014000 	.word	0x40014000
 8006450:	40014400 	.word	0x40014400
 8006454:	40014800 	.word	0x40014800

08006458 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	f023 0210 	bic.w	r2, r3, #16
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006480:	68fa      	ldr	r2, [r7, #12]
 8006482:	4b34      	ldr	r3, [pc, #208]	; (8006554 <TIM_OC2_SetConfig+0xfc>)
 8006484:	4013      	ands	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800648e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	021b      	lsls	r3, r3, #8
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	4313      	orrs	r3, r2
 800649a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	f023 0320 	bic.w	r3, r3, #32
 80064a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	011b      	lsls	r3, r3, #4
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	4313      	orrs	r3, r2
 80064ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a29      	ldr	r2, [pc, #164]	; (8006558 <TIM_OC2_SetConfig+0x100>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d003      	beq.n	80064c0 <TIM_OC2_SetConfig+0x68>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a28      	ldr	r2, [pc, #160]	; (800655c <TIM_OC2_SetConfig+0x104>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d10d      	bne.n	80064dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	011b      	lsls	r3, r3, #4
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a1e      	ldr	r2, [pc, #120]	; (8006558 <TIM_OC2_SetConfig+0x100>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d00f      	beq.n	8006504 <TIM_OC2_SetConfig+0xac>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a1d      	ldr	r2, [pc, #116]	; (800655c <TIM_OC2_SetConfig+0x104>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d00b      	beq.n	8006504 <TIM_OC2_SetConfig+0xac>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a1c      	ldr	r2, [pc, #112]	; (8006560 <TIM_OC2_SetConfig+0x108>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d007      	beq.n	8006504 <TIM_OC2_SetConfig+0xac>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a1b      	ldr	r2, [pc, #108]	; (8006564 <TIM_OC2_SetConfig+0x10c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d003      	beq.n	8006504 <TIM_OC2_SetConfig+0xac>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a1a      	ldr	r2, [pc, #104]	; (8006568 <TIM_OC2_SetConfig+0x110>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d113      	bne.n	800652c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800650a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006512:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	693a      	ldr	r2, [r7, #16]
 800651c:	4313      	orrs	r3, r2
 800651e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	693a      	ldr	r2, [r7, #16]
 8006528:	4313      	orrs	r3, r2
 800652a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	697a      	ldr	r2, [r7, #20]
 8006544:	621a      	str	r2, [r3, #32]
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	feff8fff 	.word	0xfeff8fff
 8006558:	40010000 	.word	0x40010000
 800655c:	40010400 	.word	0x40010400
 8006560:	40014000 	.word	0x40014000
 8006564:	40014400 	.word	0x40014400
 8006568:	40014800 	.word	0x40014800

0800656c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	4b33      	ldr	r3, [pc, #204]	; (8006664 <TIM_OC3_SetConfig+0xf8>)
 8006598:	4013      	ands	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f023 0303 	bic.w	r3, r3, #3
 80065a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	021b      	lsls	r3, r3, #8
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	4313      	orrs	r3, r2
 80065c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	4a28      	ldr	r2, [pc, #160]	; (8006668 <TIM_OC3_SetConfig+0xfc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d003      	beq.n	80065d2 <TIM_OC3_SetConfig+0x66>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a27      	ldr	r2, [pc, #156]	; (800666c <TIM_OC3_SetConfig+0x100>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d10d      	bne.n	80065ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	021b      	lsls	r3, r3, #8
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a1d      	ldr	r2, [pc, #116]	; (8006668 <TIM_OC3_SetConfig+0xfc>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00f      	beq.n	8006616 <TIM_OC3_SetConfig+0xaa>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a1c      	ldr	r2, [pc, #112]	; (800666c <TIM_OC3_SetConfig+0x100>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d00b      	beq.n	8006616 <TIM_OC3_SetConfig+0xaa>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a1b      	ldr	r2, [pc, #108]	; (8006670 <TIM_OC3_SetConfig+0x104>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d007      	beq.n	8006616 <TIM_OC3_SetConfig+0xaa>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a1a      	ldr	r2, [pc, #104]	; (8006674 <TIM_OC3_SetConfig+0x108>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d003      	beq.n	8006616 <TIM_OC3_SetConfig+0xaa>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a19      	ldr	r2, [pc, #100]	; (8006678 <TIM_OC3_SetConfig+0x10c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d113      	bne.n	800663e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800661c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006624:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	695b      	ldr	r3, [r3, #20]
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	699b      	ldr	r3, [r3, #24]
 8006636:	011b      	lsls	r3, r3, #4
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	621a      	str	r2, [r3, #32]
}
 8006658:	bf00      	nop
 800665a:	371c      	adds	r7, #28
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	fffeff8f 	.word	0xfffeff8f
 8006668:	40010000 	.word	0x40010000
 800666c:	40010400 	.word	0x40010400
 8006670:	40014000 	.word	0x40014000
 8006674:	40014400 	.word	0x40014400
 8006678:	40014800 	.word	0x40014800

0800667c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4b24      	ldr	r3, [pc, #144]	; (8006738 <TIM_OC4_SetConfig+0xbc>)
 80066a8:	4013      	ands	r3, r2
 80066aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	021b      	lsls	r3, r3, #8
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4313      	orrs	r3, r2
 80066be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	031b      	lsls	r3, r3, #12
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a19      	ldr	r2, [pc, #100]	; (800673c <TIM_OC4_SetConfig+0xc0>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d00f      	beq.n	80066fc <TIM_OC4_SetConfig+0x80>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4a18      	ldr	r2, [pc, #96]	; (8006740 <TIM_OC4_SetConfig+0xc4>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d00b      	beq.n	80066fc <TIM_OC4_SetConfig+0x80>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a17      	ldr	r2, [pc, #92]	; (8006744 <TIM_OC4_SetConfig+0xc8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d007      	beq.n	80066fc <TIM_OC4_SetConfig+0x80>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	4a16      	ldr	r2, [pc, #88]	; (8006748 <TIM_OC4_SetConfig+0xcc>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d003      	beq.n	80066fc <TIM_OC4_SetConfig+0x80>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a15      	ldr	r2, [pc, #84]	; (800674c <TIM_OC4_SetConfig+0xd0>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d109      	bne.n	8006710 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006702:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	695b      	ldr	r3, [r3, #20]
 8006708:	019b      	lsls	r3, r3, #6
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	4313      	orrs	r3, r2
 800670e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	697a      	ldr	r2, [r7, #20]
 8006714:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	621a      	str	r2, [r3, #32]
}
 800672a:	bf00      	nop
 800672c:	371c      	adds	r7, #28
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr
 8006736:	bf00      	nop
 8006738:	feff8fff 	.word	0xfeff8fff
 800673c:	40010000 	.word	0x40010000
 8006740:	40010400 	.word	0x40010400
 8006744:	40014000 	.word	0x40014000
 8006748:	40014400 	.word	0x40014400
 800674c:	40014800 	.word	0x40014800

08006750 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006750:	b480      	push	{r7}
 8006752:	b087      	sub	sp, #28
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a1b      	ldr	r3, [r3, #32]
 800675e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	4b21      	ldr	r3, [pc, #132]	; (8006800 <TIM_OC5_SetConfig+0xb0>)
 800677c:	4013      	ands	r3, r2
 800677e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68fa      	ldr	r2, [r7, #12]
 8006786:	4313      	orrs	r3, r2
 8006788:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006790:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	041b      	lsls	r3, r3, #16
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	4313      	orrs	r3, r2
 800679c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a18      	ldr	r2, [pc, #96]	; (8006804 <TIM_OC5_SetConfig+0xb4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00f      	beq.n	80067c6 <TIM_OC5_SetConfig+0x76>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a17      	ldr	r2, [pc, #92]	; (8006808 <TIM_OC5_SetConfig+0xb8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d00b      	beq.n	80067c6 <TIM_OC5_SetConfig+0x76>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a16      	ldr	r2, [pc, #88]	; (800680c <TIM_OC5_SetConfig+0xbc>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d007      	beq.n	80067c6 <TIM_OC5_SetConfig+0x76>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a15      	ldr	r2, [pc, #84]	; (8006810 <TIM_OC5_SetConfig+0xc0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d003      	beq.n	80067c6 <TIM_OC5_SetConfig+0x76>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a14      	ldr	r2, [pc, #80]	; (8006814 <TIM_OC5_SetConfig+0xc4>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d109      	bne.n	80067da <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	021b      	lsls	r3, r3, #8
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	697a      	ldr	r2, [r7, #20]
 80067de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	685a      	ldr	r2, [r3, #4]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	621a      	str	r2, [r3, #32]
}
 80067f4:	bf00      	nop
 80067f6:	371c      	adds	r7, #28
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr
 8006800:	fffeff8f 	.word	0xfffeff8f
 8006804:	40010000 	.word	0x40010000
 8006808:	40010400 	.word	0x40010400
 800680c:	40014000 	.word	0x40014000
 8006810:	40014400 	.word	0x40014400
 8006814:	40014800 	.word	0x40014800

08006818 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006818:	b480      	push	{r7}
 800681a:	b087      	sub	sp, #28
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6a1b      	ldr	r3, [r3, #32]
 8006826:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4b22      	ldr	r3, [pc, #136]	; (80068cc <TIM_OC6_SetConfig+0xb4>)
 8006844:	4013      	ands	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	021b      	lsls	r3, r3, #8
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	4313      	orrs	r3, r2
 8006852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800685a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	051b      	lsls	r3, r3, #20
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	4313      	orrs	r3, r2
 8006866:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a19      	ldr	r2, [pc, #100]	; (80068d0 <TIM_OC6_SetConfig+0xb8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d00f      	beq.n	8006890 <TIM_OC6_SetConfig+0x78>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a18      	ldr	r2, [pc, #96]	; (80068d4 <TIM_OC6_SetConfig+0xbc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d00b      	beq.n	8006890 <TIM_OC6_SetConfig+0x78>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a17      	ldr	r2, [pc, #92]	; (80068d8 <TIM_OC6_SetConfig+0xc0>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d007      	beq.n	8006890 <TIM_OC6_SetConfig+0x78>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a16      	ldr	r2, [pc, #88]	; (80068dc <TIM_OC6_SetConfig+0xc4>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d003      	beq.n	8006890 <TIM_OC6_SetConfig+0x78>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a15      	ldr	r2, [pc, #84]	; (80068e0 <TIM_OC6_SetConfig+0xc8>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d109      	bne.n	80068a4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006896:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	029b      	lsls	r3, r3, #10
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	685a      	ldr	r2, [r3, #4]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	693a      	ldr	r2, [r7, #16]
 80068bc:	621a      	str	r2, [r3, #32]
}
 80068be:	bf00      	nop
 80068c0:	371c      	adds	r7, #28
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
 80068ca:	bf00      	nop
 80068cc:	feff8fff 	.word	0xfeff8fff
 80068d0:	40010000 	.word	0x40010000
 80068d4:	40010400 	.word	0x40010400
 80068d8:	40014000 	.word	0x40014000
 80068dc:	40014400 	.word	0x40014400
 80068e0:	40014800 	.word	0x40014800

080068e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b087      	sub	sp, #28
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6a1b      	ldr	r3, [r3, #32]
 80068f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f023 0201 	bic.w	r2, r3, #1
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	699b      	ldr	r3, [r3, #24]
 8006906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800690e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	011b      	lsls	r3, r3, #4
 8006914:	693a      	ldr	r2, [r7, #16]
 8006916:	4313      	orrs	r3, r2
 8006918:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f023 030a 	bic.w	r3, r3, #10
 8006920:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4313      	orrs	r3, r2
 8006928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	621a      	str	r2, [r3, #32]
}
 8006936:	bf00      	nop
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006942:	b480      	push	{r7}
 8006944:	b087      	sub	sp, #28
 8006946:	af00      	add	r7, sp, #0
 8006948:	60f8      	str	r0, [r7, #12]
 800694a:	60b9      	str	r1, [r7, #8]
 800694c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	f023 0210 	bic.w	r2, r3, #16
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6a1b      	ldr	r3, [r3, #32]
 8006964:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800696c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	031b      	lsls	r3, r3, #12
 8006972:	697a      	ldr	r2, [r7, #20]
 8006974:	4313      	orrs	r3, r2
 8006976:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800697e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	011b      	lsls	r3, r3, #4
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	4313      	orrs	r3, r2
 8006988:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	621a      	str	r2, [r3, #32]
}
 8006996:	bf00      	nop
 8006998:	371c      	adds	r7, #28
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr
	...

080069a4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	4b09      	ldr	r3, [pc, #36]	; (80069dc <TIM_ITRx_SetConfig+0x38>)
 80069b8:	4013      	ands	r3, r2
 80069ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	f043 0307 	orr.w	r3, r3, #7
 80069c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	609a      	str	r2, [r3, #8]
}
 80069ce:	bf00      	nop
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	ffcfff8f 	.word	0xffcfff8f

080069e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b087      	sub	sp, #28
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	60f8      	str	r0, [r7, #12]
 80069e8:	60b9      	str	r1, [r7, #8]
 80069ea:	607a      	str	r2, [r7, #4]
 80069ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	021a      	lsls	r2, r3, #8
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	431a      	orrs	r2, r3
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	609a      	str	r2, [r3, #8]
}
 8006a14:	bf00      	nop
 8006a16:	371c      	adds	r7, #28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f003 031f 	and.w	r3, r3, #31
 8006a32:	2201      	movs	r2, #1
 8006a34:	fa02 f303 	lsl.w	r3, r2, r3
 8006a38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	6a1a      	ldr	r2, [r3, #32]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	43db      	mvns	r3, r3
 8006a42:	401a      	ands	r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6a1a      	ldr	r2, [r3, #32]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	f003 031f 	and.w	r3, r3, #31
 8006a52:	6879      	ldr	r1, [r7, #4]
 8006a54:	fa01 f303 	lsl.w	r3, r1, r3
 8006a58:	431a      	orrs	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	621a      	str	r2, [r3, #32]
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
	...

08006a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d101      	bne.n	8006a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a80:	2302      	movs	r3, #2
 8006a82:	e06d      	b.n	8006b60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a30      	ldr	r2, [pc, #192]	; (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d004      	beq.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a2f      	ldr	r2, [pc, #188]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d108      	bne.n	8006aca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006abe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ad0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	68fa      	ldr	r2, [r7, #12]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68fa      	ldr	r2, [r7, #12]
 8006ae2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a20      	ldr	r2, [pc, #128]	; (8006b6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d022      	beq.n	8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006af6:	d01d      	beq.n	8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a1d      	ldr	r2, [pc, #116]	; (8006b74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d018      	beq.n	8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a1c      	ldr	r2, [pc, #112]	; (8006b78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d013      	beq.n	8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a1a      	ldr	r2, [pc, #104]	; (8006b7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d00e      	beq.n	8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a15      	ldr	r2, [pc, #84]	; (8006b70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d009      	beq.n	8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a16      	ldr	r2, [pc, #88]	; (8006b80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d004      	beq.n	8006b34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	4a15      	ldr	r2, [pc, #84]	; (8006b84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006b30:	4293      	cmp	r3, r2
 8006b32:	d10c      	bne.n	8006b4e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	40010000 	.word	0x40010000
 8006b70:	40010400 	.word	0x40010400
 8006b74:	40000400 	.word	0x40000400
 8006b78:	40000800 	.word	0x40000800
 8006b7c:	40000c00 	.word	0x40000c00
 8006b80:	40001800 	.word	0x40001800
 8006b84:	40014000 	.word	0x40014000

08006b88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e042      	b.n	8006c20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d106      	bne.n	8006bb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f7fa f8ef 	bl	8000d90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2224      	movs	r2, #36	; 0x24
 8006bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f022 0201 	bic.w	r2, r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f82c 	bl	8006c28 <UART_SetConfig>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	d101      	bne.n	8006bda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e022      	b.n	8006c20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d002      	beq.n	8006be8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fd88 	bl	80076f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685a      	ldr	r2, [r3, #4]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689a      	ldr	r2, [r3, #8]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f042 0201 	orr.w	r2, r2, #1
 8006c16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fe0f 	bl	800783c <UART_CheckIdleState>
 8006c1e:	4603      	mov	r3, r0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c2c:	b092      	sub	sp, #72	; 0x48
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	689a      	ldr	r2, [r3, #8]
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	431a      	orrs	r2, r3
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	431a      	orrs	r2, r3
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	69db      	ldr	r3, [r3, #28]
 8006c4c:	4313      	orrs	r3, r2
 8006c4e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	4bbe      	ldr	r3, [pc, #760]	; (8006f50 <UART_SetConfig+0x328>)
 8006c58:	4013      	ands	r3, r2
 8006c5a:	697a      	ldr	r2, [r7, #20]
 8006c5c:	6812      	ldr	r2, [r2, #0]
 8006c5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006c60:	430b      	orrs	r3, r1
 8006c62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	68da      	ldr	r2, [r3, #12]
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4ab3      	ldr	r2, [pc, #716]	; (8006f54 <UART_SetConfig+0x32c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d004      	beq.n	8006c94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	6a1b      	ldr	r3, [r3, #32]
 8006c8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c90:	4313      	orrs	r3, r2
 8006c92:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689a      	ldr	r2, [r3, #8]
 8006c9a:	4baf      	ldr	r3, [pc, #700]	; (8006f58 <UART_SetConfig+0x330>)
 8006c9c:	4013      	ands	r3, r2
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	6812      	ldr	r2, [r2, #0]
 8006ca2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006ca4:	430b      	orrs	r3, r1
 8006ca6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cae:	f023 010f 	bic.w	r1, r3, #15
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	430a      	orrs	r2, r1
 8006cbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4aa6      	ldr	r2, [pc, #664]	; (8006f5c <UART_SetConfig+0x334>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d177      	bne.n	8006db8 <UART_SetConfig+0x190>
 8006cc8:	4ba5      	ldr	r3, [pc, #660]	; (8006f60 <UART_SetConfig+0x338>)
 8006cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ccc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cd0:	2b28      	cmp	r3, #40	; 0x28
 8006cd2:	d86d      	bhi.n	8006db0 <UART_SetConfig+0x188>
 8006cd4:	a201      	add	r2, pc, #4	; (adr r2, 8006cdc <UART_SetConfig+0xb4>)
 8006cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cda:	bf00      	nop
 8006cdc:	08006d81 	.word	0x08006d81
 8006ce0:	08006db1 	.word	0x08006db1
 8006ce4:	08006db1 	.word	0x08006db1
 8006ce8:	08006db1 	.word	0x08006db1
 8006cec:	08006db1 	.word	0x08006db1
 8006cf0:	08006db1 	.word	0x08006db1
 8006cf4:	08006db1 	.word	0x08006db1
 8006cf8:	08006db1 	.word	0x08006db1
 8006cfc:	08006d89 	.word	0x08006d89
 8006d00:	08006db1 	.word	0x08006db1
 8006d04:	08006db1 	.word	0x08006db1
 8006d08:	08006db1 	.word	0x08006db1
 8006d0c:	08006db1 	.word	0x08006db1
 8006d10:	08006db1 	.word	0x08006db1
 8006d14:	08006db1 	.word	0x08006db1
 8006d18:	08006db1 	.word	0x08006db1
 8006d1c:	08006d91 	.word	0x08006d91
 8006d20:	08006db1 	.word	0x08006db1
 8006d24:	08006db1 	.word	0x08006db1
 8006d28:	08006db1 	.word	0x08006db1
 8006d2c:	08006db1 	.word	0x08006db1
 8006d30:	08006db1 	.word	0x08006db1
 8006d34:	08006db1 	.word	0x08006db1
 8006d38:	08006db1 	.word	0x08006db1
 8006d3c:	08006d99 	.word	0x08006d99
 8006d40:	08006db1 	.word	0x08006db1
 8006d44:	08006db1 	.word	0x08006db1
 8006d48:	08006db1 	.word	0x08006db1
 8006d4c:	08006db1 	.word	0x08006db1
 8006d50:	08006db1 	.word	0x08006db1
 8006d54:	08006db1 	.word	0x08006db1
 8006d58:	08006db1 	.word	0x08006db1
 8006d5c:	08006da1 	.word	0x08006da1
 8006d60:	08006db1 	.word	0x08006db1
 8006d64:	08006db1 	.word	0x08006db1
 8006d68:	08006db1 	.word	0x08006db1
 8006d6c:	08006db1 	.word	0x08006db1
 8006d70:	08006db1 	.word	0x08006db1
 8006d74:	08006db1 	.word	0x08006db1
 8006d78:	08006db1 	.word	0x08006db1
 8006d7c:	08006da9 	.word	0x08006da9
 8006d80:	2301      	movs	r3, #1
 8006d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d86:	e222      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006d88:	2304      	movs	r3, #4
 8006d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d8e:	e21e      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006d90:	2308      	movs	r3, #8
 8006d92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d96:	e21a      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006d98:	2310      	movs	r3, #16
 8006d9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d9e:	e216      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006da0:	2320      	movs	r3, #32
 8006da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006da6:	e212      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006da8:	2340      	movs	r3, #64	; 0x40
 8006daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dae:	e20e      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006db0:	2380      	movs	r3, #128	; 0x80
 8006db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006db6:	e20a      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a69      	ldr	r2, [pc, #420]	; (8006f64 <UART_SetConfig+0x33c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d130      	bne.n	8006e24 <UART_SetConfig+0x1fc>
 8006dc2:	4b67      	ldr	r3, [pc, #412]	; (8006f60 <UART_SetConfig+0x338>)
 8006dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc6:	f003 0307 	and.w	r3, r3, #7
 8006dca:	2b05      	cmp	r3, #5
 8006dcc:	d826      	bhi.n	8006e1c <UART_SetConfig+0x1f4>
 8006dce:	a201      	add	r2, pc, #4	; (adr r2, 8006dd4 <UART_SetConfig+0x1ac>)
 8006dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd4:	08006ded 	.word	0x08006ded
 8006dd8:	08006df5 	.word	0x08006df5
 8006ddc:	08006dfd 	.word	0x08006dfd
 8006de0:	08006e05 	.word	0x08006e05
 8006de4:	08006e0d 	.word	0x08006e0d
 8006de8:	08006e15 	.word	0x08006e15
 8006dec:	2300      	movs	r3, #0
 8006dee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006df2:	e1ec      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006df4:	2304      	movs	r3, #4
 8006df6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dfa:	e1e8      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006dfc:	2308      	movs	r3, #8
 8006dfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e02:	e1e4      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006e04:	2310      	movs	r3, #16
 8006e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e0a:	e1e0      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006e0c:	2320      	movs	r3, #32
 8006e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e12:	e1dc      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006e14:	2340      	movs	r3, #64	; 0x40
 8006e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e1a:	e1d8      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006e1c:	2380      	movs	r3, #128	; 0x80
 8006e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e22:	e1d4      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a4f      	ldr	r2, [pc, #316]	; (8006f68 <UART_SetConfig+0x340>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d130      	bne.n	8006e90 <UART_SetConfig+0x268>
 8006e2e:	4b4c      	ldr	r3, [pc, #304]	; (8006f60 <UART_SetConfig+0x338>)
 8006e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e32:	f003 0307 	and.w	r3, r3, #7
 8006e36:	2b05      	cmp	r3, #5
 8006e38:	d826      	bhi.n	8006e88 <UART_SetConfig+0x260>
 8006e3a:	a201      	add	r2, pc, #4	; (adr r2, 8006e40 <UART_SetConfig+0x218>)
 8006e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e40:	08006e59 	.word	0x08006e59
 8006e44:	08006e61 	.word	0x08006e61
 8006e48:	08006e69 	.word	0x08006e69
 8006e4c:	08006e71 	.word	0x08006e71
 8006e50:	08006e79 	.word	0x08006e79
 8006e54:	08006e81 	.word	0x08006e81
 8006e58:	2300      	movs	r3, #0
 8006e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e5e:	e1b6      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006e60:	2304      	movs	r3, #4
 8006e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e66:	e1b2      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006e68:	2308      	movs	r3, #8
 8006e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e6e:	e1ae      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006e70:	2310      	movs	r3, #16
 8006e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e76:	e1aa      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006e78:	2320      	movs	r3, #32
 8006e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e7e:	e1a6      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006e80:	2340      	movs	r3, #64	; 0x40
 8006e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e86:	e1a2      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006e88:	2380      	movs	r3, #128	; 0x80
 8006e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e8e:	e19e      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a35      	ldr	r2, [pc, #212]	; (8006f6c <UART_SetConfig+0x344>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d130      	bne.n	8006efc <UART_SetConfig+0x2d4>
 8006e9a:	4b31      	ldr	r3, [pc, #196]	; (8006f60 <UART_SetConfig+0x338>)
 8006e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e9e:	f003 0307 	and.w	r3, r3, #7
 8006ea2:	2b05      	cmp	r3, #5
 8006ea4:	d826      	bhi.n	8006ef4 <UART_SetConfig+0x2cc>
 8006ea6:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <UART_SetConfig+0x284>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006ec5 	.word	0x08006ec5
 8006eb0:	08006ecd 	.word	0x08006ecd
 8006eb4:	08006ed5 	.word	0x08006ed5
 8006eb8:	08006edd 	.word	0x08006edd
 8006ebc:	08006ee5 	.word	0x08006ee5
 8006ec0:	08006eed 	.word	0x08006eed
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eca:	e180      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006ecc:	2304      	movs	r3, #4
 8006ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ed2:	e17c      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006ed4:	2308      	movs	r3, #8
 8006ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eda:	e178      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006edc:	2310      	movs	r3, #16
 8006ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ee2:	e174      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006ee4:	2320      	movs	r3, #32
 8006ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006eea:	e170      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006eec:	2340      	movs	r3, #64	; 0x40
 8006eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ef2:	e16c      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006ef4:	2380      	movs	r3, #128	; 0x80
 8006ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006efa:	e168      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a1b      	ldr	r2, [pc, #108]	; (8006f70 <UART_SetConfig+0x348>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d142      	bne.n	8006f8c <UART_SetConfig+0x364>
 8006f06:	4b16      	ldr	r3, [pc, #88]	; (8006f60 <UART_SetConfig+0x338>)
 8006f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f0a:	f003 0307 	and.w	r3, r3, #7
 8006f0e:	2b05      	cmp	r3, #5
 8006f10:	d838      	bhi.n	8006f84 <UART_SetConfig+0x35c>
 8006f12:	a201      	add	r2, pc, #4	; (adr r2, 8006f18 <UART_SetConfig+0x2f0>)
 8006f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f18:	08006f31 	.word	0x08006f31
 8006f1c:	08006f39 	.word	0x08006f39
 8006f20:	08006f41 	.word	0x08006f41
 8006f24:	08006f49 	.word	0x08006f49
 8006f28:	08006f75 	.word	0x08006f75
 8006f2c:	08006f7d 	.word	0x08006f7d
 8006f30:	2300      	movs	r3, #0
 8006f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f36:	e14a      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006f38:	2304      	movs	r3, #4
 8006f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3e:	e146      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006f40:	2308      	movs	r3, #8
 8006f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f46:	e142      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006f48:	2310      	movs	r3, #16
 8006f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4e:	e13e      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006f50:	cfff69f3 	.word	0xcfff69f3
 8006f54:	58000c00 	.word	0x58000c00
 8006f58:	11fff4ff 	.word	0x11fff4ff
 8006f5c:	40011000 	.word	0x40011000
 8006f60:	58024400 	.word	0x58024400
 8006f64:	40004400 	.word	0x40004400
 8006f68:	40004800 	.word	0x40004800
 8006f6c:	40004c00 	.word	0x40004c00
 8006f70:	40005000 	.word	0x40005000
 8006f74:	2320      	movs	r3, #32
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7a:	e128      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006f7c:	2340      	movs	r3, #64	; 0x40
 8006f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f82:	e124      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006f84:	2380      	movs	r3, #128	; 0x80
 8006f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8a:	e120      	b.n	80071ce <UART_SetConfig+0x5a6>
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4acb      	ldr	r2, [pc, #812]	; (80072c0 <UART_SetConfig+0x698>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d176      	bne.n	8007084 <UART_SetConfig+0x45c>
 8006f96:	4bcb      	ldr	r3, [pc, #812]	; (80072c4 <UART_SetConfig+0x69c>)
 8006f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f9e:	2b28      	cmp	r3, #40	; 0x28
 8006fa0:	d86c      	bhi.n	800707c <UART_SetConfig+0x454>
 8006fa2:	a201      	add	r2, pc, #4	; (adr r2, 8006fa8 <UART_SetConfig+0x380>)
 8006fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fa8:	0800704d 	.word	0x0800704d
 8006fac:	0800707d 	.word	0x0800707d
 8006fb0:	0800707d 	.word	0x0800707d
 8006fb4:	0800707d 	.word	0x0800707d
 8006fb8:	0800707d 	.word	0x0800707d
 8006fbc:	0800707d 	.word	0x0800707d
 8006fc0:	0800707d 	.word	0x0800707d
 8006fc4:	0800707d 	.word	0x0800707d
 8006fc8:	08007055 	.word	0x08007055
 8006fcc:	0800707d 	.word	0x0800707d
 8006fd0:	0800707d 	.word	0x0800707d
 8006fd4:	0800707d 	.word	0x0800707d
 8006fd8:	0800707d 	.word	0x0800707d
 8006fdc:	0800707d 	.word	0x0800707d
 8006fe0:	0800707d 	.word	0x0800707d
 8006fe4:	0800707d 	.word	0x0800707d
 8006fe8:	0800705d 	.word	0x0800705d
 8006fec:	0800707d 	.word	0x0800707d
 8006ff0:	0800707d 	.word	0x0800707d
 8006ff4:	0800707d 	.word	0x0800707d
 8006ff8:	0800707d 	.word	0x0800707d
 8006ffc:	0800707d 	.word	0x0800707d
 8007000:	0800707d 	.word	0x0800707d
 8007004:	0800707d 	.word	0x0800707d
 8007008:	08007065 	.word	0x08007065
 800700c:	0800707d 	.word	0x0800707d
 8007010:	0800707d 	.word	0x0800707d
 8007014:	0800707d 	.word	0x0800707d
 8007018:	0800707d 	.word	0x0800707d
 800701c:	0800707d 	.word	0x0800707d
 8007020:	0800707d 	.word	0x0800707d
 8007024:	0800707d 	.word	0x0800707d
 8007028:	0800706d 	.word	0x0800706d
 800702c:	0800707d 	.word	0x0800707d
 8007030:	0800707d 	.word	0x0800707d
 8007034:	0800707d 	.word	0x0800707d
 8007038:	0800707d 	.word	0x0800707d
 800703c:	0800707d 	.word	0x0800707d
 8007040:	0800707d 	.word	0x0800707d
 8007044:	0800707d 	.word	0x0800707d
 8007048:	08007075 	.word	0x08007075
 800704c:	2301      	movs	r3, #1
 800704e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007052:	e0bc      	b.n	80071ce <UART_SetConfig+0x5a6>
 8007054:	2304      	movs	r3, #4
 8007056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705a:	e0b8      	b.n	80071ce <UART_SetConfig+0x5a6>
 800705c:	2308      	movs	r3, #8
 800705e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007062:	e0b4      	b.n	80071ce <UART_SetConfig+0x5a6>
 8007064:	2310      	movs	r3, #16
 8007066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800706a:	e0b0      	b.n	80071ce <UART_SetConfig+0x5a6>
 800706c:	2320      	movs	r3, #32
 800706e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007072:	e0ac      	b.n	80071ce <UART_SetConfig+0x5a6>
 8007074:	2340      	movs	r3, #64	; 0x40
 8007076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800707a:	e0a8      	b.n	80071ce <UART_SetConfig+0x5a6>
 800707c:	2380      	movs	r3, #128	; 0x80
 800707e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007082:	e0a4      	b.n	80071ce <UART_SetConfig+0x5a6>
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a8f      	ldr	r2, [pc, #572]	; (80072c8 <UART_SetConfig+0x6a0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d130      	bne.n	80070f0 <UART_SetConfig+0x4c8>
 800708e:	4b8d      	ldr	r3, [pc, #564]	; (80072c4 <UART_SetConfig+0x69c>)
 8007090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007092:	f003 0307 	and.w	r3, r3, #7
 8007096:	2b05      	cmp	r3, #5
 8007098:	d826      	bhi.n	80070e8 <UART_SetConfig+0x4c0>
 800709a:	a201      	add	r2, pc, #4	; (adr r2, 80070a0 <UART_SetConfig+0x478>)
 800709c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a0:	080070b9 	.word	0x080070b9
 80070a4:	080070c1 	.word	0x080070c1
 80070a8:	080070c9 	.word	0x080070c9
 80070ac:	080070d1 	.word	0x080070d1
 80070b0:	080070d9 	.word	0x080070d9
 80070b4:	080070e1 	.word	0x080070e1
 80070b8:	2300      	movs	r3, #0
 80070ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070be:	e086      	b.n	80071ce <UART_SetConfig+0x5a6>
 80070c0:	2304      	movs	r3, #4
 80070c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070c6:	e082      	b.n	80071ce <UART_SetConfig+0x5a6>
 80070c8:	2308      	movs	r3, #8
 80070ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ce:	e07e      	b.n	80071ce <UART_SetConfig+0x5a6>
 80070d0:	2310      	movs	r3, #16
 80070d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070d6:	e07a      	b.n	80071ce <UART_SetConfig+0x5a6>
 80070d8:	2320      	movs	r3, #32
 80070da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070de:	e076      	b.n	80071ce <UART_SetConfig+0x5a6>
 80070e0:	2340      	movs	r3, #64	; 0x40
 80070e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070e6:	e072      	b.n	80071ce <UART_SetConfig+0x5a6>
 80070e8:	2380      	movs	r3, #128	; 0x80
 80070ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ee:	e06e      	b.n	80071ce <UART_SetConfig+0x5a6>
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a75      	ldr	r2, [pc, #468]	; (80072cc <UART_SetConfig+0x6a4>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d130      	bne.n	800715c <UART_SetConfig+0x534>
 80070fa:	4b72      	ldr	r3, [pc, #456]	; (80072c4 <UART_SetConfig+0x69c>)
 80070fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	2b05      	cmp	r3, #5
 8007104:	d826      	bhi.n	8007154 <UART_SetConfig+0x52c>
 8007106:	a201      	add	r2, pc, #4	; (adr r2, 800710c <UART_SetConfig+0x4e4>)
 8007108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710c:	08007125 	.word	0x08007125
 8007110:	0800712d 	.word	0x0800712d
 8007114:	08007135 	.word	0x08007135
 8007118:	0800713d 	.word	0x0800713d
 800711c:	08007145 	.word	0x08007145
 8007120:	0800714d 	.word	0x0800714d
 8007124:	2300      	movs	r3, #0
 8007126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800712a:	e050      	b.n	80071ce <UART_SetConfig+0x5a6>
 800712c:	2304      	movs	r3, #4
 800712e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007132:	e04c      	b.n	80071ce <UART_SetConfig+0x5a6>
 8007134:	2308      	movs	r3, #8
 8007136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800713a:	e048      	b.n	80071ce <UART_SetConfig+0x5a6>
 800713c:	2310      	movs	r3, #16
 800713e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007142:	e044      	b.n	80071ce <UART_SetConfig+0x5a6>
 8007144:	2320      	movs	r3, #32
 8007146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800714a:	e040      	b.n	80071ce <UART_SetConfig+0x5a6>
 800714c:	2340      	movs	r3, #64	; 0x40
 800714e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007152:	e03c      	b.n	80071ce <UART_SetConfig+0x5a6>
 8007154:	2380      	movs	r3, #128	; 0x80
 8007156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800715a:	e038      	b.n	80071ce <UART_SetConfig+0x5a6>
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a5b      	ldr	r2, [pc, #364]	; (80072d0 <UART_SetConfig+0x6a8>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d130      	bne.n	80071c8 <UART_SetConfig+0x5a0>
 8007166:	4b57      	ldr	r3, [pc, #348]	; (80072c4 <UART_SetConfig+0x69c>)
 8007168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800716a:	f003 0307 	and.w	r3, r3, #7
 800716e:	2b05      	cmp	r3, #5
 8007170:	d826      	bhi.n	80071c0 <UART_SetConfig+0x598>
 8007172:	a201      	add	r2, pc, #4	; (adr r2, 8007178 <UART_SetConfig+0x550>)
 8007174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007178:	08007191 	.word	0x08007191
 800717c:	08007199 	.word	0x08007199
 8007180:	080071a1 	.word	0x080071a1
 8007184:	080071a9 	.word	0x080071a9
 8007188:	080071b1 	.word	0x080071b1
 800718c:	080071b9 	.word	0x080071b9
 8007190:	2302      	movs	r3, #2
 8007192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007196:	e01a      	b.n	80071ce <UART_SetConfig+0x5a6>
 8007198:	2304      	movs	r3, #4
 800719a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800719e:	e016      	b.n	80071ce <UART_SetConfig+0x5a6>
 80071a0:	2308      	movs	r3, #8
 80071a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071a6:	e012      	b.n	80071ce <UART_SetConfig+0x5a6>
 80071a8:	2310      	movs	r3, #16
 80071aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ae:	e00e      	b.n	80071ce <UART_SetConfig+0x5a6>
 80071b0:	2320      	movs	r3, #32
 80071b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071b6:	e00a      	b.n	80071ce <UART_SetConfig+0x5a6>
 80071b8:	2340      	movs	r3, #64	; 0x40
 80071ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071be:	e006      	b.n	80071ce <UART_SetConfig+0x5a6>
 80071c0:	2380      	movs	r3, #128	; 0x80
 80071c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071c6:	e002      	b.n	80071ce <UART_SetConfig+0x5a6>
 80071c8:	2380      	movs	r3, #128	; 0x80
 80071ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a3f      	ldr	r2, [pc, #252]	; (80072d0 <UART_SetConfig+0x6a8>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	f040 80f8 	bne.w	80073ca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80071da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80071de:	2b20      	cmp	r3, #32
 80071e0:	dc46      	bgt.n	8007270 <UART_SetConfig+0x648>
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	f2c0 8082 	blt.w	80072ec <UART_SetConfig+0x6c4>
 80071e8:	3b02      	subs	r3, #2
 80071ea:	2b1e      	cmp	r3, #30
 80071ec:	d87e      	bhi.n	80072ec <UART_SetConfig+0x6c4>
 80071ee:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <UART_SetConfig+0x5cc>)
 80071f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f4:	08007277 	.word	0x08007277
 80071f8:	080072ed 	.word	0x080072ed
 80071fc:	0800727f 	.word	0x0800727f
 8007200:	080072ed 	.word	0x080072ed
 8007204:	080072ed 	.word	0x080072ed
 8007208:	080072ed 	.word	0x080072ed
 800720c:	0800728f 	.word	0x0800728f
 8007210:	080072ed 	.word	0x080072ed
 8007214:	080072ed 	.word	0x080072ed
 8007218:	080072ed 	.word	0x080072ed
 800721c:	080072ed 	.word	0x080072ed
 8007220:	080072ed 	.word	0x080072ed
 8007224:	080072ed 	.word	0x080072ed
 8007228:	080072ed 	.word	0x080072ed
 800722c:	0800729f 	.word	0x0800729f
 8007230:	080072ed 	.word	0x080072ed
 8007234:	080072ed 	.word	0x080072ed
 8007238:	080072ed 	.word	0x080072ed
 800723c:	080072ed 	.word	0x080072ed
 8007240:	080072ed 	.word	0x080072ed
 8007244:	080072ed 	.word	0x080072ed
 8007248:	080072ed 	.word	0x080072ed
 800724c:	080072ed 	.word	0x080072ed
 8007250:	080072ed 	.word	0x080072ed
 8007254:	080072ed 	.word	0x080072ed
 8007258:	080072ed 	.word	0x080072ed
 800725c:	080072ed 	.word	0x080072ed
 8007260:	080072ed 	.word	0x080072ed
 8007264:	080072ed 	.word	0x080072ed
 8007268:	080072ed 	.word	0x080072ed
 800726c:	080072df 	.word	0x080072df
 8007270:	2b40      	cmp	r3, #64	; 0x40
 8007272:	d037      	beq.n	80072e4 <UART_SetConfig+0x6bc>
 8007274:	e03a      	b.n	80072ec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007276:	f7fd fe7f 	bl	8004f78 <HAL_RCCEx_GetD3PCLK1Freq>
 800727a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800727c:	e03c      	b.n	80072f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800727e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007282:	4618      	mov	r0, r3
 8007284:	f7fd fe8e 	bl	8004fa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800728c:	e034      	b.n	80072f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800728e:	f107 0318 	add.w	r3, r7, #24
 8007292:	4618      	mov	r0, r3
 8007294:	f7fd ffda 	bl	800524c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800729c:	e02c      	b.n	80072f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800729e:	4b09      	ldr	r3, [pc, #36]	; (80072c4 <UART_SetConfig+0x69c>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0320 	and.w	r3, r3, #32
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d016      	beq.n	80072d8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80072aa:	4b06      	ldr	r3, [pc, #24]	; (80072c4 <UART_SetConfig+0x69c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	08db      	lsrs	r3, r3, #3
 80072b0:	f003 0303 	and.w	r3, r3, #3
 80072b4:	4a07      	ldr	r2, [pc, #28]	; (80072d4 <UART_SetConfig+0x6ac>)
 80072b6:	fa22 f303 	lsr.w	r3, r2, r3
 80072ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80072bc:	e01c      	b.n	80072f8 <UART_SetConfig+0x6d0>
 80072be:	bf00      	nop
 80072c0:	40011400 	.word	0x40011400
 80072c4:	58024400 	.word	0x58024400
 80072c8:	40007800 	.word	0x40007800
 80072cc:	40007c00 	.word	0x40007c00
 80072d0:	58000c00 	.word	0x58000c00
 80072d4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80072d8:	4b9d      	ldr	r3, [pc, #628]	; (8007550 <UART_SetConfig+0x928>)
 80072da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072dc:	e00c      	b.n	80072f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80072de:	4b9d      	ldr	r3, [pc, #628]	; (8007554 <UART_SetConfig+0x92c>)
 80072e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072e2:	e009      	b.n	80072f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80072ea:	e005      	b.n	80072f8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80072f0:	2301      	movs	r3, #1
 80072f2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80072f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80072f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 81de 	beq.w	80076bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	4a94      	ldr	r2, [pc, #592]	; (8007558 <UART_SetConfig+0x930>)
 8007306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800730a:	461a      	mov	r2, r3
 800730c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800730e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007312:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007314:	697b      	ldr	r3, [r7, #20]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	4613      	mov	r3, r2
 800731a:	005b      	lsls	r3, r3, #1
 800731c:	4413      	add	r3, r2
 800731e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007320:	429a      	cmp	r2, r3
 8007322:	d305      	bcc.n	8007330 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800732a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800732c:	429a      	cmp	r2, r3
 800732e:	d903      	bls.n	8007338 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007336:	e1c1      	b.n	80076bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800733a:	2200      	movs	r2, #0
 800733c:	60bb      	str	r3, [r7, #8]
 800733e:	60fa      	str	r2, [r7, #12]
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007344:	4a84      	ldr	r2, [pc, #528]	; (8007558 <UART_SetConfig+0x930>)
 8007346:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800734a:	b29b      	uxth	r3, r3
 800734c:	2200      	movs	r2, #0
 800734e:	603b      	str	r3, [r7, #0]
 8007350:	607a      	str	r2, [r7, #4]
 8007352:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007356:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800735a:	f7f8 ffbd 	bl	80002d8 <__aeabi_uldivmod>
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	4610      	mov	r0, r2
 8007364:	4619      	mov	r1, r3
 8007366:	f04f 0200 	mov.w	r2, #0
 800736a:	f04f 0300 	mov.w	r3, #0
 800736e:	020b      	lsls	r3, r1, #8
 8007370:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007374:	0202      	lsls	r2, r0, #8
 8007376:	6979      	ldr	r1, [r7, #20]
 8007378:	6849      	ldr	r1, [r1, #4]
 800737a:	0849      	lsrs	r1, r1, #1
 800737c:	2000      	movs	r0, #0
 800737e:	460c      	mov	r4, r1
 8007380:	4605      	mov	r5, r0
 8007382:	eb12 0804 	adds.w	r8, r2, r4
 8007386:	eb43 0905 	adc.w	r9, r3, r5
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	469a      	mov	sl, r3
 8007392:	4693      	mov	fp, r2
 8007394:	4652      	mov	r2, sl
 8007396:	465b      	mov	r3, fp
 8007398:	4640      	mov	r0, r8
 800739a:	4649      	mov	r1, r9
 800739c:	f7f8 ff9c 	bl	80002d8 <__aeabi_uldivmod>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	4613      	mov	r3, r2
 80073a6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80073a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073ae:	d308      	bcc.n	80073c2 <UART_SetConfig+0x79a>
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073b6:	d204      	bcs.n	80073c2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073be:	60da      	str	r2, [r3, #12]
 80073c0:	e17c      	b.n	80076bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80073c8:	e178      	b.n	80076bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073d2:	f040 80c5 	bne.w	8007560 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80073d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80073da:	2b20      	cmp	r3, #32
 80073dc:	dc48      	bgt.n	8007470 <UART_SetConfig+0x848>
 80073de:	2b00      	cmp	r3, #0
 80073e0:	db7b      	blt.n	80074da <UART_SetConfig+0x8b2>
 80073e2:	2b20      	cmp	r3, #32
 80073e4:	d879      	bhi.n	80074da <UART_SetConfig+0x8b2>
 80073e6:	a201      	add	r2, pc, #4	; (adr r2, 80073ec <UART_SetConfig+0x7c4>)
 80073e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ec:	08007477 	.word	0x08007477
 80073f0:	0800747f 	.word	0x0800747f
 80073f4:	080074db 	.word	0x080074db
 80073f8:	080074db 	.word	0x080074db
 80073fc:	08007487 	.word	0x08007487
 8007400:	080074db 	.word	0x080074db
 8007404:	080074db 	.word	0x080074db
 8007408:	080074db 	.word	0x080074db
 800740c:	08007497 	.word	0x08007497
 8007410:	080074db 	.word	0x080074db
 8007414:	080074db 	.word	0x080074db
 8007418:	080074db 	.word	0x080074db
 800741c:	080074db 	.word	0x080074db
 8007420:	080074db 	.word	0x080074db
 8007424:	080074db 	.word	0x080074db
 8007428:	080074db 	.word	0x080074db
 800742c:	080074a7 	.word	0x080074a7
 8007430:	080074db 	.word	0x080074db
 8007434:	080074db 	.word	0x080074db
 8007438:	080074db 	.word	0x080074db
 800743c:	080074db 	.word	0x080074db
 8007440:	080074db 	.word	0x080074db
 8007444:	080074db 	.word	0x080074db
 8007448:	080074db 	.word	0x080074db
 800744c:	080074db 	.word	0x080074db
 8007450:	080074db 	.word	0x080074db
 8007454:	080074db 	.word	0x080074db
 8007458:	080074db 	.word	0x080074db
 800745c:	080074db 	.word	0x080074db
 8007460:	080074db 	.word	0x080074db
 8007464:	080074db 	.word	0x080074db
 8007468:	080074db 	.word	0x080074db
 800746c:	080074cd 	.word	0x080074cd
 8007470:	2b40      	cmp	r3, #64	; 0x40
 8007472:	d02e      	beq.n	80074d2 <UART_SetConfig+0x8aa>
 8007474:	e031      	b.n	80074da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007476:	f7fc f93b 	bl	80036f0 <HAL_RCC_GetPCLK1Freq>
 800747a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800747c:	e033      	b.n	80074e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800747e:	f7fc f94d 	bl	800371c <HAL_RCC_GetPCLK2Freq>
 8007482:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007484:	e02f      	b.n	80074e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800748a:	4618      	mov	r0, r3
 800748c:	f7fd fd8a 	bl	8004fa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007494:	e027      	b.n	80074e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007496:	f107 0318 	add.w	r3, r7, #24
 800749a:	4618      	mov	r0, r3
 800749c:	f7fd fed6 	bl	800524c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074a4:	e01f      	b.n	80074e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80074a6:	4b2d      	ldr	r3, [pc, #180]	; (800755c <UART_SetConfig+0x934>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0320 	and.w	r3, r3, #32
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d009      	beq.n	80074c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80074b2:	4b2a      	ldr	r3, [pc, #168]	; (800755c <UART_SetConfig+0x934>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	08db      	lsrs	r3, r3, #3
 80074b8:	f003 0303 	and.w	r3, r3, #3
 80074bc:	4a24      	ldr	r2, [pc, #144]	; (8007550 <UART_SetConfig+0x928>)
 80074be:	fa22 f303 	lsr.w	r3, r2, r3
 80074c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80074c4:	e00f      	b.n	80074e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80074c6:	4b22      	ldr	r3, [pc, #136]	; (8007550 <UART_SetConfig+0x928>)
 80074c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074ca:	e00c      	b.n	80074e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80074cc:	4b21      	ldr	r3, [pc, #132]	; (8007554 <UART_SetConfig+0x92c>)
 80074ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074d0:	e009      	b.n	80074e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80074d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80074d8:	e005      	b.n	80074e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80074da:	2300      	movs	r3, #0
 80074dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80074de:	2301      	movs	r3, #1
 80074e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80074e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80074e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 80e7 	beq.w	80076bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f2:	4a19      	ldr	r2, [pc, #100]	; (8007558 <UART_SetConfig+0x930>)
 80074f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074f8:	461a      	mov	r2, r3
 80074fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007500:	005a      	lsls	r2, r3, #1
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	085b      	lsrs	r3, r3, #1
 8007508:	441a      	add	r2, r3
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007512:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007516:	2b0f      	cmp	r3, #15
 8007518:	d916      	bls.n	8007548 <UART_SetConfig+0x920>
 800751a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007520:	d212      	bcs.n	8007548 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007524:	b29b      	uxth	r3, r3
 8007526:	f023 030f 	bic.w	r3, r3, #15
 800752a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	085b      	lsrs	r3, r3, #1
 8007530:	b29b      	uxth	r3, r3
 8007532:	f003 0307 	and.w	r3, r3, #7
 8007536:	b29a      	uxth	r2, r3
 8007538:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800753a:	4313      	orrs	r3, r2
 800753c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007544:	60da      	str	r2, [r3, #12]
 8007546:	e0b9      	b.n	80076bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800754e:	e0b5      	b.n	80076bc <UART_SetConfig+0xa94>
 8007550:	03d09000 	.word	0x03d09000
 8007554:	003d0900 	.word	0x003d0900
 8007558:	08007ce8 	.word	0x08007ce8
 800755c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007560:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007564:	2b20      	cmp	r3, #32
 8007566:	dc49      	bgt.n	80075fc <UART_SetConfig+0x9d4>
 8007568:	2b00      	cmp	r3, #0
 800756a:	db7c      	blt.n	8007666 <UART_SetConfig+0xa3e>
 800756c:	2b20      	cmp	r3, #32
 800756e:	d87a      	bhi.n	8007666 <UART_SetConfig+0xa3e>
 8007570:	a201      	add	r2, pc, #4	; (adr r2, 8007578 <UART_SetConfig+0x950>)
 8007572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007576:	bf00      	nop
 8007578:	08007603 	.word	0x08007603
 800757c:	0800760b 	.word	0x0800760b
 8007580:	08007667 	.word	0x08007667
 8007584:	08007667 	.word	0x08007667
 8007588:	08007613 	.word	0x08007613
 800758c:	08007667 	.word	0x08007667
 8007590:	08007667 	.word	0x08007667
 8007594:	08007667 	.word	0x08007667
 8007598:	08007623 	.word	0x08007623
 800759c:	08007667 	.word	0x08007667
 80075a0:	08007667 	.word	0x08007667
 80075a4:	08007667 	.word	0x08007667
 80075a8:	08007667 	.word	0x08007667
 80075ac:	08007667 	.word	0x08007667
 80075b0:	08007667 	.word	0x08007667
 80075b4:	08007667 	.word	0x08007667
 80075b8:	08007633 	.word	0x08007633
 80075bc:	08007667 	.word	0x08007667
 80075c0:	08007667 	.word	0x08007667
 80075c4:	08007667 	.word	0x08007667
 80075c8:	08007667 	.word	0x08007667
 80075cc:	08007667 	.word	0x08007667
 80075d0:	08007667 	.word	0x08007667
 80075d4:	08007667 	.word	0x08007667
 80075d8:	08007667 	.word	0x08007667
 80075dc:	08007667 	.word	0x08007667
 80075e0:	08007667 	.word	0x08007667
 80075e4:	08007667 	.word	0x08007667
 80075e8:	08007667 	.word	0x08007667
 80075ec:	08007667 	.word	0x08007667
 80075f0:	08007667 	.word	0x08007667
 80075f4:	08007667 	.word	0x08007667
 80075f8:	08007659 	.word	0x08007659
 80075fc:	2b40      	cmp	r3, #64	; 0x40
 80075fe:	d02e      	beq.n	800765e <UART_SetConfig+0xa36>
 8007600:	e031      	b.n	8007666 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007602:	f7fc f875 	bl	80036f0 <HAL_RCC_GetPCLK1Freq>
 8007606:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007608:	e033      	b.n	8007672 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800760a:	f7fc f887 	bl	800371c <HAL_RCC_GetPCLK2Freq>
 800760e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007610:	e02f      	b.n	8007672 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007616:	4618      	mov	r0, r3
 8007618:	f7fd fcc4 	bl	8004fa4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800761c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007620:	e027      	b.n	8007672 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007622:	f107 0318 	add.w	r3, r7, #24
 8007626:	4618      	mov	r0, r3
 8007628:	f7fd fe10 	bl	800524c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007630:	e01f      	b.n	8007672 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007632:	4b2d      	ldr	r3, [pc, #180]	; (80076e8 <UART_SetConfig+0xac0>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0320 	and.w	r3, r3, #32
 800763a:	2b00      	cmp	r3, #0
 800763c:	d009      	beq.n	8007652 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800763e:	4b2a      	ldr	r3, [pc, #168]	; (80076e8 <UART_SetConfig+0xac0>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	08db      	lsrs	r3, r3, #3
 8007644:	f003 0303 	and.w	r3, r3, #3
 8007648:	4a28      	ldr	r2, [pc, #160]	; (80076ec <UART_SetConfig+0xac4>)
 800764a:	fa22 f303 	lsr.w	r3, r2, r3
 800764e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007650:	e00f      	b.n	8007672 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8007652:	4b26      	ldr	r3, [pc, #152]	; (80076ec <UART_SetConfig+0xac4>)
 8007654:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007656:	e00c      	b.n	8007672 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007658:	4b25      	ldr	r3, [pc, #148]	; (80076f0 <UART_SetConfig+0xac8>)
 800765a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800765c:	e009      	b.n	8007672 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800765e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007664:	e005      	b.n	8007672 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8007666:	2300      	movs	r3, #0
 8007668:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007670:	bf00      	nop
    }

    if (pclk != 0U)
 8007672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007674:	2b00      	cmp	r3, #0
 8007676:	d021      	beq.n	80076bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	4a1d      	ldr	r2, [pc, #116]	; (80076f4 <UART_SetConfig+0xacc>)
 800767e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007682:	461a      	mov	r2, r3
 8007684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007686:	fbb3 f2f2 	udiv	r2, r3, r2
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	085b      	lsrs	r3, r3, #1
 8007690:	441a      	add	r2, r3
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	685b      	ldr	r3, [r3, #4]
 8007696:	fbb2 f3f3 	udiv	r3, r2, r3
 800769a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	2b0f      	cmp	r3, #15
 80076a0:	d909      	bls.n	80076b6 <UART_SetConfig+0xa8e>
 80076a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076a8:	d205      	bcs.n	80076b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	60da      	str	r2, [r3, #12]
 80076b4:	e002      	b.n	80076bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	2201      	movs	r2, #1
 80076c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	2200      	movs	r2, #0
 80076d0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2200      	movs	r2, #0
 80076d6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80076d8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3748      	adds	r7, #72	; 0x48
 80076e0:	46bd      	mov	sp, r7
 80076e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076e6:	bf00      	nop
 80076e8:	58024400 	.word	0x58024400
 80076ec:	03d09000 	.word	0x03d09000
 80076f0:	003d0900 	.word	0x003d0900
 80076f4:	08007ce8 	.word	0x08007ce8

080076f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007704:	f003 0301 	and.w	r3, r3, #1
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00a      	beq.n	8007722 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	430a      	orrs	r2, r1
 8007720:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007726:	f003 0302 	and.w	r3, r3, #2
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00a      	beq.n	8007744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	685b      	ldr	r3, [r3, #4]
 8007734:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	430a      	orrs	r2, r1
 8007742:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007748:	f003 0304 	and.w	r3, r3, #4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00a      	beq.n	8007766 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	2b00      	cmp	r3, #0
 8007770:	d00a      	beq.n	8007788 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	430a      	orrs	r2, r1
 8007786:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778c:	f003 0310 	and.w	r3, r3, #16
 8007790:	2b00      	cmp	r3, #0
 8007792:	d00a      	beq.n	80077aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	430a      	orrs	r2, r1
 80077a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ae:	f003 0320 	and.w	r3, r3, #32
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d00a      	beq.n	80077cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	689b      	ldr	r3, [r3, #8]
 80077bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d01a      	beq.n	800780e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	430a      	orrs	r2, r1
 80077ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077f6:	d10a      	bne.n	800780e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	430a      	orrs	r2, r1
 800780c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007816:	2b00      	cmp	r3, #0
 8007818:	d00a      	beq.n	8007830 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	430a      	orrs	r2, r1
 800782e:	605a      	str	r2, [r3, #4]
  }
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af02      	add	r7, sp, #8
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800784c:	f7f9 fbde 	bl	800100c <HAL_GetTick>
 8007850:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f003 0308 	and.w	r3, r3, #8
 800785c:	2b08      	cmp	r3, #8
 800785e:	d10e      	bne.n	800787e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007860:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007864:	9300      	str	r3, [sp, #0]
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f82f 	bl	80078d2 <UART_WaitOnFlagUntilTimeout>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e025      	b.n	80078ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0304 	and.w	r3, r3, #4
 8007888:	2b04      	cmp	r3, #4
 800788a:	d10e      	bne.n	80078aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800788c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2200      	movs	r2, #0
 8007896:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 f819 	bl	80078d2 <UART_WaitOnFlagUntilTimeout>
 80078a0:	4603      	mov	r3, r0
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078a6:	2303      	movs	r3, #3
 80078a8:	e00f      	b.n	80078ca <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2220      	movs	r2, #32
 80078b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b09c      	sub	sp, #112	; 0x70
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	60f8      	str	r0, [r7, #12]
 80078da:	60b9      	str	r1, [r7, #8]
 80078dc:	603b      	str	r3, [r7, #0]
 80078de:	4613      	mov	r3, r2
 80078e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078e2:	e0a9      	b.n	8007a38 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ea:	f000 80a5 	beq.w	8007a38 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ee:	f7f9 fb8d 	bl	800100c <HAL_GetTick>
 80078f2:	4602      	mov	r2, r0
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d302      	bcc.n	8007904 <UART_WaitOnFlagUntilTimeout+0x32>
 80078fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007900:	2b00      	cmp	r3, #0
 8007902:	d140      	bne.n	8007986 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800790c:	e853 3f00 	ldrex	r3, [r3]
 8007910:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007914:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007918:	667b      	str	r3, [r7, #100]	; 0x64
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007922:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007924:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007926:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007928:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800792a:	e841 2300 	strex	r3, r2, [r1]
 800792e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1e6      	bne.n	8007904 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3308      	adds	r3, #8
 800793c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007948:	f023 0301 	bic.w	r3, r3, #1
 800794c:	663b      	str	r3, [r7, #96]	; 0x60
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3308      	adds	r3, #8
 8007954:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007956:	64ba      	str	r2, [r7, #72]	; 0x48
 8007958:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800795c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e5      	bne.n	8007936 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	2220      	movs	r2, #32
 800796e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2220      	movs	r2, #32
 8007976:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e069      	b.n	8007a5a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 0304 	and.w	r3, r3, #4
 8007990:	2b00      	cmp	r3, #0
 8007992:	d051      	beq.n	8007a38 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	69db      	ldr	r3, [r3, #28]
 800799a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800799e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079a2:	d149      	bne.n	8007a38 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079ac:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079b6:	e853 3f00 	ldrex	r3, [r3]
 80079ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079c2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	461a      	mov	r2, r3
 80079ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079cc:	637b      	str	r3, [r7, #52]	; 0x34
 80079ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079d4:	e841 2300 	strex	r3, r2, [r1]
 80079d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80079da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d1e6      	bne.n	80079ae <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3308      	adds	r3, #8
 80079e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	e853 3f00 	ldrex	r3, [r3]
 80079ee:	613b      	str	r3, [r7, #16]
   return(result);
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	f023 0301 	bic.w	r3, r3, #1
 80079f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	3308      	adds	r3, #8
 80079fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a00:	623a      	str	r2, [r7, #32]
 8007a02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a04:	69f9      	ldr	r1, [r7, #28]
 8007a06:	6a3a      	ldr	r2, [r7, #32]
 8007a08:	e841 2300 	strex	r3, r2, [r1]
 8007a0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d1e5      	bne.n	80079e0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2220      	movs	r2, #32
 8007a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2220      	movs	r2, #32
 8007a28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e010      	b.n	8007a5a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	69da      	ldr	r2, [r3, #28]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	4013      	ands	r3, r2
 8007a42:	68ba      	ldr	r2, [r7, #8]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	bf0c      	ite	eq
 8007a48:	2301      	moveq	r3, #1
 8007a4a:	2300      	movne	r3, #0
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	461a      	mov	r2, r3
 8007a50:	79fb      	ldrb	r3, [r7, #7]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	f43f af46 	beq.w	80078e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3770      	adds	r7, #112	; 0x70
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b085      	sub	sp, #20
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007a70:	2b01      	cmp	r3, #1
 8007a72:	d101      	bne.n	8007a78 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a74:	2302      	movs	r3, #2
 8007a76:	e027      	b.n	8007ac8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2224      	movs	r2, #36	; 0x24
 8007a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	681a      	ldr	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f022 0201 	bic.w	r2, r2, #1
 8007a9e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007aa6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2220      	movs	r2, #32
 8007aba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3714      	adds	r7, #20
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007ae4:	2b01      	cmp	r3, #1
 8007ae6:	d101      	bne.n	8007aec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ae8:	2302      	movs	r3, #2
 8007aea:	e02d      	b.n	8007b48 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2224      	movs	r2, #36	; 0x24
 8007af8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f022 0201 	bic.w	r2, r2, #1
 8007b12:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	683a      	ldr	r2, [r7, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 f84f 	bl	8007bcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68fa      	ldr	r2, [r7, #12]
 8007b34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2200      	movs	r2, #0
 8007b42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b46:	2300      	movs	r3, #0
}
 8007b48:	4618      	mov	r0, r3
 8007b4a:	3710      	adds	r7, #16
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b084      	sub	sp, #16
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d101      	bne.n	8007b68 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b64:	2302      	movs	r3, #2
 8007b66:	e02d      	b.n	8007bc4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2224      	movs	r2, #36	; 0x24
 8007b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0201 	bic.w	r2, r2, #1
 8007b8e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	430a      	orrs	r2, r1
 8007ba2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f811 	bl	8007bcc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2220      	movs	r2, #32
 8007bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d108      	bne.n	8007bee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bec:	e031      	b.n	8007c52 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bee:	2310      	movs	r3, #16
 8007bf0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bf2:	2310      	movs	r3, #16
 8007bf4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	0e5b      	lsrs	r3, r3, #25
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	f003 0307 	and.w	r3, r3, #7
 8007c04:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	0f5b      	lsrs	r3, r3, #29
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	f003 0307 	and.w	r3, r3, #7
 8007c14:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c16:	7bbb      	ldrb	r3, [r7, #14]
 8007c18:	7b3a      	ldrb	r2, [r7, #12]
 8007c1a:	4911      	ldr	r1, [pc, #68]	; (8007c60 <UARTEx_SetNbDataToProcess+0x94>)
 8007c1c:	5c8a      	ldrb	r2, [r1, r2]
 8007c1e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c22:	7b3a      	ldrb	r2, [r7, #12]
 8007c24:	490f      	ldr	r1, [pc, #60]	; (8007c64 <UARTEx_SetNbDataToProcess+0x98>)
 8007c26:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c28:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c2c:	b29a      	uxth	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c34:	7bfb      	ldrb	r3, [r7, #15]
 8007c36:	7b7a      	ldrb	r2, [r7, #13]
 8007c38:	4909      	ldr	r1, [pc, #36]	; (8007c60 <UARTEx_SetNbDataToProcess+0x94>)
 8007c3a:	5c8a      	ldrb	r2, [r1, r2]
 8007c3c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c40:	7b7a      	ldrb	r2, [r7, #13]
 8007c42:	4908      	ldr	r1, [pc, #32]	; (8007c64 <UARTEx_SetNbDataToProcess+0x98>)
 8007c44:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c46:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c52:	bf00      	nop
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	08007d00 	.word	0x08007d00
 8007c64:	08007d08 	.word	0x08007d08

08007c68 <__libc_init_array>:
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	4d0d      	ldr	r5, [pc, #52]	; (8007ca0 <__libc_init_array+0x38>)
 8007c6c:	4c0d      	ldr	r4, [pc, #52]	; (8007ca4 <__libc_init_array+0x3c>)
 8007c6e:	1b64      	subs	r4, r4, r5
 8007c70:	10a4      	asrs	r4, r4, #2
 8007c72:	2600      	movs	r6, #0
 8007c74:	42a6      	cmp	r6, r4
 8007c76:	d109      	bne.n	8007c8c <__libc_init_array+0x24>
 8007c78:	4d0b      	ldr	r5, [pc, #44]	; (8007ca8 <__libc_init_array+0x40>)
 8007c7a:	4c0c      	ldr	r4, [pc, #48]	; (8007cac <__libc_init_array+0x44>)
 8007c7c:	f000 f820 	bl	8007cc0 <_init>
 8007c80:	1b64      	subs	r4, r4, r5
 8007c82:	10a4      	asrs	r4, r4, #2
 8007c84:	2600      	movs	r6, #0
 8007c86:	42a6      	cmp	r6, r4
 8007c88:	d105      	bne.n	8007c96 <__libc_init_array+0x2e>
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
 8007c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c90:	4798      	blx	r3
 8007c92:	3601      	adds	r6, #1
 8007c94:	e7ee      	b.n	8007c74 <__libc_init_array+0xc>
 8007c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c9a:	4798      	blx	r3
 8007c9c:	3601      	adds	r6, #1
 8007c9e:	e7f2      	b.n	8007c86 <__libc_init_array+0x1e>
 8007ca0:	08007d18 	.word	0x08007d18
 8007ca4:	08007d18 	.word	0x08007d18
 8007ca8:	08007d18 	.word	0x08007d18
 8007cac:	08007d1c 	.word	0x08007d1c

08007cb0 <memset>:
 8007cb0:	4402      	add	r2, r0
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d100      	bne.n	8007cba <memset+0xa>
 8007cb8:	4770      	bx	lr
 8007cba:	f803 1b01 	strb.w	r1, [r3], #1
 8007cbe:	e7f9      	b.n	8007cb4 <memset+0x4>

08007cc0 <_init>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	bf00      	nop
 8007cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc6:	bc08      	pop	{r3}
 8007cc8:	469e      	mov	lr, r3
 8007cca:	4770      	bx	lr

08007ccc <_fini>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	bf00      	nop
 8007cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd2:	bc08      	pop	{r3}
 8007cd4:	469e      	mov	lr, r3
 8007cd6:	4770      	bx	lr
